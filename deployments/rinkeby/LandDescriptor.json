{
  "address": "0xdfc0Ceb90fc2b68873aC2F1b11E05A2EcC2facDD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__FromUintOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00f861b078f6657c7344a6b4ff4b3bedf8e7b31af45ca08321755ff985818463",
  "receipt": {
    "to": null,
    "from": "0xebF5209E76b34553b1cFD5bec2d71Dc8A6559A2e",
    "contractAddress": "0xdfc0Ceb90fc2b68873aC2F1b11E05A2EcC2facDD",
    "transactionIndex": 19,
    "gasUsed": "5191271",
    "logsBloom": "0x
    "blockHash": "0x04550fb0f21a733bbc6920043f535f0c2181c02d4596c84dfdc608712cf04649",
    "transactionHash": "0x00f861b078f6657c7344a6b4ff4b3bedf8e7b31af45ca08321755ff985818463",
    "logs": [],
    "blockNumber": 10006185,
    "cumulativeGasUsed": "7780700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a0850beaeb59876798d87f6fb83217b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__FromUintOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pedro Bergamini, Basil Gorin\",\"kind\":\"dev\",\"methods\":{\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"token ID of the land plot to generate SVG for\"}}},\"title\":\"Land Descriptor Implementation\",\"version\":1},\"userdoc\":{\"errors\":{\"PRBMathUD60x18__FromUintOverflow(uint256)\":[{\"notice\":\"Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"tokenURI(uint256)\":{\"notice\":\"Creates SVG image with the land plot metadata painted on it,      encodes the generated SVG into base64 URI string\"}},\"notice\":\"Basic implementation of the LandDescriptor interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/LandDescriptorImpl.sol\":\"LandDescriptorImpl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/interfaces/LandERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../lib/LandLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Land ERC721 Metadata\\r\\n *\\r\\n * @notice Defines metadata-related capabilities for LandERC721 token.\\r\\n *      This interface should be treated as a definition of what metadata is for LandERC721,\\r\\n *      and what operations are defined/allowed for it.\\r\\n *\\r\\n * @author Basil Gorin\\r\\n */\\r\\ninterface LandERC721Metadata {\\r\\n\\t/**\\r\\n\\t * @notice Presents token metadata in a well readable form,\\r\\n\\t *      with the Internal Land Structure included, as a `PlotView` struct\\r\\n\\t *\\r\\n\\t * @notice Reconstructs the internal land structure of the plot based on the stored\\r\\n\\t *      Tier ID, Plot Size, Generator Version, and Seed\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to query metadata view for\\r\\n\\t * @return token metadata as a `PlotView` struct\\r\\n\\t */\\r\\n\\tfunction viewMetadata(uint256 _tokenId) external view returns (LandLib.PlotView memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Presents token metadata \\\"as is\\\", without the Internal Land Structure included,\\r\\n\\t *      as a `PlotStore` struct;\\r\\n\\t *\\r\\n\\t * @notice Doesn't reconstruct the internal land structure of the plot, allowing to\\r\\n\\t *      access Generator Version, and Seed fields \\\"as is\\\"\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to query on-chain metadata for\\r\\n\\t * @return token metadata as a `PlotStore` struct\\r\\n\\t */\\r\\n\\tfunction getMetadata(uint256 _tokenId) external view returns (LandLib.PlotStore memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Verifies if token has its metadata set on-chain; for the tokens\\r\\n\\t *      in existence metadata is immutable, it can be set once, and not updated\\r\\n\\t *\\r\\n\\t * @dev If `exists(_tokenId) && hasMetadata(_tokenId)` is true, `setMetadata`\\r\\n\\t *      for such a `_tokenId` will always throw\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to check metadata existence for\\r\\n\\t * @return true if token ID specified has metadata associated with it\\r\\n\\t */\\r\\n\\tfunction hasMetadata(uint256 _tokenId) external view returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets/updates token metadata on-chain; same metadata struct can be then\\r\\n\\t *      read back using `getMetadata()` function, or it can be converted to\\r\\n\\t *      `PlotView` using `viewMetadata()` function\\r\\n\\t *\\r\\n\\t * @dev The metadata supplied is validated to satisfy (regionId, x, y) uniqueness;\\r\\n\\t *      non-intersection of the sites coordinates within a plot is guaranteed by the\\r\\n\\t *      internal land structure generator algorithm embedded into the `viewMetadata()`\\r\\n\\t *\\r\\n\\t * @dev Metadata for non-existing tokens can be set and updated unlimited\\r\\n\\t *      amount of times without any restrictions (except the constraints above)\\r\\n\\t * @dev Metadata for an existing token can only be set, it cannot be updated\\r\\n\\t *      (`setMetadata` will throw if metadata already exists)\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to set/updated the metadata for\\r\\n\\t * @param _plot token metadata to be set for the token ID\\r\\n\\t */\\r\\n\\tfunction setMetadata(uint256 _tokenId, LandLib.PlotStore memory _plot) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes token metadata\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to remove metadata for\\r\\n\\t */\\r\\n\\tfunction removeMetadata(uint256 _tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mints the token and assigns the metadata supplied\\r\\n\\t *\\r\\n\\t * @dev Creates new token with the token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\r\\n\\t *      Consider minting with `safeMint` (and setting metadata before),\\r\\n\\t *      for the \\\"safe mint\\\" like behavior\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId token ID to mint and set metadata for\\r\\n\\t * @param _plot token metadata to be set for the token ID\\r\\n\\t */\\r\\n\\tfunction mintWithMetadata(address _to, uint256 _tokenId, LandLib.PlotStore memory _plot) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Land Descriptor\\r\\n *\\r\\n * @notice Auxiliary module which is dynamically injected into LandERC721 contract\\r\\n *      to override the default ERC721.tokenURI behaviour\\r\\n *\\r\\n * @notice This can be used, for example, to enable on-chain generation of the SVG\\r\\n *      image representation of the land plot, encoding it into base64 string, and\\r\\n *      using it instead of token URI pointing to some off-chain sotrage location\\r\\n *\\r\\n * @dev Can be dynamically injected into LandERC721 at any time, can be dynamically detached\\r\\n *      from the LandERC721 once attached (injected)\\r\\n *\\r\\n * @author Pedro Bergamini, Basil Gorin\\r\\n */\\r\\ninterface LandDescriptor {\\r\\n\\t/**\\r\\n\\t * @notice Creates SVG image with the land plot metadata painted on it,\\r\\n\\t *      encodes the generated SVG into base64 URI string\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID of the land plot to generate SVG for\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xc80c728482515a472622fc92ac965a2c9e4ed454829b3091b02a9325a762048d\",\"license\":\"MIT\"},\"contracts/lib/LandLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Land Library\\r\\n *\\r\\n * @notice A library defining data structures related to land plots (used in Land ERC721 token),\\r\\n *      and functions transforming these structures between view and internal (packed) representations,\\r\\n *      in both directions.\\r\\n *\\r\\n * @notice Due to some limitations Solidity has (ex.: allocating array of structures in storage),\\r\\n *      and due to the specific nature of internal land structure\\r\\n *      (landmark and resource sites data is deterministically derived from a pseudo random seed),\\r\\n *      it is convenient to separate data structures used to store metadata on-chain (store),\\r\\n *      and data structures used to present metadata via smart contract ABI (view)\\r\\n *\\r\\n * @notice Introduces helper functions to detect and deal with the resource site collisions\\r\\n *\\r\\n * @author Basil Gorin\\r\\n */\\r\\nlibrary LandLib {\\r\\n\\t/**\\r\\n\\t * @title Resource Site View\\r\\n\\t *\\r\\n\\t * @notice Resource Site, bound to a coordinates (x, y) within the land plot\\r\\n\\t *\\r\\n\\t * @notice Resources can be of two major types, each type having three subtypes:\\r\\n\\t *      - Element (Carbon, Silicon, Hydrogen), or\\r\\n\\t *      - Fuel (Crypton, Hyperion, Solon)\\r\\n\\t *\\r\\n\\t * @dev View only structure, used in public API/ABI, not used in on-chain storage\\r\\n\\t */\\r\\n\\tstruct Site {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Site type:\\r\\n\\t\\t *        1) Carbon (element),\\r\\n\\t\\t *        2) Silicon (element),\\r\\n\\t\\t *        3) Hydrogen (element),\\r\\n\\t\\t *        4) Crypton (fuel),\\r\\n\\t\\t *        5) Hyperion (fuel),\\r\\n\\t\\t *        6) Solon (fuel)\\r\\n\\t\\t */\\r\\n\\t\\tuint8 typeId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev x-coordinate within a plot\\r\\n\\t\\t */\\r\\n\\t\\tuint16 x;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev y-coordinate within a plot\\r\\n\\t\\t */\\r\\n\\t\\tuint16 y;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @title Land Plot View\\r\\n\\t *\\r\\n\\t * @notice Land Plot, bound to a coordinates (x, y) within the region,\\r\\n\\t *      with a rarity defined by the tier ID, sites, and (optionally)\\r\\n\\t *      a landmark, positioned on the internal coordinate grid of the\\r\\n\\t *      specified size within a plot.\\r\\n\\t *\\r\\n\\t * @notice Land plot coordinates and rarity are predefined (stored off-chain).\\r\\n\\t *      Number of sites (and landmarks - 0/1) is defined by the land rarity.\\r\\n\\t *      Positions of sites, types of sites/landmark are randomized and determined\\r\\n\\t *      upon land plot creation.\\r\\n\\t *\\r\\n\\t * @dev View only structure, used in public API/ABI, not used in on-chain storage\\r\\n\\t */\\r\\n\\tstruct PlotView {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Region ID defines the region on the map in IZ:\\r\\n\\t\\t *        1) Abyssal Basin\\r\\n\\t\\t *        2) Brightland Steppes\\r\\n\\t\\t *        3) Shardbluff Labyrinth\\r\\n\\t\\t *        4) Crimson Waste\\r\\n\\t\\t *        5) Halcyon Sea\\r\\n\\t\\t *        6) Taiga Boreal\\r\\n\\t\\t *        7) Crystal Shores\\r\\n\\t\\t */\\r\\n\\t\\tuint8 regionId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev x-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 x;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev y-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 y;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Tier ID defines land rarity and number of sites within the plot\\r\\n\\t\\t */\\r\\n\\t\\tuint8 tierId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Plot size, limits the (x, y) coordinates for the sites\\r\\n\\t\\t */\\r\\n\\t\\tuint16 size;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Landmark Type ID:\\r\\n\\t\\t *        0) no Landmark\\r\\n\\t\\t *        1) Carbon Landmark,\\r\\n\\t\\t *        2) Silicon Landmark,\\r\\n\\t\\t *        3) Hydrogen Landmark (Eternal Spring),\\r\\n\\t\\t *        4) Crypton Landmark,\\r\\n\\t\\t *        5) Hyperion Landmark,\\r\\n\\t\\t *        6) Solon Landmark (Fallen Star),\\r\\n\\t\\t *        7) Arena\\r\\n\\t\\t *\\r\\n\\t\\t * @dev Landmark is always positioned in the center of internal grid\\r\\n\\t\\t */\\r\\n\\t\\tuint8 landmarkTypeId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Element Sites (Carbon, Silicon, or Hydrogen) this plot contains,\\r\\n\\t\\t *      matches the number of element sites in sites[] array\\r\\n\\t\\t */\\r\\n\\t\\tuint8 elementSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Fuel Sites (Crypton, Hyperion, or Solon) this plot contains,\\r\\n\\t\\t *      matches the number of fuel sites in sites[] array\\r\\n\\t\\t */\\r\\n\\t\\tuint8 fuelSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Element/fuel sites within the plot\\r\\n\\t\\t */\\r\\n\\t\\tSite[] sites;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @title Land Plot Store\\r\\n\\t *\\r\\n\\t * @notice Land Plot data structure as it is stored on-chain\\r\\n\\t *\\r\\n\\t * @notice Contains the data required to generate `PlotView` structure:\\r\\n\\t *      - regionId, x, y, tierId, size, landmarkTypeId, elementSites, and fuelSites are copied as is\\r\\n\\t *      - version and seed are used to derive array of sites (together with elementSites, and fuelSites)\\r\\n\\t *\\r\\n\\t * @dev On-chain optimized structure, has limited usage in public API/ABI\\r\\n\\t */\\r\\n\\tstruct PlotStore {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Region ID defines the region on the map in IZ:\\r\\n\\t\\t *        1) Abyssal Basin\\r\\n\\t\\t *        2) Brightland Steppes\\r\\n\\t\\t *        3) Shardbluff Labyrinth\\r\\n\\t\\t *        4) Crimson Waste\\r\\n\\t\\t *        5) Halcyon Sea\\r\\n\\t\\t *        6) Taiga Boreal\\r\\n\\t\\t *        7) Crystal Shores\\r\\n\\t\\t */\\r\\n\\t\\tuint8 regionId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev x-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 x;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev y-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 y;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Tier ID defines land rarity and number of sites within the plot\\r\\n\\t\\t */\\r\\n\\t\\tuint8 tierId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Plot Size, limits the (x, y) coordinates for the sites\\r\\n\\t\\t */\\r\\n\\t\\tuint16 size;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Landmark Type ID:\\r\\n\\t\\t *        0) no Landmark\\r\\n\\t\\t *        1) Carbon Landmark,\\r\\n\\t\\t *        2) Silicon Landmark,\\r\\n\\t\\t *        3) Hydrogen Landmark (Eternal Spring),\\r\\n\\t\\t *        4) Crypton Landmark,\\r\\n\\t\\t *        5) Hyperion Landmark,\\r\\n\\t\\t *        6) Solon Landmark (Fallen Star),\\r\\n\\t\\t *        7) Arena\\r\\n\\t\\t *\\r\\n\\t\\t * @dev Landmark is always positioned in the center of internal grid\\r\\n\\t\\t */\\r\\n\\t\\tuint8 landmarkTypeId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Element Sites (Carbon, Silicon, or Hydrogen) this plot contains\\r\\n\\t\\t */\\r\\n\\t\\tuint8 elementSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Fuel Sites (Crypton, Hyperion, or Solon) this plot contains\\r\\n\\t\\t */\\r\\n\\t\\tuint8 fuelSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Generator Version, reserved for the future use in order to tweak the\\r\\n\\t\\t *      behavior of the internal land structure algorithm\\r\\n\\t\\t */\\r\\n\\t\\tuint8 version;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Pseudo-random Seed to generate Internal Land Structure,\\r\\n\\t\\t *      should be treated as already used to derive Landmark Type ID\\r\\n\\t\\t */\\r\\n\\t\\tuint160 seed;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Expands `PlotStore` data struct into a `PlotView` view struct\\r\\n\\t *\\r\\n\\t * @dev Derives internal land structure (resource sites the plot has)\\r\\n\\t *      from Number of Element/Fuel Sites, Plot Size, and Seed;\\r\\n\\t *      Generator Version is not currently used\\r\\n\\t *\\r\\n\\t * @param store on-chain `PlotStore` data structure to expand\\r\\n\\t * @return `PlotView` view struct, expanded from the on-chain data\\r\\n\\t */\\r\\n\\tfunction plotView(PlotStore memory store) internal pure returns (PlotView memory) {\\r\\n\\t\\t// copy most of the fields as is, derive resource sites array inline\\r\\n\\t\\treturn PlotView({\\r\\n\\t\\t\\tregionId:       store.regionId,\\r\\n\\t\\t\\tx:              store.x,\\r\\n\\t\\t\\ty:              store.y,\\r\\n\\t\\t\\ttierId:         store.tierId,\\r\\n\\t\\t\\tsize:           store.size,\\r\\n\\t\\t\\tlandmarkTypeId: store.landmarkTypeId,\\r\\n\\t\\t\\telementSites:   store.elementSites,\\r\\n\\t\\t\\tfuelSites:      store.fuelSites,\\r\\n\\t\\t\\t// derive the resource sites from Number of Element/Fuel Sites, Plot Size, and Seed\\r\\n\\t\\t\\tsites:          getResourceSites(store.seed, store.elementSites, store.fuelSites, store.size, 2)\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed, tier ID, and plot size, determines the\\r\\n\\t *      internal land structure (resource sites the plot has)\\r\\n\\t *\\r\\n\\t * @dev Function works in a deterministic way and derives the same data\\r\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive the internal structure\\r\\n\\t * @param elementSites number of element sites plot has\\r\\n\\t * @param fuelSites number of fuel sites plot has\\r\\n\\t * @param gridSize plot size `N` of the land plot to derive internal structure for\\r\\n\\t * @param siteSize implied size `n` of the resource sites\\r\\n\\t * @return sites randomized array of resource sites\\r\\n\\t */\\r\\n\\tfunction getResourceSites(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint8 elementSites,\\r\\n\\t\\tuint8 fuelSites,\\r\\n\\t\\tuint16 gridSize,\\r\\n\\t\\tuint8 siteSize\\r\\n\\t) internal pure returns (Site[] memory sites) {\\r\\n\\t\\t// derive the total number of sites\\r\\n\\t\\tuint8 totalSites = elementSites + fuelSites;\\r\\n\\r\\n\\t\\t// denote the grid (plot) size `N`\\r\\n\\t\\t// denote the resource site size `n`\\r\\n\\r\\n\\t\\t// transform coordinate system (1): normalization (x, y) => (x / n, y / n)\\r\\n\\t\\t// if `N` is odd this cuts off border coordinates x = N - 1, y = N - 1\\r\\n\\t\\tuint16 normalizedSize = gridSize / siteSize;\\r\\n\\r\\n\\t\\t// after normalization (1) is applied, isomorphic grid becomes effectively larger\\r\\n\\t\\t// due to borders capturing effect, for example if N = 4, and n = 2:\\r\\n\\t\\t//      | .. |                                              |....|\\r\\n\\t\\t// grid |....| becomes |..| normalized which is effectively |....|\\r\\n\\t\\t//      |....|         |..|                                 |....|\\r\\n\\t\\t//      | .. |                                              |....|\\r\\n\\t\\t// transform coordinate system (2): cut the borders, and reduce grid size to be multiple of 2\\r\\n\\t\\t// if `N/2` is odd this cuts off border coordinates x = N/2 - 1, y = N/2 - 1\\r\\n\\t\\tnormalizedSize = (normalizedSize - 2) / 2 * 2;\\r\\n\\r\\n\\t\\t// define coordinate system: an isomorphic grid on a square of size [size, size]\\r\\n\\t\\t// transform coordinate system (3): pack an isomorphic grid on a rectangle of size [size, 1 + size / 2]\\r\\n\\t\\t// transform coordinate system (4): (x, y) -> y * size + x (two-dimensional Cartesian -> one-dimensional segment)\\r\\n\\t\\t// generate site coordinates in a transformed coordinate system (on a one-dimensional segment)\\r\\n\\t\\tuint16[] memory coords; // define temporary array to determine sites' coordinates\\r\\n\\t\\t// cut off four elements in the end of the segment to reserve space in the center for a landmark\\r\\n\\t\\t(seed, coords) = getCoords(seed, totalSites, normalizedSize * (1 + normalizedSize / 2) - 4);\\r\\n\\r\\n\\t\\t// allocate number of sites required\\r\\n\\t\\tsites = new Site[](totalSites);\\r\\n\\r\\n\\t\\t// define the variables used inside the loop outside the loop to help compiler optimizations\\r\\n\\t\\t// site type ID is de facto uint8, we're using uint16 for convenience with `nextRndUint16`\\r\\n\\t\\tuint16 typeId;\\r\\n\\t\\t// site coordinates (x, y)\\r\\n\\t\\tuint16 x;\\r\\n\\t\\tuint16 y;\\r\\n\\r\\n\\t\\t// determine the element and fuel sites one by one\\r\\n\\t\\tfor(uint8 i = 0; i < totalSites; i++) {\\r\\n\\t\\t\\t// determine next random number in the sequence, and random site type from it\\r\\n\\t\\t\\t(seed, typeId) = nextRndUint16(seed, i < elementSites? 1: 4, 3);\\r\\n\\r\\n\\t\\t\\t// determine x and y\\r\\n\\t\\t\\t// reverse transform coordinate system (4): x = size % i, y = size / i\\r\\n\\t\\t\\t// (back from one-dimensional segment to two-dimensional Cartesian)\\r\\n\\t\\t\\tx = coords[i] % normalizedSize;\\r\\n\\t\\t\\ty = coords[i] / normalizedSize;\\r\\n\\r\\n\\t\\t\\t// reverse transform coordinate system (3): unpack isomorphic grid onto a square of size [size, size]\\r\\n\\t\\t\\t// fix the \\\"(0, 0) left-bottom corner\\\" of the isomorphic grid\\r\\n\\t\\t\\tif(2 * (1 + x + y) < normalizedSize) {\\r\\n\\t\\t\\t\\tx += normalizedSize / 2;\\r\\n\\t\\t\\t\\ty += 1 + normalizedSize / 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// fix the \\\"(size, 0) right-bottom corner\\\" of the isomorphic grid\\r\\n\\t\\t\\telse if(2 * x > normalizedSize && 2 * x > 2 * y + normalizedSize) {\\r\\n\\t\\t\\t\\tx -= normalizedSize / 2;\\r\\n\\t\\t\\t\\ty += 1 + normalizedSize / 2;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// move the site from the center (four positions near the center) to a free spot\\r\\n\\t\\t\\tif(x >= normalizedSize / 2 - 1 && x <= normalizedSize / 2\\r\\n\\t\\t\\t&& y >= normalizedSize / 2 - 1 && y <= normalizedSize / 2) {\\r\\n\\t\\t\\t\\t// `x` is aligned over the free space in the end of the segment\\r\\n\\t\\t\\t\\t// x += normalizedSize / 2 + 2 * (normalizedSize / 2 - x) + 2 * (normalizedSize / 2 - y) - 4;\\r\\n\\t\\t\\t\\tx += 5 * normalizedSize / 2 - 2 * (x + y) - 4;\\r\\n\\t\\t\\t\\t// `y` is fixed over the free space in the end of the segment\\r\\n\\t\\t\\t\\ty = normalizedSize / 2;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// if `N/2` is odd recover previously cut off border coordinates x = N/2 - 1, y = N/2 - 1\\r\\n\\t\\t\\t// if `N` is odd recover previously cut off border coordinates x = N - 1, y = N - 1\\r\\n\\t\\t\\tuint16 offset = gridSize / siteSize % 2 + gridSize % siteSize;\\r\\n\\r\\n\\t\\t\\t// based on the determined site type and coordinates, allocate the site\\r\\n\\t\\t\\tsites[i] = Site({\\r\\n\\t\\t\\t\\ttypeId: uint8(typeId),\\r\\n\\t\\t\\t\\t// reverse transform coordinate system (2): recover borders (x, y) => (x + 1, y + 1)\\r\\n\\t\\t\\t\\t// if `N/2` is odd recover previously cut off border coordinates x = N/2 - 1, y = N/2 - 1\\r\\n\\t\\t\\t\\t// reverse transform coordinate system (1): (x, y) => (n * x, n * y), where n is site size\\r\\n\\t\\t\\t\\t// if `N` is odd recover previously cut off border coordinates x = N - 1, y = N - 1\\r\\n\\t\\t\\t\\tx: (1 + x) * siteSize + offset,\\r\\n\\t\\t\\t\\ty: (1 + y) * siteSize + offset\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed and tier ID determines the landmark type of the plot.\\r\\n\\t *      Random seed is consumed for tiers 3 and 4 to randomly determine one of three\\r\\n\\t *      possible landmark types.\\r\\n\\t *      Tier 5 has its landmark type predefined (arena), lower tiers don't have a landmark.\\r\\n\\t *\\r\\n\\t * @dev Function works in a deterministic way and derives the same data\\r\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive the landmark type based on\\r\\n\\t * @param tierId tier ID of the land plot\\r\\n\\t * @return landmarkTypeId landmark type defined by its ID\\r\\n\\t */\\r\\n\\tfunction getLandmark(uint256 seed, uint8 tierId) internal pure returns (uint8 landmarkTypeId) {\\r\\n\\t\\t// depending on the tier, land plot can have a landmark\\r\\n\\t\\t// tier 3 has an element landmark (1, 2, 3)\\r\\n\\t\\tif(tierId == 3) {\\r\\n\\t\\t\\t// derive random element landmark\\r\\n\\t\\t\\treturn uint8(1 + seed % 3);\\r\\n\\t\\t}\\r\\n\\t\\t// tier 4 has a fuel landmark (4, 5, 6)\\r\\n\\t\\tif(tierId == 4) {\\r\\n\\t\\t\\t// derive random fuel landmark\\r\\n\\t\\t\\treturn uint8(4 + seed % 3);\\r\\n\\t\\t}\\r\\n\\t\\t// tier 5 has an arena landmark\\r\\n\\t\\tif(tierId == 5) {\\r\\n\\t\\t\\t// 7 - arena landmark\\r\\n\\t\\t\\treturn 7;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// lower tiers (0, 1, 2) don't have any landmark\\r\\n\\t\\t// tiers greater than 5 are not defined\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Derives an array of integers with no duplicates from the random seed;\\r\\n\\t *      each element in the array is within [0, size) bounds and represents\\r\\n\\t *      a two-dimensional Cartesian coordinate point (x, y) presented as one-dimensional\\r\\n\\t *\\r\\n\\t * @dev Function works in a deterministic way and derives the same data\\r\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\r\\n\\t *\\r\\n\\t * @dev The input seed is considered to be already used to derive some random value\\r\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\r\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\r\\n\\t *      value is derived from it\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive coordinates from\\r\\n\\t * @param length number of elements to generate\\r\\n\\t * @param size defines array element bounds [0, size)\\r\\n\\t * @return nextSeed next pseudo-random \\\"used\\\" seed\\r\\n\\t * @return coords the resulting array of length `n` with random non-repeating elements\\r\\n\\t *      in [0, size) range\\r\\n\\t */\\r\\n\\tfunction getCoords(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint8 length,\\r\\n\\t\\tuint16 size\\r\\n\\t) internal pure returns (uint256 nextSeed, uint16[] memory coords) {\\r\\n\\t\\t// allocate temporary array to store (and determine) sites' coordinates\\r\\n\\t\\tcoords = new uint16[](length);\\r\\n\\r\\n\\t\\t// generate site coordinates one by one\\r\\n\\t\\tfor(uint8 i = 0; i < coords.length; i++) {\\r\\n\\t\\t\\t// get next number and update the seed\\r\\n\\t\\t\\t(seed, coords[i]) = nextRndUint16(seed, 0, size);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// sort the coordinates\\r\\n\\t\\tsort(coords);\\r\\n\\r\\n\\t\\t// find the if there are any duplicates, and while there are any\\r\\n\\t\\tfor(int256 i = findDup(coords); i >= 0; i = findDup(coords)) {\\r\\n\\t\\t\\t// regenerate the element at duplicate position found\\r\\n\\t\\t\\t(seed, coords[uint256(i)]) = nextRndUint16(seed, 0, size);\\r\\n\\t\\t\\t// sort the coordinates again\\r\\n\\t\\t\\t// TODO: check if this doesn't degrade the performance significantly (note the pivot in quick sort)\\r\\n\\t\\t\\tsort(coords);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// shuffle the array to compensate for the sorting made before\\r\\n\\t\\tseed = shuffle(seed, coords);\\r\\n\\r\\n\\t\\t// return the updated used seed, and generated coordinates\\r\\n\\t\\treturn (seed, coords);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed, generates next random seed, and a random value\\r\\n\\t *      not lower than given `offset` value and able to have `options` different\\r\\n\\t *      possible values\\r\\n\\t *\\r\\n\\t * @dev The input seed is considered to be already used to derive some random value\\r\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\r\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\r\\n\\t *      value is derived from it\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive next random value from\\r\\n\\t * @param offset the minimum possible output\\r\\n\\t * @param options number of different possible values to output\\r\\n\\t * @return nextSeed next pseudo-random \\\"used\\\" seed\\r\\n\\t * @return rndVal random value in the [offset, offset + options) range\\r\\n\\t */\\r\\n\\tfunction nextRndUint16(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint16 offset,\\r\\n\\t\\tuint16 options\\r\\n\\t) internal pure returns (\\r\\n\\t\\tuint256 nextSeed,\\r\\n\\t\\tuint16 rndVal\\r\\n\\t) {\\r\\n\\t\\t// generate next random seed first\\r\\n\\t\\tnextSeed = uint256(keccak256(abi.encodePacked(seed)));\\r\\n\\r\\n\\t\\t// derive random value with the desired properties from\\r\\n\\t\\t// the newly generated seed\\r\\n\\t\\trndVal = offset + uint16(nextSeed % options);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Plot location is a combination of (regionId, x, y), it's effectively\\r\\n\\t *      a 3-dimensional coordinate, unique for each plot\\r\\n\\t *\\r\\n\\t * @dev The function extracts plot location from the plot and represents it\\r\\n\\t *      in a packed form of 3 integers constituting the location: regionId | x | y\\r\\n\\t *\\r\\n\\t * @param plot `PlotView` view structure to extract location from\\r\\n\\t * @return Plot location (regionId, x, y) as a packed integer\\r\\n\\t */\\r\\n/*\\r\\n\\tfunction loc(PlotView memory plot) internal pure returns (uint40) {\\r\\n\\t\\t// tightly pack the location data and return\\r\\n\\t\\treturn uint40(plot.regionId) << 32 | uint32(plot.y) << 16 | plot.x;\\r\\n\\t}\\r\\n*/\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Plot location is a combination of (regionId, x, y), it's effectively\\r\\n\\t *      a 3-dimensional coordinate, unique for each plot\\r\\n\\t *\\r\\n\\t * @dev The function extracts plot location from the plot and represents it\\r\\n\\t *      in a packed form of 3 integers constituting the location: regionId | x | y\\r\\n\\t *\\r\\n\\t * @param plot `PlotStore` data store structure to extract location from\\r\\n\\t * @return Plot location (regionId, x, y) as a packed integer\\r\\n\\t */\\r\\n\\tfunction loc(PlotStore memory plot) internal pure returns (uint40) {\\r\\n\\t\\t// tightly pack the location data and return\\r\\n\\t\\treturn uint40(plot.regionId) << 32 | uint32(plot.y) << 16 | plot.x;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Site location is a combination of (x, y), unique for each site within a plot\\r\\n\\t *\\r\\n\\t * @dev The function extracts site location from the site and represents it\\r\\n\\t *      in a packed form of 2 integers constituting the location: x | y\\r\\n\\t *\\r\\n\\t * @param site `Site` view structure to extract location from\\r\\n\\t * @return Site location (x, y) as a packed integer\\r\\n\\t */\\r\\n/*\\r\\n\\tfunction loc(Site memory site) internal pure returns (uint32) {\\r\\n\\t\\t// tightly pack the location data and return\\r\\n\\t\\treturn uint32(site.y) << 16 | site.x;\\r\\n\\t}\\r\\n*/\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Finds first pair of repeating elements in the array\\r\\n\\t *\\r\\n\\t * @dev Assumes the array is sorted ascending:\\r\\n\\t *      returns `-1` if array is strictly monotonically increasing,\\r\\n\\t *      index of the first duplicate found otherwise\\r\\n\\t *\\r\\n\\t * @param arr an array of elements to check\\r\\n\\t * @return index found duplicate index, or `-1` if there are no repeating elements\\r\\n\\t */\\r\\n\\tfunction findDup(uint16[] memory arr) internal pure returns (int256 index) {\\r\\n\\t\\t// iterate over the array [1, n], leaving the space in the beginning for pair comparison\\r\\n\\t\\tfor(uint256 i = 1; i < arr.length; i++) {\\r\\n\\t\\t\\t// verify if there is a strict monotonically increase violation\\r\\n\\t\\t\\tif(arr[i - 1] >= arr[i]) {\\r\\n\\t\\t\\t\\t// return its index if yes\\r\\n\\t\\t\\t\\treturn int256(i - 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// return `-1` if no violation was found - array is strictly monotonically increasing\\r\\n\\t\\treturn -1;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Shuffles an array if integers by making random permutations\\r\\n\\t *      in the amount equal to the array size\\r\\n\\t *\\r\\n\\t * @dev The input seed is considered to be already used to derive some random value\\r\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\r\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\r\\n\\t *      value is derived from it\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive next random value from\\r\\n\\t * @param arr an array to shuffle\\r\\n\\t * @return nextSeed next pseudo-random \\\"used\\\" seed\\r\\n\\t */\\r\\n\\tfunction shuffle(uint256 seed, uint16[] memory arr) internal pure returns(uint256 nextSeed) {\\r\\n\\t\\t// define index `j` to permute with loop index `i` outside the loop to help compiler optimizations\\r\\n\\t\\tuint16 j;\\r\\n\\r\\n\\t\\t// iterate over the array one single time\\r\\n\\t\\tfor(uint16 i = 0; i < arr.length; i++) {\\r\\n\\t\\t\\t// determine random index `j` to swap with the loop index `i`\\r\\n\\t\\t\\t(seed, j) = nextRndUint16(seed, 0, uint16(arr.length));\\r\\n\\r\\n\\t\\t\\t// do the swap\\r\\n\\t\\t\\t(arr[i], arr[j]) = (arr[j], arr[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// return the updated used seed\\r\\n\\t\\treturn seed;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sorts an array of integers using quick sort algorithm\\r\\n\\t *\\r\\n\\t * @dev Quick sort recursive implementation\\r\\n\\t *      Source:   https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f\\r\\n\\t *      See also: https://www.geeksforgeeks.org/quick-sort/\\r\\n\\t *\\r\\n\\t * @param arr an array to sort\\r\\n\\t */\\r\\n\\tfunction sort(uint16[] memory arr) internal pure {\\r\\n\\t\\tquickSort(arr, 0, int256(arr.length) - 1);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Quick sort recursive implementation\\r\\n\\t *      Source:     https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f\\r\\n\\t *      Discussion: https://blog.cotten.io/thinking-in-solidity-6670c06390a9\\r\\n\\t *      See also:   https://www.geeksforgeeks.org/quick-sort/\\r\\n\\t */\\r\\n\\t// TODO: review the implementation code\\r\\n\\tfunction quickSort(uint16[] memory arr, int256 left, int256 right) private pure {\\r\\n\\t\\tint256 i = left;\\r\\n\\t\\tint256 j = right;\\r\\n\\t\\tif(i >= j) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tuint16 pivot = arr[uint256(left + (right - left) / 2)];\\r\\n\\t\\twhile(i <= j) {\\r\\n\\t\\t\\twhile(arr[uint256(i)] < pivot) {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\twhile(pivot < arr[uint256(j)]) {\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(i <= j) {\\r\\n\\t\\t\\t\\t(arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif(left < j) {\\r\\n\\t\\t\\tquickSort(arr, left, j);\\r\\n\\t\\t}\\r\\n\\t\\tif(i < right) {\\r\\n\\t\\t\\tquickSort(arr, i, right);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x444da9d9e23ee63abef08b5439fcea36bc30ef6f235e54a210c7f32266185c97\",\"license\":\"MIT\"},\"contracts/lib/NFTSvg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./LandLib.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title NFT Svg\\r\\n *\\r\\n * @notice Provide functions to generate SVG image representation of the LandERC721, and other\\r\\n *      auxiliary functions to construct token metadata JSON, and encode it into base64 format.\\r\\n *\\r\\n * @notice base64 is the OpenSea standard for NFT SVG images. The SVG JSON generated by the\\r\\n *      `constructTokenURI` is meant to be used in the marketplace.\\r\\n *\\r\\n * @notice `_mainSvg(uint16,uint8)` function holds the main structure with the dimensions for\\r\\n *      the image, the retuning array contains flags that are to be replaced by another SVG component,\\r\\n *      FUTURE_BOARD_CONTAINER.\\r\\n *\\r\\n * @notice `_siteBaseSvg(uint16,uint16,uint8)` will generate a site's component string,\\r\\n *      given it's coordinates and typeId.\\r\\n *\\r\\n * @notice `_boardSvg(uint16,uint8)` returns the template for the the board component, depending on the\\r\\n *      size of the grid and tier ID, LANDMARK and SITES_POSITIONED will need to be replaced in a loop.\\r\\n * @notice `_generateLandmarkSvg(uint16,uint8)` will generate the landmark SVG string given grid size\\r\\n *      and landmark type ID.\\r\\n *\\r\\n * @notice Replacement schema:\\r\\n *      - LANDMARK -> `_generateLandmarkSvg(uint16,uint8)`\\r\\n *      - SITES_POSITIONED -> `_generateSites(LandLib.Site[] memory)`\\r\\n *      - FUTURE_BOARD_CONTAINER -> _generateLandBoard(uint8,uint16,uint8,LandLib.Site[] memory)`\\r\\n *\\r\\n * @notice Loop flag replacement is chosen instead of using function parameters when the replacement\\r\\n *      involves a complex component with considerable string length.\\r\\n *\\r\\n * @notice The coordinates for the SVG are transformed in a way that there'll be `gridSize/2` grid squares\\r\\n *      in the isomorphic grid, given that a square has a size of 3.\\r\\n *\\r\\n * @author Pedro Bergamini, Yuri Fernandes, Estevan Wisoczynski\\r\\n */\\r\\nlibrary NFTSvg {\\r\\n\\tusing Strings for uint256;\\r\\n\\tusing PRBMathUD60x18 for uint256;\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the main svg array component, used in the top level of the generated land SVG.\\r\\n\\t*\\r\\n\\t* @param _gridSize The size of the grid\\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n\\t* @return The base for the land SVG, need to substitute LAND_TIER_ID and FUTURE_BOARD_CONTAINER\\r\\n\\t*/\\r\\n\\tfunction _mainSvg(uint16 _gridSize, uint8 _tierId) private pure returns (string[11] memory) {\\r\\n\\t\\t// Multiply by 3 to get number of grid squares = dimension of the isomorphic grid size\\r\\n\\r\\n\\t\\treturn [\\r\\n\\t\\t\\t\\\"<svg height='\\\",\\r\\n\\t\\t\\tStrings.toString(_gridSize * 3 + 6), \\r\\n\\t\\t\\t\\\"' width='\\\",\\r\\n\\t\\t\\tStrings.toString(_gridSize * 3), \\r\\n\\t\\t\\t\\\"' stroke-width='2' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\\"<rect rx='5%' ry='5%' width='100%' height='99%' fill='url(#BOARD_BOTTOM_BORDER_COLOR_TIER_\\\",\\r\\n\\t\\t\\tStrings.toString(_tierId),\\r\\n\\t\\t\\t\\\")' stroke='none'/>\\\",\\r\\n\\t\\t\\t\\\"<svg height='97.6%' width='100%' stroke-width='2' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\\"FUTURE_BOARD_CONTAINER\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\\"</svg>\\\"\\r\\n\\t\\t];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the site base svg array component, used to represent\\r\\n\\t*      a site inside the land board.\\r\\n\\t*\\r\\n\\t* @param _x Sites.x position\\r\\n\\t* @param _y Sites.y position\\r\\n\\t* @param _typeId Sites.typeId\\r\\n\\t* @return The base SVG element for the sites\\r\\n\\t*/\\r\\n\\tfunction _siteBaseSvg(uint16 _x, uint16 _y, uint8 _typeId) private pure returns (string memory) {\\r\\n\\t\\tstring[] memory siteBaseSvgArray = new string[](7);\\r\\n\\t\\tsiteBaseSvgArray[0] = \\\"<svg x='\\\";\\r\\n\\t\\tsiteBaseSvgArray[1] = Strings.toString(_x);\\r\\n\\t\\tsiteBaseSvgArray[2] = \\\"' y='\\\";\\r\\n\\t\\tsiteBaseSvgArray[3] = Strings.toString(_y);\\r\\n\\t\\tsiteBaseSvgArray[4] = \\\"' width='6' height='6' xmlns='http://www.w3.org/2000/svg'><use href='#SITE_TYPE_\\\";\\r\\n\\t\\tsiteBaseSvgArray[5] = Strings.toString(_typeId);\\r\\n\\t\\tsiteBaseSvgArray[6] = \\\"' /></svg>\\\";\\r\\n\\r\\n\\t\\treturn _joinArray(siteBaseSvgArray);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the site base svg array component, used to represent\\r\\n\\t*      a landmark inside the land board.\\r\\n\\t*\\r\\n\\t* @param _gridSize The size of the grid\\r\\n\\t* @param _landmarkTypeId landmark type defined by its ID\\r\\n\\t* @return Concatenation of the landmark SVG component to be added the board SVG\\r\\n\\t*/\\r\\n\\tfunction _generateLandmarkSvg(uint16 _gridSize, uint8 _landmarkTypeId) private pure returns (string memory) {\\r\\n\\t\\tuint256 landmarkPos = uint256(_gridSize - 2).fromUint().div(uint256(2).fromUint()).mul(uint256(3).fromUint());\\r\\n\\t\\tstring memory landmarkFloat = string(\\r\\n\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\tlandmarkPos.toUint().toString(), \\r\\n\\t\\t\\t\\t\\\".\\\", \\r\\n\\t\\t\\t\\ttruncateString(landmarkPos.frac().toString(), 0, 2)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tstring[] memory landmarkSvgArray = new string[](7);\\r\\n\\t\\tlandmarkSvgArray[0] = \\\"<svg x='\\\";\\r\\n\\t\\tlandmarkSvgArray[1] = landmarkFloat;\\r\\n\\t\\tlandmarkSvgArray[2] = \\\"' y='\\\";\\r\\n\\t\\tlandmarkSvgArray[3] = landmarkFloat;\\r\\n\\t\\tlandmarkSvgArray[4] = \\\"' width='6' height='6' xmlns='http://www.w3.org/2000/svg'><use href='#LANDMARK_TYPE_\\\";\\r\\n\\t\\tlandmarkSvgArray[5] = uint256(_landmarkTypeId).toString();\\r\\n\\t\\tlandmarkSvgArray[6] = \\\"'/></svg>\\\";\\r\\n\\r\\n\\t\\treturn _joinArray(landmarkSvgArray);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Returns the land board base svg array component, which has its color changed\\r\\n\\t*      later in other functions.\\r\\n\\t*\\r\\n\\t* @param _gridSize The size of the grid\\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n\\t* @return Array of board SVG component parts\\r\\n\\t*/\\r\\n\\tfunction _boardSvg(uint16 _gridSize, uint8 _tierId) private view returns (string[141] memory) {\\r\\n\\t\\tuint256 scaledGridSize = uint256(_gridSize).fromUint().div(uint256(2).fromUint()).mul(uint256(3).fromUint());\\r\\n\\t\\tstring memory scaledGridSizeString = string(\\r\\n\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\tscaledGridSize.toUint().toString(),\\r\\n\\t\\t\\t\\t\\\".\\\",\\r\\n\\t\\t\\t\\ttruncateString(scaledGridSize.frac().toString(), 0, 2)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t\\treturn [\\r\\n\\t\\t\\\"<defs><symbol id='SITE_TYPE_1' width='6' height='6'>\\\", // Site Carbon\\r\\n\\t\\t\\\"<svg width='6' height='6' viewBox='0 0 14 14' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='12' height='12' fill='url(#site-type-1)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='site-type-1' x1='13.12' y1='1' x2='1.12' y2='13' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='SITE_TYPE_2' width='6' height='6'>\\\", // Site Silicon\\r\\n\\t\\t\\\"<svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_1320_145814)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_1320_145814' x1='11.12' y1='1' x2='-0.862058' y2='7.11845' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#8CD4D9'/><stop offset='1' stop-color='#598FA6'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='SITE_TYPE_3' width='6' height='6'>\\\", // Site Hydrogen\\r\\n\\t\\t\\\"<svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_1321_129011)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_1321_129011' x1='11.12' y1='1' x2='1.12' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#CBE2FF'/><stop offset='1' stop-color='#EFEFEF'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='SITE_TYPE_4' width='6' height='6'>\\\", // Site Crypton\\r\\n\\t\\t\\\"<svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_1321_129013)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_1321_129013' x1='11.12' y1='1' x2='1.12' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop offset='1' stop-color='#52FF00'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='SITE_TYPE_5' width='6' height='6'>\\\", // Site Hyperion\\r\\n\\t\\t\\\"<svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_1321_129017)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_1321_129017' x1='11.12' y1='1' x2='1.12' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#31F27F'/><stop offset='0.296875' stop-color='#F4BE86'/><stop offset='0.578125' stop-color='#B26FD2'/>\\\",\\r\\n\\t\\t\\\"<stop offset='0.734375' stop-color='#7F70D2'/><stop offset='1' stop-color='#8278F2'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='SITE_TYPE_6' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\", // Site Solon\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_1321_129015)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_1321_129015' x1='11.12' y1='1' x2='1.11999' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='white'/><stop offset='0.544585' stop-color='#FFD600'/><stop offset='1' stop-color='#FF9900'/>\\\",\\r\\n\\t\\t\\\"</linearGradient></defs></svg></symbol><linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_5' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#BE13AE'/></linearGradient><linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_4' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#1F7460'/></linearGradient><linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_3' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#6124AE'/></linearGradient><linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_2' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#5350AA'/></linearGradient><linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_1' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#2C2B67'/></linearGradient><linearGradient id='GRADIENT_BOARD_TIER_5' x1='100%' y1='0' x2='100%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop offset='0.130208' stop-color='#EFD700'/><stop offset='0.6875' stop-color='#FF57EE'/><stop offset='1' stop-color='#9A24EC'/>\\\",\\r\\n\\t\\t\\\"</linearGradient><linearGradient id='GRADIENT_BOARD_TIER_4' x1='50%' y1='100%' x2='50%' y2='0' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#239378'/><stop offset='1' stop-color='#41E23E'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_3' x1='50%' y1='100%' x2='50%' y2='0' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#812DED'/><stop offset='1' stop-color='#F100D9'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_2' x1='50%' y1='0' x2='50%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#7DD6F2'/><stop offset='1' stop-color='#625EDC'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_1' x1='50%' y1='0' x2='50%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#4C44A0'/><stop offset='1' stop-color='#2F2C83'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_5' x1='100%' y1='16.6%' x2='100%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#D2FFD9'/><stop offset='1' stop-color='#F32BE1'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_4' x1='100%' y1='16.6%' x2='100%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/><stop offset='1' stop-color='#fff' stop-opacity='0.08'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_3' x1='100%' y1='16.6%' x2='100%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/><stop offset='1' stop-color='#fff' stop-opacity='0.08'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_2' x1='100%' y1='16.6%' x2='100%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/><stop offset='1' stop-color='#fff' stop-opacity='0.08'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_1' x1='100%' y1='16.6%' x2='100%' y2='100%' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/><stop offset='1' stop-color='#fff' stop-opacity='0.08'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<pattern id='smallGrid' width='3' height='3' patternUnits='userSpaceOnUse' patternTransform='rotate(45 \\\",\\r\\n\\t\\tstring(abi.encodePacked(scaledGridSizeString, \\\" \\\", scaledGridSizeString)),\\r\\n\\t\\t\\\")'><path d='M 3 0 L 0 0 0 3' fill='none' stroke-width='0.3%' stroke='#130A2A' stroke-opacity='0.2' />\\\",\\r\\n\\t\\t\\\"</pattern><symbol id='LANDMARK_TYPE_1' width='6' height='6'><svg width='6' height='6' viewBox='0 0 14 14' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='12' height='12' fill='url(#paint0_linear_2371_558677)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.72' y='4.59998' width='4.8' height='4.8' fill='url(#paint1_linear_2371_558677)'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.72' y='4.59998' width='4.8' height='4.8' fill='white'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_2371_558677' x1='13.12' y1='1' x2='1.12' y2='13' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='paint1_linear_2371_558677' x1='9.52' y1='4.59998' x2='4.72' y2='9.39998' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='LANDMARK_TYPE_2' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_2371_558683)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.12' y='4' width='4' height='4' fill='url(#paint1_linear_2371_558683)'/><rect x='4.12' y='4' width='4' height='4' fill='white'/>\\\",\\r\\n\\t\\t\\\"<rect x='3.62' y='3.5' width='5' height='5' stroke='black' stroke-opacity='0.1'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_2371_558683' x1='11.12' y1='1' x2='-0.862058' y2='7.11845' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#8CD4D9'/><stop offset='1' stop-color='#598FA6'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='paint1_linear_2371_558683' x1='8.12' y1='4' x2='4.12' y2='8' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='LANDMARK_TYPE_3' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_2371_558686)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.12' y='4' width='4' height='4' fill='url(#paint1_linear_2371_558686)'/><rect x='4.12' y='4' width='4' height='4' fill='white'/>\\\",\\r\\n\\t\\t\\\"<rect x='3.62' y='3.5' width='5' height='5' stroke='black' stroke-opacity='0.1'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_2371_558686' x1='11.12' y1='1' x2='1.12' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#CBE2FF'/><stop offset='1' stop-color='#EFEFEF'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='paint1_linear_2371_558686' x1='8.12' y1='4' x2='4.12' y2='8' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='LANDMARK_TYPE_4' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_2371_558689)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.12' y='4' width='4' height='4' fill='url(#paint1_linear_2371_558689)'/><rect x='4.12' y='4' width='4' height='4' fill='white'/>\\\",\\r\\n\\t\\t\\\"<rect x='3.62' y='3.5' width='5' height='5' stroke='black' stroke-opacity='0.1'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_2371_558689' x1='11.12' y1='1' x2='1.12' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#184B00'/><stop offset='1' stop-color='#52FF00'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='paint1_linear_2371_558689' x1='8.12' y1='4' x2='4.12' y2='8' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='LANDMARK_TYPE_5' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_2371_558695)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.12' y='4' width='4' height='4' fill='url(#paint1_linear_2371_558695)'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.12' y='4' width='4' height='4' fill='white'/><rect x='3.62' y='3.5' width='5' height='5' stroke='black' stroke-opacity='0.1'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_2371_558695' x1='11.12' y1='1' x2='1.12' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#31F27F'/><stop offset='0.296875' stop-color='#F4BE86'/><stop offset='0.578125' stop-color='#B26FD2'/>\\\",\\r\\n\\t\\t\\\"<stop offset='0.734375' stop-color='#7F70D2'/><stop offset='1' stop-color='#8278F2'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='paint1_linear_2371_558695' x1='8.12' y1='4' x2='4.12' y2='8' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='LANDMARK_TYPE_6' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_2371_558692)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='4.12' y='4' width='4' height='4' fill='url(#paint1_linear_2371_558692)'/><rect x='4.12' y='4' width='4' height='4' fill='white'/>\\\",\\r\\n\\t\\t\\\"<rect x='3.62' y='3.5' width='5' height='5' stroke='black' stroke-opacity='0.1'/><defs><linearGradient id='paint0_linear_2371_558692' x1='11.12' y1='1' x2='1.11999' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='white'/><stop offset='0.544585' stop-color='#FFD600'/><stop offset='1' stop-color='#FF9900'/></linearGradient>\\\",\\r\\n\\t\\t\\\"<linearGradient id='paint1_linear_2371_558692' x1='8.12' y1='4' x2='4.12' y2='8' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"<symbol id='LANDMARK_TYPE_7' width='6' height='6'><svg width='6' height='6' viewBox='0 0 12 12' fill='none' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\\"<rect x='1.12' y='1' width='10' height='10' fill='url(#paint0_linear_2373_559424)' stroke='white' stroke-opacity='0.5'/>\\\",\\r\\n\\t\\t\\\"<rect x='3.12' y='3' width='6' height='6' fill='url(#paint1_linear_2373_559424)'/><rect x='3.12' y='3' width='6' height='6' fill='white'/>\\\",\\r\\n\\t\\t\\\"<rect x='2.62' y='2.5' width='7' height='7' stroke='black' stroke-opacity='0.1'/>\\\",\\r\\n\\t\\t\\\"<defs><linearGradient id='paint0_linear_2373_559424' x1='11.12' y1='1' x2='1.11999' y2='11' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color='#08CE01'/><stop offset='0.171875' stop-color='#CEEF00'/><stop offset='0.34375' stop-color='#51F980'/>\\\",\\r\\n\\t\\t\\\"<stop offset='0.5' stop-color='#2D51ED'/><stop offset='0.671875' stop-color='#0060F1'/><stop offset='0.833333' stop-color='#F100D9'/>\\\",\\r\\n\\t\\t\\\"<stop offset='1' stop-color='#9A24EC'/></linearGradient><linearGradient id='paint1_linear_2373_559424' x1='9.12' y1='3' x2='3.12' y2='9' gradientUnits='userSpaceOnUse'>\\\",\\r\\n\\t\\t\\\"<stop stop-color'#565656'/><stop offset='1'/></linearGradient></defs></svg></symbol>\\\",\\r\\n\\t\\t\\\"</defs><rect width='100%' height='100%' fill='url(#GRADIENT_BOARD_TIER_\\\",\\r\\n\\t\\tuint256(_tierId).toString(), // This line should be replaced in the loop\\r\\n\\t\\t\\\")' stroke='none' rx='5%' ry='5%'/><svg x='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"-17%\\\" : \\\"-18%\\\",\\r\\n\\t\\t\\\"' y='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"-17%\\\" : \\\"-18%\\\",\\r\\n\\t\\t\\\"' width='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"117%\\\" : \\\"117.8%\\\",\\r\\n\\t\\t\\\"' height='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"116.4%\\\" : \\\"117.8%\\\",\\r\\n\\t\\t\\\"' ><g transform='scale(1.34)' rx='5%' ry='5%' ><rect x='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"11%\\\" : \\\"11.6%\\\",\\r\\n\\t\\t\\\"' y='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"11.2%\\\" : \\\"11.6%\\\",\\r\\n\\t\\t\\\"' width='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"63.6%\\\" : \\\"63.0%\\\",\\r\\n\\t\\t\\\"' height='\\\",\\r\\n\\t\\t_gridSize % 2 == 0 ? \\\"63.8%\\\" : \\\"63.2%\\\",\\r\\n\\t\\t\\\"' fill='url(#smallGrid)' stroke='none'  rx='3%' ry='3%' /><g transform='rotate(45 \\\",\\r\\n\\t\\tstring(abi.encodePacked(scaledGridSizeString, \\\" \\\", scaledGridSizeString, \\\")'>\\\")),\\r\\n\\t\\t\\\"LANDMARK\\\", // This line should be replaced by the Landmark in the loop\\r\\n\\t\\t\\\"SITES_POSITIONED\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\\"</g></g></svg>\\\",\\r\\n\\t\\t\\\"<rect xmlns='http://www.w3.org/2000/svg' x='0.3' y='0.3' width='99.7%' height='99.7%' fill='none' stroke='url(#ROUNDED_BORDER_TIER_\\\",\\r\\n\\t\\tuint256(_tierId).toString(),\\r\\n\\t\\t\\\")' stroke-width='1' rx='4.5%' ry='4.5%'/></svg>\\\"\\r\\n\\t\\t];\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Calculates string for the land name based on plot data.\\r\\n\\t*\\r\\n\\t* @param _regionId PlotView.regionId\\r\\n\\t* @param _x PlotView.x coordinate\\r\\n\\t* @param _y PlotView.y coordinate\\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n\\t* @return SVG name attribute\\r\\n\\t*/\\r\\n\\tfunction _generateLandName(uint8 _regionId, uint16 _x, uint16 _y, uint8 _tierId) private pure returns (string memory) {\\r\\n\\t\\treturn string(\\r\\n\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\t\\\"Land Tier \\\",\\r\\n\\t\\t\\t\\tuint256(_tierId).toString(),\\r\\n\\t\\t\\t\\t\\\" - (\\\",\\r\\n\\t\\t\\t\\tuint256(_regionId).toString(),\\r\\n\\t\\t\\t\\t\\\", \\\",\\r\\n\\t\\t\\t\\tuint256(_x).toString(),\\r\\n\\t\\t\\t\\t\\\", \\\",\\r\\n\\t\\t\\t\\tuint256(_y).toString()\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Calculates the string for the land metadata description.\\r\\n\\t*/\\r\\n\\tfunction _generateLandDescription() private pure returns (string memory) {\\r\\n\\t\\treturn \\\"Describes the asset to which this NFT represents\\\";\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Populates the mainSvg array with the land tier id and the svg returned\\r\\n\\t*      by the _generateLandBoard. Expects it to generate the land svg inside \\r\\n\\t*      the container.\\r\\n\\t* \\r\\n\\t* @param _landmarkTypeId landmark type defined by its ID\\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n\\t* @param _gridSize The size of the grid\\r\\n\\t* @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t* @return The SVG image component\\r\\n\\t*/\\r\\n\\tfunction _generateSVG(\\r\\n\\t\\tuint8 _landmarkTypeId,\\r\\n\\t\\tuint8 _tierId,\\r\\n\\t\\tuint16 _gridSize,\\r\\n\\t\\tLandLib.Site[] memory _sites\\r\\n\\t) private view returns (string memory) {\\r\\n\\t\\tstring[11] memory _mainSvgTemplate = _mainSvg(_gridSize, _tierId);\\r\\n\\t\\tstring[] memory _mainSvgArray = new string[](_mainSvgTemplate.length);\\r\\n\\r\\n\\t\\tfor(uint256 i = 0; i < _mainSvgTemplate.length; i++) {\\r\\n\\t\\t\\t\\tif(keccak256(bytes(_mainSvgTemplate[i])) == keccak256(bytes(\\\"FUTURE_BOARD_CONTAINER\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t_mainSvgArray[i] = _generateLandBoard(_tierId, _gridSize, _landmarkTypeId, _sites);\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t_mainSvgArray[i] = _mainSvgTemplate[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn _joinArray(_mainSvgArray);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Generates the plot svg containing all sites inside and color according\\r\\n\\t*      to the tier\\r\\n\\t* \\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n\\t* @param _gridSize The size of the grid\\r\\n\\t* @param _landmarkTypeId landmark type defined by its ID\\r\\n\\t* @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t* @return The board component for the land SVG\\r\\n\\t*/\\r\\n\\tfunction _generateLandBoard(\\r\\n\\t\\tuint8 _tierId,\\r\\n\\t\\tuint16 _gridSize,\\r\\n\\t\\tuint8 _landmarkTypeId,\\r\\n\\t\\tLandLib.Site[] memory _sites\\r\\n\\t) private view returns (string memory) {\\r\\n\\t\\tstring[141] memory _boardSvgTemplate = _boardSvg(_gridSize, _tierId);\\r\\n\\t\\tstring[] memory _boardSvgArray = new string[](_boardSvgTemplate.length);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < _boardSvgTemplate.length; i++) {\\r\\n\\t\\t\\tif (keccak256(bytes(_boardSvgTemplate[i])) == keccak256(bytes(\\\"SITES_POSITIONED\\\"))) {\\r\\n\\t\\t\\t\\t_boardSvgArray[i] = _generateSites(_sites);\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (keccak256(bytes(_boardSvgTemplate[i])) == keccak256(bytes(\\\"LANDMARK\\\"))) {\\r\\n\\t\\t\\t\\t_boardSvgArray[i] = _generateLandmarkSvg(_gridSize, _landmarkTypeId);\\r\\n\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t_boardSvgArray[i] = _boardSvgTemplate[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn _joinArray(_boardSvgArray);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Generates each site inside the land svg board with is position and color.\\r\\n\\t*\\r\\n\\t* @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t* @return The sites components for the land SVG\\r\\n\\t*/\\r\\n\\tfunction _generateSites(LandLib.Site[] memory _sites) private pure returns (string memory) {\\r\\n\\t\\tstring[] memory _siteSvgArray = new string[](_sites.length);\\r\\n\\t\\tfor (uint256 i = 0; i < _sites.length; i++) {\\r\\n\\t\\t\\t_siteSvgArray[i] = _siteBaseSvg(\\r\\n\\t\\t\\t\\t_convertToSvgPositionX(_sites[i].x), \\r\\n\\t\\t\\t\\t_convertToSvgPositionY(_sites[i].y), \\r\\n\\t\\t\\t\\t_sites[i].typeId\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn _joinArray(_siteSvgArray);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Main function, entry point to generate the complete land svg with all\\r\\n\\t*      populated sites, correct color, and attach to the JSON metadata file\\r\\n\\t*      created using Base64 lib.\\r\\n\\t* @dev Returns the JSON metadata formatted file used by NFT platforms to display\\r\\n\\t*      the land data.\\r\\n\\t* @dev Can be updated in the future to change the way land name, description, image\\r\\n\\t*      and other traits are displayed.\\r\\n\\t*\\r\\n\\t* @param _regionId PlotView.regionId\\r\\n\\t* @param _x PlotView.x coordinate\\r\\n\\t* @param _y PlotView.y coordinate\\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n\\t* @param _gridSize The size of the grid\\r\\n\\t* @param _landmarkTypeId landmark type defined by its ID\\r\\n\\t* @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t*/\\r\\n\\tfunction constructTokenURI(\\r\\n\\t\\tuint8 _regionId,\\r\\n\\t\\tuint16 _x,\\r\\n\\t\\tuint16 _y,\\r\\n\\t\\tuint8 _tierId,\\r\\n\\t\\tuint16 _gridSize,\\r\\n\\t\\tuint8 _landmarkTypeId,\\r\\n\\t\\tLandLib.Site[] memory _sites\\r\\n\\t) internal view returns (string memory) {\\r\\n\\t\\tstring memory name = _generateLandName(_regionId, _x, _y, _tierId);\\r\\n\\t\\tstring memory description = _generateLandDescription();\\r\\n\\t\\tstring memory image = Base64.encode(bytes(_generateSVG(_landmarkTypeId, _tierId, _gridSize, _sites)));\\r\\n\\r\\n\\t\\treturn string(\\r\\n\\t\\t\\tabi.encodePacked(\\\"data:application/json;base64, \\\", Base64.encode(\\r\\n\\t\\t\\t\\tbytes(\\r\\n\\t\\t\\t\\t\\tabi.encodePacked('{\\\"name\\\":\\\"',\\r\\n\\t\\t\\t\\t\\tname,\\r\\n\\t\\t\\t\\t\\t'\\\", \\\"description\\\":\\\"',\\r\\n\\t\\t\\t\\t\\tdescription,\\r\\n\\t\\t\\t\\t\\t'\\\", \\\"image\\\": \\\"',\\r\\n\\t\\t\\t\\t\\t'data:image/svg+xml;base64,',\\r\\n\\t\\t\\t\\t\\timage,\\r\\n\\t\\t\\t\\t\\t'\\\"}')\\r\\n\\t\\t\\t\\t\\t)\\t\\r\\n\\t\\t\\t\\t)\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Concatenate string array into one string.\\r\\n\\t*\\r\\n\\t* @param _svgArray Array containing SVG strings/elements\\r\\n\\t* @return Concatenated SVG string\\r\\n\\t*/\\r\\n\\tfunction _joinArray(string[] memory _svgArray) private pure returns (string memory) {\\r\\n\\t\\tstring memory svg;\\r\\n\\t\\tfor (uint256 i = 0; i < _svgArray.length; i++) {\\r\\n\\t\\t\\tif (i != 0) {\\r\\n\\t\\t\\t\\tsvg = string(abi.encodePacked(svg, _svgArray[i]));\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tsvg = _svgArray[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn svg;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Convert site X position to fit into the board.\\r\\n\\t*\\r\\n\\t* @param _positionX X coordinate of the site\\r\\n\\t* @return Transformed X coordinate\\r\\n\\t*/\\r\\n\\tfunction _convertToSvgPositionX(uint16 _positionX) private pure returns (uint16) {\\r\\n\\t\\treturn _positionX * 3;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Convert site Y position to fit into the board.\\r\\n\\t*\\r\\n\\t* @param _positionY Y coordinate of the site\\r\\n\\t* @return Transformed Y coordinate\\r\\n\\t*/\\r\\n\\tfunction _convertToSvgPositionY(uint16 _positionY) private pure returns (uint16) {\\r\\n\\t\\treturn _positionY * 3 - 6;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t* @dev Truncate string at a certain position and size.\\r\\n\\t*\\r\\n\\t* @param _str String to be truncated\\r\\n\\t* @param _from The initial position to start slicing\\r\\n\\t* @param _size The size of the resulting substring\\r\\n\\t* @return Truncated string\\r\\n\\t*/\\r\\n\\tfunction truncateString(string memory _str, uint256 _from, uint256 _size) internal pure returns (string memory) {\\r\\n\\t\\tbytes memory stringBytes = bytes(_str);\\r\\n\\t\\tif (_from + _size >= stringBytes.length) {\\r\\n\\t\\t\\treturn _str;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbytes memory truncatedBytes = new bytes(_size);\\r\\n\\t\\tuint256 j;\\r\\n\\t\\tfor (uint256 i = _from; i < _from + _size; i++) {\\r\\n\\t\\t\\ttruncatedBytes[j] = stringBytes[i];\\r\\n\\t\\t\\tj++;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn string(truncatedBytes);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x665c82eadfa51b5b79a34b25f534c318a4082e491adc3a8a9bcf5f33199b6e7d\",\"license\":\"MIT\"},\"contracts/token/LandDescriptorImpl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/LandERC721Spec.sol\\\";\\r\\nimport \\\"../lib/NFTSvg.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Land Descriptor Implementation\\r\\n *\\r\\n * @notice Basic implementation of the LandDescriptor interface\\r\\n *\\r\\n * @author Pedro Bergamini, Basil Gorin\\r\\n */\\r\\ncontract LandDescriptorImpl is LandDescriptor {\\r\\n\\t/**\\r\\n\\t * @inheritdoc LandDescriptor\\r\\n\\t */\\r\\n\\tfunction tokenURI(uint256 _tokenId) external view override returns (string memory) {\\r\\n\\t\\t// assuming the function was called by the LandERC721 contract itself,\\r\\n\\t\\t// fetch the token metadata from it\\r\\n\\t\\tLandLib.PlotView memory _plot = LandERC721Metadata(msg.sender).viewMetadata(_tokenId);\\r\\n\\r\\n\\t\\t// unpack the `_plot` structure and delegate generation into the lib\\r\\n\\t\\treturn NFTSvg.constructTokenURI(\\r\\n\\t\\t\\t_plot.regionId,\\r\\n\\t\\t\\t_plot.x,\\r\\n\\t\\t\\t_plot.y,\\r\\n\\t\\t\\t_plot.tierId,\\r\\n\\t\\t\\t_plot.size,\\r\\n\\t\\t\\t_plot.landmarkTypeId,\\r\\n\\t\\t\\t_plot.sites\\r\\n\\t\\t);\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x716a76e8d481f3b120aba78cfc47c12169b00ca55f1bac6193417184cf920704\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Pedro Bergamini, Basil Gorin",
    "kind": "dev",
    "methods": {
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "token ID of the land plot to generate SVG for"
        }
      }
    },
    "title": "Land Descriptor Implementation",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMathUD60x18__FromUintOverflow(uint256)": [
        {
          "notice": "Emitted when converting a basic integer to the fixed-point format format overflows UD60x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "tokenURI(uint256)": {
        "notice": "Creates SVG image with the land plot metadata painted on it,      encodes the generated SVG into base64 URI string"
      }
    },
    "notice": "Basic implementation of the LandDescriptor interface",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}