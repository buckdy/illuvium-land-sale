{
  "address": "0x813f66F971d437f328D2730845D634855595ED7F",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "regionId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "x",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "y",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "tierId",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "size",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "landmarkTypeId",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "elementSites",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "fuelSites",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "typeId",
                  "type": "uint8"
                },
                {
                  "internalType": "uint16",
                  "name": "x",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "y",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LandLib.Site[]",
              "name": "sites",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct LandLib.PlotView",
          "name": "_plot",
          "type": "tuple"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8349cec8c0e50437a624d37a04c828caef3160284c910720fcf3b69e046cc4d1",
  "receipt": {
    "to": null,
    "from": "0xebF5209E76b34553b1cFD5bec2d71Dc8A6559A2e",
    "contractAddress": "0x813f66F971d437f328D2730845D634855595ED7F",
    "transactionIndex": 37,
    "gasUsed": "3075957",
    "logsBloom": "0x
    "blockHash": "0x991244995bcb734bf3b8c0b0f77bd13d16d4daf336cf0e0baa06bba107f15f8f",
    "transactionHash": "0x8349cec8c0e50437a624d37a04c828caef3160284c910720fcf3b69e046cc4d1",
    "logs": [],
    "blockNumber": 9906271,
    "cumulativeGasUsed": "16561199",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d9b7bb2ed92823a8e2ecc929072121d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"regionId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"tierId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"landmarkTypeId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"elementSites\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"fuelSites\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"typeId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"}],\"internalType\":\"struct LandLib.Site[]\",\"name\":\"sites\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LandLib.PlotView\",\"name\":\"_plot\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenURI((uint8,uint16,uint16,uint8,uint16,uint8,uint8,uint8,(uint8,uint16,uint16)[]))\":{\"details\":\"Generates a base64 json metada file based on data supplied by the      land contract.Plot data should be returned from the land contract in order to use      the NFTSvg library which is called \",\"params\":{\"_plot\":\"Plot view data containing Sites array\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/LandDescriptor.sol\":\"LandDescriptorImpl\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/interfaces/LandDescriptorSpec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./LandERC721Spec.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Land Descriptor interface\\r\\n *\\r\\n * @dev Defines parameters required to generate the dynamic tokenURI based on\\r\\n *      land metadata.\\r\\n */\\r\\n\\r\\ninterface LandDescriptor {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Creates a base64 uri with the land svg image data embedded\\r\\n\\t\\t * \\r\\n\\t\\t * @param _plot Plot view data containing Sites array\\r\\n\\t\\t */\\r\\n\\t\\t function tokenURI(LandLib.PlotView calldata _plot) external pure returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x2433cfea4c93fa8da435086b2bdefd9dc83a2a40b4ef2858b92083eb7a987ca7\",\"license\":\"MIT\"},\"contracts/interfaces/LandERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../lib/LandLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Land ERC721 Metadata\\r\\n *\\r\\n * @notice Defines metadata-related capabilities for LandERC721 token.\\r\\n *      This interface should be treated as a definition of what metadata is for LandERC721,\\r\\n *      and what operations are defined/allowed for it.\\r\\n *\\r\\n * @author Basil Gorin\\r\\n */\\r\\ninterface LandERC721Metadata {\\r\\n\\t/**\\r\\n\\t * @notice Presents token metadata in a well readable form,\\r\\n\\t *      with the Internal Land Structure included, as a `PlotView` struct\\r\\n\\t *\\r\\n\\t * @notice Reconstructs the internal land structure of the plot based on the stored\\r\\n\\t *      Tier ID, Plot Size, Generator Version, and Seed\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to query metadata view for\\r\\n\\t * @return token metadata as a `PlotView` struct\\r\\n\\t */\\r\\n\\tfunction viewMetadata(uint256 _tokenId) external view returns(LandLib.PlotView memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Presents token metadata \\\"as is\\\", without the Internal Land Structure included,\\r\\n\\t *      as a `PlotStore` struct;\\r\\n\\t *\\r\\n\\t * @notice Doesn't reconstruct the internal land structure of the plot, allowing to\\r\\n\\t *      access Generator Version, and Seed fields \\\"as is\\\"\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to query on-chain metadata for\\r\\n\\t * @return token metadata as a `PlotStore` struct\\r\\n\\t */\\r\\n\\tfunction getMetadata(uint256 _tokenId) external view returns(LandLib.PlotStore memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Verifies if token has its metadata set on-chain; for the tokens\\r\\n\\t *      in existence metadata is immutable, it can be set once, and not updated\\r\\n\\t *\\r\\n\\t * @dev If `exists(_tokenId) && hasMetadata(_tokenId)` is true, `setMetadata`\\r\\n\\t *      for such a `_tokenId` will always throw\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to check metadata existence for\\r\\n\\t * @return true if token ID specified has metadata associated with it\\r\\n\\t */\\r\\n\\tfunction hasMetadata(uint256 _tokenId) external view returns(bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sets/updates token metadata on-chain; same metadata struct can be then\\r\\n\\t *      read back using `getMetadata()` function, or it can be converted to\\r\\n\\t *      `PlotView` using `viewMetadata()` function\\r\\n\\t *\\r\\n\\t * @dev The metadata supplied is validated to satisfy (regionId, x, y) uniqueness;\\r\\n\\t *      non-intersection of the sites coordinates within a plot is guaranteed by the\\r\\n\\t *      internal land structure generator algorithm embedded into the `viewMetadata()`\\r\\n\\t *\\r\\n\\t * @dev Metadata for non-existing tokens can be set and updated unlimited\\r\\n\\t *      amount of times without any restrictions (except the constraints above)\\r\\n\\t * @dev Metadata for an existing token can only be set, it cannot be updated\\r\\n\\t *      (`setMetadata` will throw if metadata already exists)\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to set/updated the metadata for\\r\\n\\t * @param _plot token metadata to be set for the token ID\\r\\n\\t */\\r\\n\\tfunction setMetadata(uint256 _tokenId, LandLib.PlotStore memory _plot) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Removes token metadata\\r\\n\\t *\\r\\n\\t * @param _tokenId token ID to remove metadata for\\r\\n\\t */\\r\\n\\tfunction removeMetadata(uint256 _tokenId) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mints the token and assigns the metadata supplied\\r\\n\\t *\\r\\n\\t * @dev Creates new token with the token ID specified\\r\\n\\t *      and assigns an ownership `_to` for this token\\r\\n\\t *\\r\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\r\\n\\t *      Consider minting with `safeMint` (and setting metadata before),\\r\\n\\t *      for the \\\"safe mint\\\" like behavior\\r\\n\\t *\\r\\n\\t * @param _to an address to mint token to\\r\\n\\t * @param _tokenId token ID to mint and set metadata for\\r\\n\\t * @param _plot token metadata to be set for the token ID\\r\\n\\t */\\r\\n\\tfunction mintWithMetadata(address _to, uint256 _tokenId, LandLib.PlotStore memory _plot) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x2246599faa32ed34a5b76ce4a8e1c7da962bb59f7843e2368bf4a5004f19783f\",\"license\":\"MIT\"},\"contracts/lib/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/// @title Base64\\r\\n/// @author Brecht Devos - <brecht@loopring.org>\\r\\n/// @notice Provides functions for encoding/decoding base64\\r\\n/// @notice Copied from https://github.com/Brechtpd/base64\\r\\nlibrary Base64 {\\r\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\r\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\r\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\r\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\r\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\r\\n\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length == 0) return '';\\r\\n\\r\\n        // load the table into memory\\r\\n        string memory table = TABLE_ENCODE;\\r\\n\\r\\n        // multiply by 4/3 rounded up\\r\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        string memory result = new string(encodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // set the actual output length\\r\\n            mstore(result, encodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 3 bytes at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n                // read 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // write 4 characters\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\r\\n                resultPtr := add(resultPtr, 1)\\r\\n            }\\r\\n\\r\\n            // padding with '='\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\r\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\r\\n        bytes memory data = bytes(_data);\\r\\n\\r\\n        if (data.length == 0) return new bytes(0);\\r\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\r\\n\\r\\n        // load the table into memory\\r\\n        bytes memory table = TABLE_DECODE;\\r\\n\\r\\n        // every 4 characters represent 3 bytes\\r\\n        uint256 decodedLen = (data.length / 4) * 3;\\r\\n\\r\\n        // add some extra buffer at the end required for the writing\\r\\n        bytes memory result = new bytes(decodedLen + 32);\\r\\n\\r\\n        assembly {\\r\\n            // padding with '='\\r\\n            let lastBytes := mload(add(data, mload(data)))\\r\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\r\\n                decodedLen := sub(decodedLen, 1)\\r\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\r\\n                    decodedLen := sub(decodedLen, 1)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // set the actual output length\\r\\n            mstore(result, decodedLen)\\r\\n\\r\\n            // prepare the lookup table\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // input ptr\\r\\n            let dataPtr := data\\r\\n            let endPtr := add(dataPtr, mload(data))\\r\\n\\r\\n            // result ptr, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // run over the input, 4 characters at a time\\r\\n            for {} lt(dataPtr, endPtr) {}\\r\\n            {\\r\\n               // read 4 characters\\r\\n               dataPtr := add(dataPtr, 4)\\r\\n               let input := mload(dataPtr)\\r\\n\\r\\n               // write 3 bytes\\r\\n               let output := add(\\r\\n                   add(\\r\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\r\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\r\\n                   add(\\r\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\r\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\r\\n                    )\\r\\n                )\\r\\n                mstore(resultPtr, shl(232, output))\\r\\n                resultPtr := add(resultPtr, 3)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x31207ddde9bb238b406f186bb7b866ee607ec847f68e09ffd278ade8379ed28f\",\"license\":\"MIT\"},\"contracts/lib/LandLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Land Library\\r\\n *\\r\\n * @notice A library defining data structures related to land plots (used in Land ERC721 token),\\r\\n *      and functions transforming these structures between view and internal (packed) representations,\\r\\n *      in both directions.\\r\\n *\\r\\n * @notice Due to some limitations Solidity has (ex.: allocating array of structures in storage),\\r\\n *      and due to the specific nature of internal land structure\\r\\n *      (landmark and resource sites data is deterministically derived from a pseudo random seed),\\r\\n *      it is convenient to separate data structures used to store metadata on-chain (store),\\r\\n *      and data structures used to present metadata via smart contract ABI (view)\\r\\n *\\r\\n * @notice Introduces helper functions to detect and deal with the resource site collisions\\r\\n *\\r\\n * @author Basil Gorin\\r\\n */\\r\\nlibrary LandLib {\\r\\n\\t/**\\r\\n\\t * @title Resource Site View\\r\\n\\t *\\r\\n\\t * @notice Resource Site, bound to a coordinates (x, y) within the land plot\\r\\n\\t *\\r\\n\\t * @notice Resources can be of two major types, each type having three subtypes:\\r\\n\\t *      - Element (Carbon, Silicon, Hydrogen), or\\r\\n\\t *      - Fuel (Crypton, Hyperion, Solon)\\r\\n\\t *\\r\\n\\t * @dev View only structure, used in public API/ABI, not used in on-chain storage\\r\\n\\t */\\r\\n\\tstruct Site {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Site type:\\r\\n\\t\\t *        1) Carbon (element),\\r\\n\\t\\t *        2) Silicon (element),\\r\\n\\t\\t *        3) Hydrogen (element),\\r\\n\\t\\t *        4) Crypton (fuel),\\r\\n\\t\\t *        5) Hyperion (fuel),\\r\\n\\t\\t *        6) Solon (fuel)\\r\\n\\t\\t */\\r\\n\\t\\tuint8 typeId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev x-coordinate within a plot\\r\\n\\t\\t */\\r\\n\\t\\tuint16 x;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev y-coordinate within a plot\\r\\n\\t\\t */\\r\\n\\t\\tuint16 y;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @title Land Plot View\\r\\n\\t *\\r\\n\\t * @notice Land Plot, bound to a coordinates (x, y) within the region,\\r\\n\\t *      with a rarity defined by the tier ID, sites, and (optionally)\\r\\n\\t *      a landmark, positioned on the internal coordinate grid of the\\r\\n\\t *      specified size within a plot.\\r\\n\\t *\\r\\n\\t * @notice Land plot coordinates and rarity are predefined (stored off-chain).\\r\\n\\t *      Number of sites (and landmarks - 0/1) is defined by the land rarity.\\r\\n\\t *      Positions of sites, types of sites/landmark are randomized and determined\\r\\n\\t *      upon land plot creation.\\r\\n\\t *\\r\\n\\t * @dev View only structure, used in public API/ABI, not used in on-chain storage\\r\\n\\t */\\r\\n\\tstruct PlotView {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Region ID defines the region on the map in IZ:\\r\\n\\t\\t *        1) Abyssal Basin\\r\\n\\t\\t *        2) Brightland Steppes\\r\\n\\t\\t *        3) Shardbluff Labyrinth\\r\\n\\t\\t *        4) Crimson Waste\\r\\n\\t\\t *        5) Halcyon Sea\\r\\n\\t\\t *        6) Taiga Boreal\\r\\n\\t\\t *        7) Crystal Shores\\r\\n\\t\\t */\\r\\n\\t\\tuint8 regionId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev x-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 x;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev y-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 y;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Tier ID defines land rarity and number of sites within the plot\\r\\n\\t\\t */\\r\\n\\t\\tuint8 tierId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Plot size, limits the (x, y) coordinates for the sites\\r\\n\\t\\t */\\r\\n\\t\\tuint16 size;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Landmark Type ID:\\r\\n\\t\\t *        0) no Landmark\\r\\n\\t\\t *        1) Carbon Landmark,\\r\\n\\t\\t *        2) Silicon Landmark,\\r\\n\\t\\t *        3) Hydrogen Landmark (Eternal Spring),\\r\\n\\t\\t *        4) Crypton Landmark,\\r\\n\\t\\t *        5) Hyperion Landmark,\\r\\n\\t\\t *        6) Solon Landmark (Fallen Star),\\r\\n\\t\\t *        7) Arena\\r\\n\\t\\t *\\r\\n\\t\\t * @dev Landmark is always positioned in the center of internal grid\\r\\n\\t\\t */\\r\\n\\t\\tuint8 landmarkTypeId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Element Sites (Carbon, Silicon, or Hydrogen) this plot contains,\\r\\n\\t\\t *      matches the number of element sites in sites[] array\\r\\n\\t\\t */\\r\\n\\t\\tuint8 elementSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Fuel Sites (Crypton, Hyperion, or Solon) this plot contains,\\r\\n\\t\\t *      matches the number of fuel sites in sites[] array\\r\\n\\t\\t */\\r\\n\\t\\tuint8 fuelSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Element/fuel sites within the plot\\r\\n\\t\\t */\\r\\n\\t\\tSite[] sites;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @title Land Plot Store\\r\\n\\t *\\r\\n\\t * @notice Land Plot data structure as it is stored on-chain\\r\\n\\t *\\r\\n\\t * @notice Contains the data required to generate `PlotView` structure:\\r\\n\\t *      - regionId, x, y, tierId, size, landmarkTypeId, elementSites, and fuelSites are copied as is\\r\\n\\t *      - version and seed are used to derive array of sites (together with elementSites, and fuelSites)\\r\\n\\t *\\r\\n\\t * @dev On-chain optimized structure, has limited usage in public API/ABI\\r\\n\\t */\\r\\n\\tstruct PlotStore {\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Region ID defines the region on the map in IZ:\\r\\n\\t\\t *        1) Abyssal Basin\\r\\n\\t\\t *        2) Brightland Steppes\\r\\n\\t\\t *        3) Shardbluff Labyrinth\\r\\n\\t\\t *        4) Crimson Waste\\r\\n\\t\\t *        5) Halcyon Sea\\r\\n\\t\\t *        6) Taiga Boreal\\r\\n\\t\\t *        7) Crystal Shores\\r\\n\\t\\t */\\r\\n\\t\\tuint8 regionId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev x-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 x;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev y-coordinate within the region\\r\\n\\t\\t */\\r\\n\\t\\tuint16 y;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Tier ID defines land rarity and number of sites within the plot\\r\\n\\t\\t */\\r\\n\\t\\tuint8 tierId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Plot Size, limits the (x, y) coordinates for the sites\\r\\n\\t\\t */\\r\\n\\t\\tuint16 size;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Landmark Type ID:\\r\\n\\t\\t *        0) no Landmark\\r\\n\\t\\t *        1) Carbon Landmark,\\r\\n\\t\\t *        2) Silicon Landmark,\\r\\n\\t\\t *        3) Hydrogen Landmark (Eternal Spring),\\r\\n\\t\\t *        4) Crypton Landmark,\\r\\n\\t\\t *        5) Hyperion Landmark,\\r\\n\\t\\t *        6) Solon Landmark (Fallen Star),\\r\\n\\t\\t *        7) Arena\\r\\n\\t\\t *\\r\\n\\t\\t * @dev Landmark is always positioned in the center of internal grid\\r\\n\\t\\t */\\r\\n\\t\\tuint8 landmarkTypeId;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Element Sites (Carbon, Silicon, or Hydrogen) this plot contains\\r\\n\\t\\t */\\r\\n\\t\\tuint8 elementSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Number of Fuel Sites (Crypton, Hyperion, or Solon) this plot contains\\r\\n\\t\\t */\\r\\n\\t\\tuint8 fuelSites;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Generator Version, reserved for the future use in order to tweak the\\r\\n\\t\\t *      behavior of the internal land structure algorithm\\r\\n\\t\\t */\\r\\n\\t\\tuint8 version;\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Pseudo-random Seed to generate Internal Land Structure,\\r\\n\\t\\t *      should be treated as already used to derive Landmark Type ID\\r\\n\\t\\t */\\r\\n\\t\\tuint160 seed;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Expands `PlotStore` data struct into a `PlotView` view struct\\r\\n\\t *\\r\\n\\t * @dev Derives internal land structure (resource sites the plot has)\\r\\n\\t *      from Number of Element/Fuel Sites, Plot Size, and Seed;\\r\\n\\t *      Generator Version is not currently used\\r\\n\\t *\\r\\n\\t * @param store on-chain `PlotStore` data structure to expand\\r\\n\\t * @return `PlotView` view struct, expanded from the on-chain data\\r\\n\\t */\\r\\n\\tfunction plotView(PlotStore memory store) internal pure returns(PlotView memory) {\\r\\n\\t\\t// copy most of the fields as is, derive resource sites array inline\\r\\n\\t\\treturn PlotView({\\r\\n\\t\\t\\tregionId:       store.regionId,\\r\\n\\t\\t\\tx:              store.x,\\r\\n\\t\\t\\ty:              store.y,\\r\\n\\t\\t\\ttierId:         store.tierId,\\r\\n\\t\\t\\tsize:           store.size,\\r\\n\\t\\t\\tlandmarkTypeId: store.landmarkTypeId,\\r\\n\\t\\t\\telementSites:   store.elementSites,\\r\\n\\t\\t\\tfuelSites:      store.fuelSites,\\r\\n\\t\\t\\t// derive the resource sites from Number of Element/Fuel Sites, Plot Size, and Seed\\r\\n\\t\\t\\tsites:          getResourceSites(store.seed, store.elementSites, store.fuelSites, store.size, 2)\\r\\n\\t\\t});\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed, tier ID, and plot size, determines the\\r\\n\\t *      internal land structure (resource sites the plot has)\\r\\n\\t *\\r\\n\\t * @dev Function works in a deterministic way and derives the same data\\r\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive the internal structure\\r\\n\\t * @param elementSites number of element sites plot has\\r\\n\\t * @param fuelSites number of fuel sites plot has\\r\\n\\t * @param gridSize plot size `N` of the land plot to derive internal structure for\\r\\n\\t * @param siteSize implied size `n` of the resource sites\\r\\n\\t * @return sites randomized array of resource sites\\r\\n\\t */\\r\\n\\tfunction getResourceSites(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint8 elementSites,\\r\\n\\t\\tuint8 fuelSites,\\r\\n\\t\\tuint16 gridSize,\\r\\n\\t\\tuint8 siteSize\\r\\n\\t) internal pure returns(Site[] memory sites) {\\r\\n\\t\\t// derive the total number of sites\\r\\n\\t\\tuint8 totalSites = elementSites + fuelSites;\\r\\n\\r\\n\\t\\t// denote the grid (plot) size `N`\\r\\n\\t\\t// denote the resource site size `n`\\r\\n\\r\\n\\t\\t// transform coordinate system (1): normalization (x, y) => (x / n, y / n)\\r\\n\\t\\t// if `N` is odd this cuts off border coordinates x = N - 1, y = N - 1\\r\\n\\t\\tuint16 normalizedSize = gridSize / siteSize;\\r\\n\\r\\n\\t\\t// after normalization (1) is applied, isomorphic grid becomes effectively larger\\r\\n\\t\\t// due to borders capturing effect, for example if N = 4, and n = 2:\\r\\n\\t\\t//      | .. |                                              |....|\\r\\n\\t\\t// grid |....| becomes |..| normalized which is effectively |....|\\r\\n\\t\\t//      |....|         |..|                                 |....|\\r\\n\\t\\t//      | .. |                                              |....|\\r\\n\\t\\t// transform coordinate system (2): cut the borders, and reduce grid size to be multiple of 2\\r\\n\\t\\t// if `N/2` is odd this cuts off border coordinates x = N/2 - 1, y = N/2 - 1\\r\\n\\t\\tnormalizedSize = (normalizedSize - 2) / 2 * 2;\\r\\n\\r\\n\\t\\t// define coordinate system: isomorphic grid on a square of size [size, size]\\r\\n\\t\\t// transform coordinate system (3): pack isomorphic grid on a rectangle of size [size, 1 + size / 2]\\r\\n\\t\\t// transform coordinate system (4): (x, y) -> y * size + x (two-dimensional Cartesian -> one-dimensional segment)\\r\\n\\t\\t// generate site coordinates in a transformed coordinate system (on a one-dimensional segment)\\r\\n\\t\\tuint16[] memory coords; // define temporary array to determine sites' coordinates\\r\\n\\t\\t// cut off four elements in the end of the segment to reserve space in the center for a landmark\\r\\n\\t\\t(seed, coords) = getCoords(seed, totalSites, normalizedSize * (1 + normalizedSize / 2) - 4);\\r\\n\\r\\n\\t\\t// allocate number of sites required\\r\\n\\t\\tsites = new Site[](totalSites);\\r\\n\\r\\n\\t\\t// define the variables used inside the loop outside the loop to help compiler optimizations\\r\\n\\t\\t// site type ID\\r\\n\\t\\tuint8 typeId;\\r\\n\\t\\t// site coordinates (x, y)\\r\\n\\t\\tuint16 x;\\r\\n\\t\\tuint16 y;\\r\\n\\r\\n\\t\\t// determine the element and fuel sites one by one\\r\\n\\t\\tfor(uint8 i = 0; i < totalSites; i++) {\\r\\n\\t\\t\\t// determine next random number in the sequence, and random site type from it\\r\\n\\t\\t\\t(seed, typeId) = nextRndUint8(seed, i < elementSites? 1: 4, 3);\\r\\n\\r\\n\\t\\t\\t// determine x and y\\r\\n\\t\\t\\t// reverse transform coordinate system (4): x = size % i, y = size / i\\r\\n\\t\\t\\t// (back from one-dimensional segment to two-dimensional Cartesian)\\r\\n\\t\\t\\tx = coords[i] % normalizedSize;\\r\\n\\t\\t\\ty = coords[i] / normalizedSize;\\r\\n\\r\\n\\t\\t\\t// reverse transform coordinate system (3): unpack isomorphic grid onto a square of size [size, size]\\r\\n\\t\\t\\t// fix the \\\"(0, 0) left-bottom corner\\\" of the isomorphic grid\\r\\n\\t\\t\\tif(2 * (1 + x + y) < normalizedSize) {\\r\\n\\t\\t\\t\\tx += normalizedSize / 2;\\r\\n\\t\\t\\t\\ty += 1 + normalizedSize / 2;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t// fix the \\\"(size, 0) right-bottom corner\\\" of the isomorphic grid\\r\\n\\t\\t\\telse if(2 * x > normalizedSize && 2 * x > 2 * y + normalizedSize) {\\r\\n\\t\\t\\t\\tx -= normalizedSize / 2;\\r\\n\\t\\t\\t\\ty += 1 + normalizedSize / 2;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// move the site from the center (four positions near the center) to a free spot\\r\\n\\t\\t\\tif(x >= normalizedSize / 2 - 1 && x <= normalizedSize / 2 && y >= normalizedSize / 2 - 1 && y <= normalizedSize / 2) {\\r\\n\\t\\t\\t\\t// `x` is aligned over the free space in the end of the segment\\r\\n\\t\\t\\t\\t// x += normalizedSize / 2 + 2 * (normalizedSize / 2 - x) + 2 * (normalizedSize / 2 - y) - 4;\\r\\n\\t\\t\\t\\tx += 5 * normalizedSize / 2 - 2 * (x + y) - 4;\\r\\n\\t\\t\\t\\t// `y` is fixed over the free space in the end of the segment\\r\\n\\t\\t\\t\\ty = normalizedSize / 2;\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t// if `N/2` is odd recover previously cut off border coordinates x = N/2 - 1, y = N/2 - 1\\r\\n\\t\\t\\t// if `N` is odd this recover previously cut off border coordinates x = N - 1, y = N - 1\\r\\n\\t\\t\\tuint16 offset = gridSize / siteSize % 2 + gridSize % siteSize;\\r\\n\\r\\n\\t\\t\\t// based on the determined site type and coordinates, allocate the site\\r\\n\\t\\t\\tsites[i] = Site({\\r\\n\\t\\t\\ttypeId: typeId,\\r\\n\\t\\t\\t\\t// reverse transform coordinate system (2): recover borders (x, y) => (x + 1, y + 1)\\r\\n\\t\\t\\t\\t// if `N/2` is odd recover previously cut off border coordinates x = N/2 - 1, y = N/2 - 1\\r\\n\\t\\t\\t\\t// reverse transform coordinate system (1): (x, y) => (n * x, n * y), where n is site size\\r\\n\\t\\t\\t\\t// if `N` is odd this recover previously cut off border coordinates x = N - 1, y = N - 1\\r\\n\\t\\t\\t\\tx: (1 + x) * siteSize + offset,\\r\\n\\t\\t\\t\\ty: (1 + y) * siteSize + offset\\r\\n\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed and tier ID determines the landmark type of the plot.\\r\\n\\t *      Random seed is consumed for tiers 3 and 4 to randomly determine one of three\\r\\n\\t *      possible landmark types.\\r\\n\\t *      Tier 5 has its landmark type predefined (arena), lower tiers don't have a landmark.\\r\\n\\t *\\r\\n\\t * @dev Function works in a deterministic way and derives the same data\\r\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive the landmark type based on\\r\\n\\t * @param tierId tier ID of the land plot\\r\\n\\t * @return landmarkTypeId landmark type defined by its ID\\r\\n\\t */\\r\\n\\tfunction getLandmark(uint256 seed, uint8 tierId) internal pure returns(uint8 landmarkTypeId) {\\r\\n\\t\\t// depending on the tier, land plot can have a landmark\\r\\n\\t\\t// tier 3 has an element landmark (1, 2, 3)\\r\\n\\t\\tif(tierId == 3) {\\r\\n\\t\\t\\t// derive random element landmark\\r\\n\\t\\t\\treturn uint8(1 + seed % 3);\\r\\n\\t\\t}\\r\\n\\t\\t// tier 4 has a fuel landmark (4, 5, 6)\\r\\n\\t\\tif(tierId == 4) {\\r\\n\\t\\t\\t// derive random fuel landmark\\r\\n\\t\\t\\treturn uint8(4 + seed % 3);\\r\\n\\t\\t}\\r\\n\\t\\t// tier 5 has an arena landmark\\r\\n\\t\\tif(tierId == 5) {\\r\\n\\t\\t\\t// 7 - arena landmark\\r\\n\\t\\t\\treturn 7;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// lower tiers (0, 1, 2) don't have any landmark\\r\\n\\t\\t// tiers greater than 5 are not defined\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Derives an array of integers with no duplicates from the random seed;\\r\\n\\t *      each element in the array is within [0, size) bounds and represents\\r\\n\\t *      a two-dimensional Cartesian coordinate point (x, y) presented as one-dimensional\\r\\n\\t *\\r\\n\\t * @dev Function works in a deterministic way and derives the same data\\r\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\r\\n\\t *\\r\\n\\t * @dev The input seed is considered to be already used to derive some random value\\r\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\r\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\r\\n\\t *      value is derived from it\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive coordinates from\\r\\n\\t * @param length number of elements to generate\\r\\n\\t * @param size defines array element bounds [0, size)\\r\\n\\t * @return nextSeed next pseudo-random \\\"used\\\" seed\\r\\n\\t * @return coords the resulting array of length `n` with random non-repeating elements\\r\\n\\t *      in [0, size) range\\r\\n\\t */\\r\\n\\tfunction getCoords(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint8 length,\\r\\n\\t\\tuint16 size\\r\\n\\t) internal pure returns(uint256 nextSeed, uint16[] memory coords) {\\r\\n\\t\\t// allocate temporary array to store (and determine) sites' coordinates\\r\\n\\t\\tcoords = new uint16[](length);\\r\\n\\r\\n\\t\\t// generate site coordinates one by one\\r\\n\\t\\tfor(uint8 i = 0; i < coords.length; i++) {\\r\\n\\t\\t\\t// get next number and update the seed\\r\\n\\t\\t\\t(seed, coords[i]) = nextRndUint16(seed, 0, size);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// sort the coordinates\\r\\n\\t\\tsort(coords);\\r\\n\\r\\n\\t\\t// find the if there are any duplicates, and while there are any\\r\\n\\t\\tfor(int256 i = findDup(coords); i >= 0; i = findDup(coords)) {\\r\\n\\t\\t\\t// regenerate the element at duplicate position found\\r\\n\\t\\t\\t(seed, coords[uint256(i)]) = nextRndUint16(seed, 0, size);\\r\\n\\t\\t\\t// sort the coordinates again\\r\\n\\t\\t\\t// TODO: check if this doesn't degrade the performance significantly (note the pivot in quick sort)\\r\\n\\t\\t\\tsort(coords);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// return the updated and used seed\\r\\n\\t\\treturn (seed, coords);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed, generates next random seed, and a random value\\r\\n\\t *      not lower than given `offset` value and able to have `options` different\\r\\n\\t *      and equiprobable values, that is in the [offset, offset + options) range\\r\\n\\t *\\r\\n\\t * @dev The input seed is considered to be already used to derive some random value\\r\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\r\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\r\\n\\t *      value is derived from it\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive next random value from\\r\\n\\t * @param offset the minimum possible output\\r\\n\\t * @param options number of different possible values to output\\r\\n\\t * @return nextSeed next pseudo-random \\\"used\\\" seed\\r\\n\\t * @return rndVal random value in the [offset, offset + options) range\\r\\n\\t */\\r\\n\\tfunction nextRndUint8(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint8 offset,\\r\\n\\t\\tuint8 options\\r\\n\\t) internal pure returns(\\r\\n\\t\\tuint256 nextSeed,\\r\\n\\t\\tuint8 rndVal\\r\\n\\t) {\\r\\n\\t\\t// generate next random seed first\\r\\n\\t\\tnextSeed = uint256(keccak256(abi.encodePacked(seed)));\\r\\n\\r\\n\\t\\t// derive random value with the desired properties from\\r\\n\\t\\t// the newly generated seed\\r\\n\\t\\trndVal = offset + uint8(nextSeed % options);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Based on the random seed, generates next random seed, and a random value\\r\\n\\t *      not lower than given `offset` value and able to have `options` different\\r\\n\\t *      possible values\\r\\n\\t *\\r\\n\\t * @dev The input seed is considered to be already used to derive some random value\\r\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\r\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\r\\n\\t *      value is derived from it\\r\\n\\t *\\r\\n\\t * @param seed random seed to consume and derive next random value from\\r\\n\\t * @param offset the minimum possible output\\r\\n\\t * @param options number of different possible values to output\\r\\n\\t * @return nextSeed next pseudo-random \\\"used\\\" seed\\r\\n\\t * @return rndVal random value in the [offset, offset + options) range\\r\\n\\t */\\r\\n\\tfunction nextRndUint16(\\r\\n\\t\\tuint256 seed,\\r\\n\\t\\tuint16 offset,\\r\\n\\t\\tuint16 options\\r\\n\\t) internal pure returns(\\r\\n\\t\\tuint256 nextSeed,\\r\\n\\t\\tuint16 rndVal\\r\\n\\t) {\\r\\n\\t\\t// generate next random seed first\\r\\n\\t\\tnextSeed = uint256(keccak256(abi.encodePacked(seed)));\\r\\n\\r\\n\\t\\t// derive random value with the desired properties from\\r\\n\\t\\t// the newly generated seed\\r\\n\\t\\trndVal = offset + uint16(nextSeed % options);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Plot location is a combination of (regionId, x, y), it's effectively\\r\\n\\t *      a 3-dimensional coordinate, unique for each plot\\r\\n\\t *\\r\\n\\t * @dev The function extracts plot location from the plot and represents it\\r\\n\\t *      in a packed form of 3 integers constituting the location: regionId | x | y\\r\\n\\t *\\r\\n\\t * @param plot `PlotView` view structure to extract location from\\r\\n\\t * @return Plot location (regionId, x, y) as a packed integer\\r\\n\\t */\\r\\n/*\\r\\n\\tfunction loc(PlotView memory plot) internal pure returns(uint40) {\\r\\n\\t\\t// tightly pack the location data and return\\r\\n\\t\\treturn uint40(plot.regionId) << 32 | uint32(plot.y) << 16 | plot.x;\\r\\n\\t}\\r\\n*/\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Plot location is a combination of (regionId, x, y), it's effectively\\r\\n\\t *      a 3-dimensional coordinate, unique for each plot\\r\\n\\t *\\r\\n\\t * @dev The function extracts plot location from the plot and represents it\\r\\n\\t *      in a packed form of 3 integers constituting the location: regionId | x | y\\r\\n\\t *\\r\\n\\t * @param plot `PlotStore` data store structure to extract location from\\r\\n\\t * @return Plot location (regionId, x, y) as a packed integer\\r\\n\\t */\\r\\n\\tfunction loc(PlotStore memory plot) internal pure returns(uint40) {\\r\\n\\t\\t// tightly pack the location data and return\\r\\n\\t\\treturn uint40(plot.regionId) << 32 | uint32(plot.y) << 16 | plot.x;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Site location is a combination of (x, y), unique for each site within a plot\\r\\n\\t *\\r\\n\\t * @dev The function extracts site location from the site and represents it\\r\\n\\t *      in a packed form of 2 integers constituting the location: x | y\\r\\n\\t *\\r\\n\\t * @param site `Site` view structure to extract location from\\r\\n\\t * @return Site location (x, y) as a packed integer\\r\\n\\t */\\r\\n/*\\r\\n\\tfunction loc(Site memory site) internal pure returns(uint32) {\\r\\n\\t\\t// tightly pack the location data and return\\r\\n\\t\\treturn uint32(site.y) << 16 | site.x;\\r\\n\\t}\\r\\n*/\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Finds first pair of repeating elements in the array\\r\\n\\t *\\r\\n\\t * @dev Assumes the array is sorted ascending:\\r\\n\\t *      returns `-1` if array is strictly monotonically increasing,\\r\\n\\t *      index of the first duplicate found otherwise\\r\\n\\t *\\r\\n\\t * @param arr an array of elements to check\\r\\n\\t * @return index found duplicate index, or `-1` if there are no repeating elements\\r\\n\\t */\\r\\n\\tfunction findDup(uint16[] memory arr) internal pure returns (int256 index) {\\r\\n\\t\\t// iterate over the array [1, n], leaving the space in the beginning for pair comparison\\r\\n\\t\\tfor(uint256 i = 1; i < arr.length; i++) {\\r\\n\\t\\t\\t// verify if there is a strict monotonically increase violation\\r\\n\\t\\t\\tif(arr[i - 1] >= arr[i]) {\\r\\n\\t\\t\\t\\t// return false if yes\\r\\n\\t\\t\\t\\treturn int256(i - 1);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// return `-1` if no violation was found - array is strictly monotonically increasing\\r\\n\\t\\treturn -1;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Sorts an array of integers using quick sort algorithm\\r\\n\\t *\\r\\n\\t * @dev Quick sort recursive implementation\\r\\n\\t *      Source:   https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f\\r\\n\\t *      See also: https://www.geeksforgeeks.org/quick-sort/\\r\\n\\t *\\r\\n\\t * @param arr an array to sort\\r\\n\\t */\\r\\n\\tfunction sort(uint16[] memory arr) internal pure {\\r\\n\\t\\tquickSort(arr, 0, int256(arr.length) - 1);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Quick sort recursive implementation\\r\\n\\t *      Source:     https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f\\r\\n\\t *      Discussion: https://blog.cotten.io/thinking-in-solidity-6670c06390a9\\r\\n\\t *      See also:   https://www.geeksforgeeks.org/quick-sort/\\r\\n\\t */\\r\\n\\t// TODO: review the implementation code\\r\\n\\tfunction quickSort(uint16[] memory arr, int256 left, int256 right) internal pure {\\r\\n\\t\\tint256 i = left;\\r\\n\\t\\tint256 j = right;\\r\\n\\t\\tif(i >= j) {\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tuint16 pivot = arr[uint256(left + (right - left) / 2)];\\r\\n\\t\\twhile(i <= j) {\\r\\n\\t\\t\\twhile(arr[uint256(i)] < pivot) {\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\twhile(pivot < arr[uint256(j)]) {\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif(i <= j) {\\r\\n\\t\\t\\t\\t(arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\r\\n\\t\\t\\t\\ti++;\\r\\n\\t\\t\\t\\tj--;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\tif(left < j) {\\r\\n\\t\\t\\tquickSort(arr, left, j);\\r\\n\\t\\t}\\r\\n\\t\\tif(i < right) {\\r\\n\\t\\t\\tquickSort(arr, i, right);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x5296ce66196e5163dc56241127b2e4043f97c307804efcf95b06aaaa4a81df9d\",\"license\":\"MIT\"},\"contracts/lib/NFTSvg.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../lib/Base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nlibrary NFTSvg {\\r\\n\\t\\tusing Strings for uint256;\\r\\n\\t\\tstruct SiteSVGData {\\r\\n\\t\\t\\t// site type id\\r\\n\\t\\t\\tuint8 typeId;\\r\\n\\t\\t\\t// x coordinate\\r\\n\\t\\t\\tuint16 x;\\r\\n\\t\\t\\t// y coordinate\\r\\n\\t\\t\\tuint16 y;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Pure function that returns the main svg array component, used in the\\r\\n\\t\\t *      top level of the generated land SVG.\\r\\n\\t\\t */\\r\\n\\t\\tfunction _mainSvg() private pure returns (string[6] memory mainSvg) {\\r\\n\\t\\t\\t\\tmainSvg = [\\r\\n\\t\\t\\t\\t\\t\\\"<svg width='280' height='280' viewBox='0 0 280 283' fill='none' stroke='#000' strokeWidth='2'  xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<rect rx='8' ry='8' x='0.5' y='263' width='279' height='20' fill='url(#BOARD_BOTTOM_BORDER_COLOR_TIER_\\\",\\r\\n\\t\\t\\t\\t\\t\\\"LAND_TIER_ID\\\",\\r\\n\\t\\t\\t\\t\\t\\\")' stroke='none'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"FUTURE_BOARD_CONTAINER\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\"</svg>\\\"\\r\\n\\t\\t\\t\\t];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Pure function that returns the site base svg array component, used to represent\\r\\n\\t\\t *      a site inside the land board.\\r\\n\\t\\t */\\r\\n\\t\\tfunction _siteBaseSvg() private pure returns (string[10] memory siteBaseSvg) {\\r\\n\\t\\t\\t\\tsiteBaseSvg = [\\r\\n\\t\\t\\t\\t\\t\\\"<svg viewBox='0.1 -0.4 16 16' x='\\\",\\r\\n\\t\\t\\t\\t\\t\\\"SITE_X_POSITION\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\"' y='\\\",\\r\\n\\t\\t\\t\\t\\t\\\"SITE_Y_POSITION\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\"' width='16' height='16' xmlns='http://www.w3.org/2000/svg'> \\\",\\r\\n\\t\\t\\t\\t\\t\\\"<rect fill='url(#SITE_TYPE_\\\",\\r\\n\\t\\t\\t\\t\\t\\\"SITE_TYPE_ID\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\")' width='4.7' height='4.7' stroke-opacity='0' transform='translate(0.7 0.7)'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<rect  width='5' height='5' stroke='#fff' stroke-opacity='0.5' transform='translate(0.5 0.5)'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</svg>\\\"\\r\\n\\t\\t\\t\\t];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * @dev Returns the land board base svg array component, which has its color changed\\r\\n\\t\\t *      later in other functions.\\r\\n\\t\\t */\\r\\n\\t\\tfunction _boardSvg() private pure returns (string[105] memory boardSvg) {\\r\\n\\t\\t\\t\\tboardSvg = [\\r\\n\\t\\t\\t\\t\\t\\\"<svg x='0' y='0' viewBox='0 0 280 280' width='280' height='280' xmlns='http://www.w3.org/2000/svg' >\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<defs>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='SITE_TYPE_5' gradientTransform='rotate(45)' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0%' stop-color='#31F27F' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='29.69%' stop-color='#F4BE86' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='57.81%' stop-color='#B26FD2' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='73.44%' stop-color='#7F70D2' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='100%' stop-color='#8278F2' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='SITE_TYPE_4' gradientTransform='rotate(45)' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0%' stop-color='#184B00' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='100%' stop-color='#52FF00' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='SITE_TYPE_2' gradientTransform='rotate(45)' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0%' stop-color='#CBE2FF' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='100%' stop-color='#EFEFEF' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='SITE_TYPE_3' gradientTransform='rotate(45)' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0%' stop-color='#8CD4D9' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='100%' stop-color='#598FA6' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='SITE_TYPE_1' gradientTransform='rotate(45)' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0%' stop-color='#565656' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='100%' stop-color='#000000' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='SITE_TYPE_6' gradientTransform='rotate(45)' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0%' stop-color='#FFFFFF' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='54.46%' stop-color='#FFD600' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='100%' stop-color='#FF9900' />\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_5' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#BE13AE'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_4' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#1F7460'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_3' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#6124AE'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_2' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#5350AA'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='BOARD_BOTTOM_BORDER_COLOR_TIER_1' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#2C2B67'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_5' x1='280' y1='0' x2='280' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0.130208' stop-color='#EFD700'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='0.6875' stop-color='#FF57EE'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#9A24EC'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_4' x1='143.59' y1='279.506' x2='143.59' y2='2.74439e-06' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#239378'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#41E23E'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_3' x1='143.59' y1='279.506' x2='143.59' y2='2.74439e-06' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#812DED'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#F100D9'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_2' x1='143.59' y1='1.02541e-05' x2='143.59' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#7DD6F2'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#625EDC'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='GRADIENT_BOARD_TIER_1' x1='143.59' y1='1.02541e-05' x2='143.59' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#4C44A0'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#2F2C83'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_5' x1='280' y1='50' x2='280' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#D2FFD9'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#F32BE1'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_4' x1='280' y1='50' x2='280' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#fff' stop-opacity='0.08'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_3' x1='280' y1='50' x2='280' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#fff' stop-opacity='0.08'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_2' x1='280' y1='50' x2='280' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#fff' stop-opacity='0.08'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<linearGradient id='ROUNDED_BORDER_TIER_1' x1='280' y1='50' x2='280' y2='280' gradientUnits='userSpaceOnUse' xmlns='http://www.w3.org/2000/svg'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop stop-color='#fff' stop-opacity='0.38'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<stop offset='1' stop-color='#fff' stop-opacity='0.08'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</linearGradient>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<pattern id='smallGrid' width='3' height='3' patternUnits='userSpaceOnUse' patternTransform='translate(-1.5 3.6) rotate(45) scale(1.28)'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<path d='M 3 0 L 0 0 0 3' fill='none'  stroke='#130A2A' stroke-opacity='0.2'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</pattern>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</defs>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<g fill='none' stroke-width='0'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<rect width='280' height='280' fill='url(#GRADIENT_BOARD_TIER_\\\",\\r\\n\\t\\t\\t\\t\\t\\\"LAND_TIER_ID\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\")' stroke='none' rx='8' ry='8'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</g>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<rect x='1' y='1' width='278' height='277.5' fill='url(#smallGrid)' stroke='none' rx='8' ry='8'/>    \\\",\\r\\n\\t\\t\\t\\t\\t\\\"<g transform='translate(0 -84.8) rotate(45 140 140) scale(1.37)'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<svg viewBox='0 0.5 307 306' width='287' height='286'>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"SITES_POSITIONED\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\"</svg>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</g>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"<rect x='0.5' y='0.4' width='279' height='278.5'  stroke='url(#ROUNDED_BORDER_TIER_\\\",\\r\\n\\t\\t\\t\\t\\t\\\"LAND_TIER_ID\\\", // This line should be replaced in the loop\\r\\n\\t\\t\\t\\t\\t\\\")' stroke-width='1'  rx='7' ry='7' xmlns='http://www.w3.org/2000/svg'/>\\\",\\r\\n\\t\\t\\t\\t\\t\\\"</svg>\\\"\\r\\n\\t\\t\\t\\t];\\r\\n\\r\\n}\\r\\n /**\\r\\n  * @dev Calculates string for the land name based on plot data.\\r\\n\\t* \\r\\n\\t* @param _regionId PlotView.regionId\\r\\n\\t* @param _x PlotView.x coordinate\\r\\n\\t* @param _y PlotView.y coordinate\\r\\n\\t* @param _tierId PlotView.tierId land tier id\\r\\n  */\\r\\n\\r\\n\\tfunction _generateLandName(uint8 _regionId,  uint16 _x,  uint16 _y, uint8 _tierId) private pure returns (string memory) {\\r\\n\\t\\treturn string(\\r\\n\\t\\t\\tabi.encodePacked(\\r\\n\\t\\t\\t\\t\\\"Land Tier \\\",\\r\\n\\t\\t\\t\\tuint256(_tierId).toString(),\\r\\n\\t\\t\\t\\t\\\" - (\\\",\\r\\n\\t\\t\\t\\tuint256(_regionId).toString(),\\r\\n\\t\\t\\t\\t\\\", \\\",\\r\\n\\t\\t\\t\\tuint256(_x).toString(),\\r\\n\\t\\t\\t\\t\\\", \\\",\\r\\n\\t\\t\\t\\tuint256(_y).toString()\\r\\n\\t\\t\\t)\\r\\n\\t\\t);\\r\\n\\t}\\r\\n \\r\\n  /**\\r\\n\\t * @dev Calculates the string for the land metadata description.\\r\\n\\t */\\r\\n\\tfunction _generateLandDescription() private pure returns (string memory) {\\r\\n\\t\\treturn \\\"Describes the asset to which this NFT represents\\\";\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Populates the mainSvg array with the land tier id and the svg returned\\r\\n\\t *      by the _generateLandBoard. Expects it to generate the land svg inside \\r\\n\\t *      the container.\\r\\n\\t * \\r\\n\\t * @param _tierId PlotView.tierId land tier id\\r\\n\\t * @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t */\\r\\n\\tfunction _generateSVG(uint8 _tierId, SiteSVGData[] memory _sites) private pure returns (string memory) {\\r\\n\\t\\t\\tstring[] memory _mainSvgArray = new string[](_mainSvg().length);\\r\\n\\r\\n\\t\\t\\tfor(uint256 i = 0; i < _mainSvg().length; i++) {\\r\\n\\t\\t\\t\\t\\tif (keccak256(bytes(_mainSvg()[i])) == keccak256(bytes(\\\"LAND_TIER_ID\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t\\t_mainSvgArray[i] = uint256(_tierId).toString();\\r\\n\\t\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tif(keccak256(bytes(_mainSvg()[i])) == keccak256(bytes(\\\"FUTURE_BOARD_CONTAINER\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t\\t_mainSvgArray[i] = _generateLandBoard(_tierId, _sites);\\r\\n\\t\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t_mainSvgArray[i] = _mainSvg()[i];\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn _joinArray(_mainSvgArray);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Generates the plot svg containing all sites inside and color according\\r\\n\\t *      to the tier\\r\\n\\t * \\r\\n\\t * @param _tierId PlotView.tierId land tier id\\r\\n\\t * @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t */\\r\\n\\tfunction _generateLandBoard(uint8 _tierId, SiteSVGData[] memory _sites) private pure returns (string memory) {\\r\\n\\t\\t\\tstring[] memory _boardSvgArray = new string[](_boardSvg().length);\\r\\n\\r\\n\\t\\t\\tfor (uint256 i = 0; i < _boardSvg().length; i++) {\\r\\n\\t\\t\\t\\tif (keccak256(bytes(_boardSvg()[i])) == keccak256(bytes(\\\"LAND_TIER_ID\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t_boardSvgArray[i] = uint256(_tierId).toString();\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (keccak256(bytes(_boardSvg()[i])) == keccak256(bytes(\\\"SITES_POSITIONED\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t_boardSvgArray[i] = _generateSites(_sites);\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t_boardSvgArray[i] = _boardSvg()[i];\\r\\n  \\t\\t}\\r\\n  \\t\\treturn _joinArray(_boardSvgArray);\\r\\n\\t}\\r\\n \\r\\n /**\\r\\n  * @dev Generates each site inside the land svg board with is position and color.\\r\\n\\t*\\r\\n\\t* @param _sites Array of plot sites coming from PlotView struct\\r\\n  */\\r\\n\\tfunction _generateSites(SiteSVGData[] memory _sites) private pure returns (string memory) {\\r\\n\\t\\t\\tstring[] memory _siteSvgArray = new string[](_sites.length);\\r\\n\\t\\t\\tfor (uint256 i = 0; i < _sites.length; i++) {\\r\\n\\t\\t\\t\\t\\t\\t_siteSvgArray[i] = _generatePositionAndColor(_sites[i]);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\treturn _joinArray(_siteSvgArray);\\r\\n\\t}\\r\\n \\r\\n /**\\r\\n  * @dev Called inside `_generateSites()`, expects to receive each site and \\r\\n\\t*      return the individual svg with the correct position inside the board and\\r\\n\\t*      color.\\r\\n  */\\r\\n\\tfunction _generatePositionAndColor(SiteSVGData memory _site) private pure returns (string memory) {\\r\\n\\t\\t\\tstring[] memory _siteSvgArray = new string[](_siteBaseSvg().length);\\r\\n\\r\\n\\t\\t  for (uint256 i = 0; i < _siteBaseSvg().length; i++) {\\r\\n\\t\\t\\t\\t\\tif (keccak256(bytes(_siteBaseSvg()[i])) == keccak256(bytes(\\\"SITE_TYPE_ID\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t_siteSvgArray[i] = uint256(_site.typeId).toString();\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tif (keccak256(bytes(_siteBaseSvg()[i])) == keccak256(bytes(\\\"SITE_X_POSITION\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t_siteSvgArray[i] = _convertToSvgPosition(_site.x);\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\tif (keccak256(bytes(_siteBaseSvg()[i])) == keccak256(bytes(\\\"SITE_Y_POSITION\\\"))) {\\r\\n\\t\\t\\t\\t\\t\\t_siteSvgArray[i] = _convertToSvgPosition(_site.y);\\r\\n\\t\\t\\t\\t\\t\\tcontinue;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t_siteSvgArray[i] = _siteBaseSvg()[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn _joinArray(_siteSvgArray);\\r\\n\\t}\\r\\n  /**\\r\\n\\t * @dev Main function, entry point to generate the complete land svg with all\\r\\n\\t *      populated sites, correct color, and attach to the JSON metadata file\\r\\n\\t *      created using Base64 lib.\\r\\n\\t * @dev Returns the JSON metadata formatted file used by NFT platforms to display\\r\\n\\t *      the land data.\\r\\n\\t * @dev Can be updated in the future to change the way land name, description, image\\r\\n\\t *      and other traits are displayed.\\r\\n\\t *\\r\\n\\t * @param _regionId PlotView.regionId\\r\\n\\t * @param _x PlotView.x coordinate\\r\\n\\t * @param _y PlotView.y coordinate\\r\\n\\t * @param _tierId PlotView.tierId land tier id\\r\\n\\t * @param _sites Array of plot sites coming from PlotView struct\\r\\n\\t */\\r\\n\\tfunction constructTokenURI(uint8 _regionId, uint16 _x, uint16 _y, uint8 _tierId, SiteSVGData[] memory _sites) internal pure returns (string memory) {\\r\\n\\t\\t\\tstring memory name = _generateLandName(_regionId, _x, _y, _tierId);\\r\\n\\t\\t\\tstring memory description = _generateLandDescription();\\r\\n\\t\\t\\tstring memory image = Base64.encode(bytes(_generateSVG(_tierId, _sites)));\\r\\n\\r\\n\\t\\t\\treturn string(\\r\\n\\t\\t\\t\\tabi.encodePacked(\\\"data:application/json;base64, \\\", Base64.encode(\\r\\n\\t\\t\\t\\t\\tbytes(\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tabi.encodePacked('{\\\"name\\\":\\\"',\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tname,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t'\\\", \\\"description\\\":\\\"',\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tdescription,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t'\\\", \\\"image\\\": \\\"',\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t'data:image/svg+xml;base64,',\\r\\n\\t\\t\\t\\t\\t\\t\\t\\timage,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t'\\\"}')\\r\\n\\t\\t\\t\\t\\t\\t)\\t\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t));\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction _joinArray(string[] memory _svgArray) private pure returns (string memory) {\\r\\n\\t\\tstring memory svg;\\r\\n\\t\\tfor (uint256 i = 0; i < _svgArray.length; i++) {\\r\\n\\t\\t\\t\\tif (i != 0) {\\r\\n\\t\\t\\t\\t\\tsvg = string(abi.encodePacked(svg, _svgArray[i]));\\r\\n\\t\\t\\t\\t} else {\\r\\n\\t\\t\\t\\t\\tsvg = _svgArray[i];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn svg;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _convertToSvgPosition(uint256 _position) private pure returns (string memory) {\\r\\n\\t\\t\\treturn (_position * 3 - 6).toString();\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7a4bc72052e30166a006a94c64839bc5efea2a573cac0ac1da1629763f8e2043\",\"license\":\"MIT\"},\"contracts/token/LandDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/LandERC721Spec.sol\\\";\\r\\nimport \\\"../interfaces/LandDescriptorSpec.sol\\\";\\r\\nimport \\\"../lib/NFTSvg.sol\\\";\\r\\n\\r\\ncontract LandDescriptorImpl {\\r\\n\\t /**\\r\\n\\t  * @dev Generates a base64 json metada file based on data supplied by the\\r\\n\\t\\t*      land contract.\\r\\n\\t\\t* @dev Plot data should be returned from the land contract in order to use\\r\\n\\t\\t*      the NFTSvg library which is called\\r\\n\\t\\t* \\r\\n\\t\\t* @param _plot Plot view data containing Sites array\\r\\n\\t  */\\r\\n\\t\\tfunction tokenURI(LandLib.PlotView calldata _plot) external pure returns (string memory) {\\r\\n\\t\\t\\t\\tNFTSvg.SiteSVGData[] memory sites = new NFTSvg.SiteSVGData[](_plot.sites.length);\\r\\n\\r\\n\\t\\t\\t\\tfor (uint256 i = 0; i < _plot.sites.length; i++) {\\r\\n\\t\\t\\t\\t\\t\\tsites[i] = NFTSvg.SiteSVGData({\\r\\n\\t\\t\\t\\t\\t\\t\\ttypeId: _plot.sites[i].typeId,\\r\\n\\t\\t\\t\\t\\t\\t\\tx: _plot.sites[i].x,\\r\\n\\t\\t\\t\\t\\t\\t\\ty: _plot.sites[i].y\\r\\n\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\treturn NFTSvg.constructTokenURI(_plot.regionId, _plot.x, _plot.y, _plot.tierId, sites);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t\\r\\n}\\r\\n\",\"keccak256\":\"0x1e0c3a093c4f8241cfada4734da235241091abe219042ea9d582b9fcf3eae80a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "tokenURI((uint8,uint16,uint16,uint8,uint16,uint8,uint8,uint8,(uint8,uint16,uint16)[]))": {
        "details": "Generates a base64 json metada file based on data supplied by the      land contract.Plot data should be returned from the land contract in order to use      the NFTSvg library which is called ",
        "params": {
          "_plot": "Plot view data containing Sites array"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}