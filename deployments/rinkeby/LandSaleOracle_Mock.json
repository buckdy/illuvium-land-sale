{
  "address": "0x0F7afeaD9882CeC1994a4cE7032e39acbf8a3805",
  "abi": [
    {
      "inputs": [],
      "name": "ethOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethOut",
          "type": "uint256"
        }
      ],
      "name": "ethToIlv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ilvIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToIlvOverride",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ilvIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethToIlvOverride",
          "type": "uint256"
        }
      ],
      "name": "setEthToIlvOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ilvIn",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc6506de3b15491abc3dbd245938821c4490e4f219d905a5649f314a3f11e3f86",
  "receipt": {
    "to": null,
    "from": "0x5F185Da55f7BBD9217E3b3CeE06b180721FA6d34",
    "contractAddress": "0x0F7afeaD9882CeC1994a4cE7032e39acbf8a3805",
    "transactionIndex": 16,
    "gasUsed": "246638",
    "logsBloom": "0x
    "blockHash": "0x252aeaa493c651214a2660938cd4d23643cf2c3acd5b4cadd3f20d7b20751e04",
    "transactionHash": "0xc6506de3b15491abc3dbd245938821c4490e4f219d905a5649f314a3f11e3f86",
    "logs": [],
    "blockNumber": 10172031,
    "cumulativeGasUsed": "11892457",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "23ca089541ae6df9f52ac308ca7cd754",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ethOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethOut\",\"type\":\"uint256\"}],\"name\":\"ethToIlv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ilvIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToIlvOverride\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilvIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethToIlvOverride\",\"type\":\"uint256\"}],\"name\":\"setEthToIlvOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ilvIn\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"kind\":\"dev\",\"methods\":{\"ethToIlv(uint256)\":{\"details\":\"Implementation must guarantee not to return zero, absurdly small      or big values, it must guarantee the price is up to date with some      reasonable update interval threshold\",\"params\":{\"ethOut\":\"amount of ETH sale contract is expecting to get\"},\"returns\":{\"_ilvIn\":\"amount of sILV sale contract should accept instead\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise\"}}},\"title\":\"Land Sale Oracle Implementation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ethToIlv(uint256)\":{\"notice\":\"Powers the ETH/ILV Land token price conversion, used when      selling the land for sILV to determine how much sILV to accept      instead of the nominated ETH priceNote that sILV price is considered to be equal to ILV price\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"notice\":\"Supports the Land Sale with the ETH/ILV conversion required\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/LandSaleOracleMock.sol\":\"LandSaleOracleMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/PriceOracleSpec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Pair Price Oracle, a.k.a. Pair Oracle\\n *\\n * @notice Generic interface used to consult on the Uniswap-like token pairs conversion prices;\\n *      one pair oracle is used to consult on the exchange rate within a single token pair\\n *\\n * @notice See also: https://docs.uniswap.org/protocol/V2/guides/smart-contract-integration/building-an-oracle\\n *\\n * @author Basil Gorin\\n */\\ninterface PairOracle {\\n\\t/**\\n\\t * @notice Updates the oracle with the price values if required, for example\\n\\t *      the cumulative price at the start and end of a period, etc.\\n\\t *\\n\\t * @dev This function is part of the oracle maintenance flow\\n\\t */\\n\\tfunction update() external;\\n\\n\\t/**\\n\\t * @notice For a pair of tokens A/B (sell/buy), consults on the amount of token B to be\\n\\t *      bought if the specified amount of token A to be sold\\n\\t *\\n\\t * @dev This function is part of the oracle usage flow\\n\\t *\\n\\t * @param token token A (token to sell) address\\n\\t * @param amountIn amount of token A to sell\\n\\t * @return amountOut amount of token B to be bought\\n\\t */\\n\\tfunction consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\\n}\\n\\n/**\\n * @title Oracle Registry\\n *\\n * @notice To make pair oracles more convenient to use, a more generic Oracle Registry\\n *        interface is introduced: it stores the addresses of pair price oracles and allows\\n *        searching/querying for them\\n *\\n * @author Basil Gorin\\n */\\ninterface OracleRegistry {\\n\\t/**\\n\\t * @notice Searches for the Pair Price Oracle for A/B (sell/buy) token pair\\n\\t *\\n\\t * @param tokenA token A (token to sell) address\\n\\t * @param tokenB token B (token to buy) address\\n\\t * @return pairOracle pair price oracle address for A/B token pair\\n\\t */\\n\\tfunction getOracle(address tokenA, address tokenB) external view returns (address pairOracle);\\n}\\n\\n/**\\n * @title Land Sale Oracle Interface\\n *\\n * @notice Supports the Land Sale with the ETH/ILV conversion required,\\n *       marker interface is required to support ERC165 lookups\\n *\\n * @author Basil Gorin\\n */\\ninterface LandSaleOracle {\\n\\t/**\\n\\t * @notice Powers the ETH/ILV Land token price conversion, used when\\n\\t *      selling the land for sILV to determine how much sILV to accept\\n\\t *      instead of the nominated ETH price\\n\\t *\\n\\t * @notice Note that sILV price is considered to be equal to ILV price\\n\\t *\\n\\t * @dev Implementation must guarantee not to return zero, absurdly small\\n\\t *      or big values, it must guarantee the price is up to date with some\\n\\t *      reasonable update interval threshold\\n\\t *\\n\\t * @param ethOut amount of ETH sale contract is expecting to get\\n\\t * @return ilvIn amount of sILV sale contract should accept instead\\n\\t */\\n\\tfunction ethToIlv(uint256 ethOut) external returns (uint256 ilvIn);\\n}\\n\",\"keccak256\":\"0x37b1814101e7680b8abb8100df7d3db01f5e981c3bc6cbf9dbc2dc8a6f623cd7\",\"license\":\"MIT\"},\"contracts/mocks/LandSaleOracleMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC165Spec.sol\\\";\\nimport \\\"../interfaces/PriceOracleSpec.sol\\\";\\n\\n/**\\n * @title Land Sale Oracle Implementation\\n *\\n * @notice Supports the Land Sale with the ETH/ILV conversion required\\n *\\n * @author Basil Gorin\\n */\\ncontract LandSaleOracleMock is LandSaleOracle, ERC165 {\\n\\t// initial conversion rate is 1 ETH = 4 ILV\\n\\tuint256 public ethOut = 1;\\n\\tuint256 public ilvIn = 4;\\n\\tuint256 public ethToIlvOverride = type(uint256).max;\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) public view virtual override returns (bool) {\\n\\t\\t// determine and return the interface support\\n\\t\\treturn interfaceID == type(LandSaleOracle).interfaceId;\\n\\t}\\n\\n\\t// updates the conversion rate\\n\\tfunction setRate(uint256 _ethOut, uint256 _ilvIn) public {\\n\\t\\tethOut = _ethOut;\\n\\t\\tilvIn = _ilvIn;\\n\\t}\\n\\n\\t// overrides the `ethToIlv` completely and forces it to always return the value specified\\n\\tfunction setEthToIlvOverride(uint256 _ethToIlvOverride) public {\\n\\t\\tethToIlvOverride = _ethToIlvOverride;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc LandSaleOracle\\n\\t */\\n\\tfunction ethToIlv(uint256 _ethOut) public view virtual override returns (uint256 _ilvIn) {\\n\\t\\treturn ethToIlvOverride < type(uint256).max? ethToIlvOverride: _ethOut * ilvIn / ethOut;\\n\\t}\\n}\\n\",\"keccak256\":\"0x017b43ab53372b6172d5ffc6fcab52e7a83ddd84d7f473729a942b319a0b93c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600055600460015560001960025534801561002057600080fd5b5061024c806100306000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637b64853b1161005b5780637b64853b146100e9578063854d277e146101005780639b50aa4e14610109578063c8a439821461011c57600080fd5b806301ffc9a7146100825780632e75e514146100bb57806346df2ccb146100d0575b600080fd5b6100a661009036600461015b565b6001600160e01b031916634da8552760e11b1490565b60405190151581526020015b60405180910390f35b6100ce6100c936600461018c565b600255565b005b6100ce6100de3660046101a5565b600091909155600155565b6100f260015481565b6040519081526020016100b2565b6100f260025481565b6100f261011736600461018c565b610125565b6100f260005481565b6000600019600254106101515760005460015461014290846101c7565b61014c91906101f4565b610155565b6002545b92915050565b60006020828403121561016d57600080fd5b81356001600160e01b03198116811461018557600080fd5b9392505050565b60006020828403121561019e57600080fd5b5035919050565b600080604083850312156101b857600080fd5b50508035926020909101359150565b60008160001904831182151516156101ef57634e487b7160e01b600052601160045260246000fd5b500290565b60008261021157634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d2e2977c10f3f3df8d7316e74703bb388e453e616dc7f1e47aefcad4366e53ba64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637b64853b1161005b5780637b64853b146100e9578063854d277e146101005780639b50aa4e14610109578063c8a439821461011c57600080fd5b806301ffc9a7146100825780632e75e514146100bb57806346df2ccb146100d0575b600080fd5b6100a661009036600461015b565b6001600160e01b031916634da8552760e11b1490565b60405190151581526020015b60405180910390f35b6100ce6100c936600461018c565b600255565b005b6100ce6100de3660046101a5565b600091909155600155565b6100f260015481565b6040519081526020016100b2565b6100f260025481565b6100f261011736600461018c565b610125565b6100f260005481565b6000600019600254106101515760005460015461014290846101c7565b61014c91906101f4565b610155565b6002545b92915050565b60006020828403121561016d57600080fd5b81356001600160e01b03198116811461018557600080fd5b9392505050565b60006020828403121561019e57600080fd5b5035919050565b600080604083850312156101b857600080fd5b50508035926020909101359150565b60008160001904831182151516156101ef57634e487b7160e01b600052601160045260246000fd5b500290565b60008261021157634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d2e2977c10f3f3df8d7316e74703bb388e453e616dc7f1e47aefcad4366e53ba64736f6c634300080b0033",
  "devdoc": {
    "author": "Basil Gorin",
    "kind": "dev",
    "methods": {
      "ethToIlv(uint256)": {
        "details": "Implementation must guarantee not to return zero, absurdly small      or big values, it must guarantee the price is up to date with some      reasonable update interval threshold",
        "params": {
          "ethOut": "amount of ETH sale contract is expecting to get"
        },
        "returns": {
          "_ilvIn": "amount of sILV sale contract should accept instead"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      }
    },
    "title": "Land Sale Oracle Implementation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ethToIlv(uint256)": {
        "notice": "Powers the ETH/ILV Land token price conversion, used when      selling the land for sILV to determine how much sILV to accept      instead of the nominated ETH priceNote that sILV price is considered to be equal to ILV price"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "notice": "Supports the Land Sale with the ETH/ILV conversion required",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9882,
        "contract": "contracts/mocks/LandSaleOracleMock.sol:LandSaleOracleMock",
        "label": "ethOut",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9885,
        "contract": "contracts/mocks/LandSaleOracleMock.sol:LandSaleOracleMock",
        "label": "ilvIn",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9892,
        "contract": "contracts/mocks/LandSaleOracleMock.sol:LandSaleOracleMock",
        "label": "ethToIlvOverride",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}