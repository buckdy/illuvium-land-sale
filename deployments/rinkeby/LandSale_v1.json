{
  "address": "0x21411530bE0E477b734b4Fe853c4804D3a4bfB78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sIlv",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiaryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_saleStart",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_saleEnd",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_halvingTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_timeFlowQuantum",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_seqDuration",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_seqOffset",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint96[]",
          "name": "_startPrices",
          "type": "uint96[]"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tokenId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sequenceId",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "regionId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "x",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "y",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tierId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "size",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct LandSale.PlotData",
          "name": "_plotData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "regionId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "x",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "y",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tierId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "size",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "version",
              "type": "uint16"
            },
            {
              "internalType": "uint160",
              "name": "seed",
              "type": "uint160"
            }
          ],
          "indexed": false,
          "internalType": "struct Land.PlotStore",
          "name": "_plot",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sIlv",
          "type": "uint256"
        }
      ],
      "name": "PlotBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "RootChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_eth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sIlv",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEATURE_SALE_ACTIVE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_DATA_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_RESCUE_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_SALE_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_WITHDRAWAL_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tokenId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sequenceId",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "regionId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "x",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "y",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tierId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "size",
              "type": "uint16"
            }
          ],
          "internalType": "struct LandSale.PlotData",
          "name": "plotData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "desired",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStartPrices",
      "outputs": [
        {
          "internalType": "uint96[]",
          "name": "",
          "type": "uint96[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "halvingTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_saleStart",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_saleEnd",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_halvingTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_timeFlowQuantum",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_seqDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_seqOffset",
          "type": "uint32"
        },
        {
          "internalType": "uint96[]",
          "name": "_startPrices",
          "type": "uint96[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tokenId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sequenceId",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "regionId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "x",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "y",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tierId",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "size",
              "type": "uint16"
            }
          ],
          "internalType": "struct LandSale.PlotData",
          "name": "plotData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "isPlotValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "now32",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "p0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "t0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "rescueErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sIlvContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleEnd",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleStart",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seqDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seqOffset",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setInputDataRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "startPrices",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetNftContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeFlowQuantum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "sequenceId",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "tierId",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "t",
          "type": "uint32"
        }
      ],
      "name": "tokenPriceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "sequenceId",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "tierId",
          "type": "uint16"
        }
      ],
      "name": "tokenPriceNow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_ethOnly",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_ethOnly",
          "type": "bool"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45014dc436136231a4e84662a8f574fe055609530c056d4df3d83427f85bda09",
  "receipt": {
    "to": null,
    "from": "0xEd6003e7A6494Db4ABabEB7bDf994A3951ac6e69",
    "contractAddress": "0x21411530bE0E477b734b4Fe853c4804D3a4bfB78",
    "transactionIndex": 6,
    "gasUsed": "2306783",
    "logsBloom": "0x
    "blockHash": "0x5eb296a5933fac275ad98c6f62b83e78ba517543dd31a652f0d93c5d5f2bfe7e",
    "transactionHash": "0x45014dc436136231a4e84662a8f574fe055609530c056d4df3d83427f85bda09",
    "logs": [],
    "blockNumber": 9705790,
    "cumulativeGasUsed": "2592075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf2af49F1a4eDDF34e7151CF60305c3f4C6D931F9",
    "0xF4be0Fe832bB69E0C520f9b8787883AC7F9208b6",
    "0x6E9142F8Bf468302Bfc817E9272C8aDFc2FDAEA2"
  ],
  "solcInputHash": "1993a3ce3e09336e074fc91dc8d5720c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sIlv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_saleStart\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_saleEnd\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_halvingTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_timeFlowQuantum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_seqDuration\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_seqOffset\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint96[]\",\"name\":\"_startPrices\",\"type\":\"uint96[]\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sequenceId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"regionId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tierId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct LandSale.PlotData\",\"name\":\"_plotData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"regionId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tierId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"uint160\",\"name\":\"seed\",\"type\":\"uint160\"}],\"indexed\":false,\"internalType\":\"struct Land.PlotStore\",\"name\":\"_plot\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sIlv\",\"type\":\"uint256\"}],\"name\":\"PlotBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"RootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sIlv\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEATURE_SALE_ACTIVE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_DATA_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_RESCUE_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_SALE_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_WITHDRAWAL_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sequenceId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"regionId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tierId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"}],\"internalType\":\"struct LandSale.PlotData\",\"name\":\"plotData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartPrices\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_saleStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_saleEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_halvingTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_timeFlowQuantum\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_seqDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_seqOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint96[]\",\"name\":\"_startPrices\",\"type\":\"uint96[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tokenId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sequenceId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"regionId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"y\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tierId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"size\",\"type\":\"uint16\"}],\"internalType\":\"struct LandSale.PlotData\",\"name\":\"plotData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"isPlotValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"now32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rescueErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sIlvContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEnd\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStart\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seqDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seqOffset\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setInputDataRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startPrices\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetNftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeFlowQuantum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sequenceId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tierId\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"t\",\"type\":\"uint32\"}],\"name\":\"tokenPriceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sequenceId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"tierId\",\"type\":\"uint16\"}],\"name\":\"tokenPriceNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ethOnly\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_ethOnly\",\"type\":\"bool\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"details\":\"Merkle proof verification is based on OpenZeppelin implementation, see      https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof\",\"events\":{\"BeneficiaryUpdated(address,address)\":{\"details\":\"Fired in setBeneficiary\",\"params\":{\"_beneficiary\":\"new beneficiary address or zero-address\",\"_by\":\"an address which executed the operation\"}},\"Initialized(address,uint32,uint32,uint32,uint32,uint32,uint32,uint96[])\":{\"details\":\"Fired in initialize()\",\"params\":{\"_by\":\"an address which executed the operation\",\"_halvingTime\":\"price halving time, the time required for a token price      to reduce to the half of its initial value\",\"_saleEnd\":\"sale end time, should match with the last sequence end time\",\"_saleStart\":\"sale start time, and first sequence start time\",\"_seqDuration\":\"sequence duration, time limit of how long a token / sequence      can be available for sale\",\"_seqOffset\":\"sequence start offset, each sequence starts `_seqOffset`      later after the previous one\",\"_startPrices\":\"tier start prices, starting token price for each (zero based) Tier ID\",\"_timeFlowQuantum\":\"time flow quantum, price update interval, used by      the price calculation algorithm to update prices\"}},\"PlotBought(address,(uint32,uint32,uint16,uint16,uint16,uint16,uint16),(uint16,uint16,uint16,uint16,uint16,uint16,uint160),uint256,uint256)\":{\"details\":\"Fired in buy()\",\"params\":{\"_by\":\"an address which had bought the plot\",\"_eth\":\"ETH price of the lot\",\"_plot\":\"on-chain plot metadata minted token (contains seed)\",\"_plotData\":\"off-chain plot metadata supplied externally\",\"_sIlv\":\"sILV price of the lot (zero if paid in ETH)\"}},\"RootChanged(address,bytes32)\":{\"details\":\"Fired in setInputDataRoot()\",\"params\":{\"_by\":\"an address which executed the operation\",\"_root\":\"new Merkle root value\"}},\"Withdrawn(address,address,uint256,uint256)\":{\"details\":\"Fired in withdraw() and withdrawTo()\",\"params\":{\"_by\":\"an address which executed the operation\",\"_eth\":\"amount of ETH withdrawn\",\"_sIlv\":\"amount of sILV withdrawn\",\"_to\":\"an address which received the funds withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"buy((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])\":{\"details\":\"Merkle tree and proof can be constructed using the `web3-utils`, `merkletreejs`,      and `keccak256` npm packages:      1. Hash the plot data collection elements via `web3.utils.soliditySha3`, making sure         the packing order and types are exactly as defined in `PlotData` struct      2. Create a sorted MerkleTree (`merkletreejs`) from the hashed collection, use `keccak256`         from the `keccak256` npm package as a hashing function, do not hash leaves         (already hashed in step 1); Ex. MerkleTree options: {hashLeaves: false, sortPairs: true}      3. For any given plot data element the proof is constructed by hashing it (as in step 1),         and querying the MerkleTree for a proof, providing the hashed plot data element as a leafRequires FEATURE_SALE_ACTIVE feature to be enabledThrows if current time is outside the [saleStart, saleEnd) bounds,      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),      or if the tier specified is invalid (no starting price is defined for it)See also: https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof\",\"params\":{\"plotData\":\"plot data to buy\",\"proof\":\"Merkle proof for the plot data supplied\"}},\"constructor\":{\"details\":\"Creates/deploys sale smart contract instance and binds it to      1) the target NFT smart contract address to be used to mint tokens (Land ERC721),      2) sILV (Escrowed Illuvium) contract address to be used as one of the payment options      3) Price Oracle contract address to be used to determine ETH/sILV price\",\"params\":{\"_nft\":\"target NFT smart contract address\",\"_oracle\":\"price oracle contract address\",\"_sIlv\":\"sILV (Escrowed Illuvium) contract address\"}},\"evaluateBy(address,uint256,uint256)\":{\"details\":\"Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011\",\"params\":{\"desired\":\"desired set of permissions operator would like to set\",\"operator\":\"address of the contract operator which is about to set the permissions\",\"target\":\"input set of permissions to operator is going to modify\"},\"returns\":{\"_0\":\"resulting set of permissions given operator will set\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"getStartPrices()\":{\"details\":\"`startPrices` getter; the getters solidity creates for arrays      may be inconvenient to use if we need an entire array to be read\",\"returns\":{\"_0\":\"`startPrices` as is - as an array of uint96\"}},\"initialize(uint32,uint32,uint32,uint32,uint32,uint32,uint96[])\":{\"details\":\"Restricted access function to set up sale parameters, all at once,      or any subset of themTo skip parameter initialization, set it to `-1`,      that is a maximum value for unsigned integer of the corresponding type;      for `_startPrices` use a single array element with the `-1` value to skipExample: following initialization will update only `_seqDuration` and `_seqOffset`,      leaving the rest of the fields unchanged      initialize(          0xFFFFFFFF, // `_saleStart` unchanged          0xFFFFFFFF, // `_saleEnd` unchanged          0xFFFFFFFF, // `_halvingTime` unchanged          21600,      // `_seqDuration` updated to 6 hours          3600,       // `_seqOffset` updated to 1 hour          [0xFFFFFFFFFFFFFFFFFFFFFFFF] // `_startPrices` unchanged      )Sale start and end times should match with the number of sequences,      sequence duration and offset, if `n` is number of sequences, then      the following equation must hold:         `saleStart + (n - 1) * seqOffset + seqDuration = saleEnd`      Note: `n` is unknown to the sale contract and there is no way for it      to accurately validate other parameters of the equation aboveInput params are not validated; to get an idea if these params look valid,      refer to `isActive() `function, and it's logicRequires transaction sender to have `ROLE_SALE_MANAGER` role\",\"params\":{\"_halvingTime\":\"price halving time, the time required for a token price      to reduce to the half of its initial value\",\"_saleEnd\":\"sale end time, should match with the last sequence end time\",\"_saleStart\":\"sale start time, and first sequence start time\",\"_seqDuration\":\"sequence duration, time limit of how long a token / sequence      can be available for sale\",\"_seqOffset\":\"sequence start offset, each sequence starts `_seqOffset`      later after the previous one\",\"_startPrices\":\"tier start prices, starting token price for each (zero based) Tier ID\",\"_timeFlowQuantum\":\"time flow quantum, price update interval, used by      the price calculation algorithm to update prices\"}},\"isActive()\":{\"details\":\"The sale is defined as active if all of the below conditions hold:      - sale start is now or in the past      - sale end is in the future      - halving time is not zero      - sequence duration is not zero      - there is at least one starting price set (zero price is valid)\",\"returns\":{\"_0\":\"true if sale is active, false otherwise\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isPlotValid((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])\":{\"details\":\"Merkle tree and proof can be constructed using the `web3-utils`, `merkletreejs`,      and `keccak256` npm packages:      1. Hash the plot data collection elements via `web3.utils.soliditySha3`, making sure         the packing order and types are exactly as defined in `PlotData` struct      2. Create a sorted MerkleTree (`merkletreejs`) from the hashed collection, use `keccak256`         from the `keccak256` npm package as a hashing function, do not hash leaves         (already hashed in step 1); Ex. MerkleTree options: {hashLeaves: false, sortPairs: true}      3. For any given plot data element the proof is constructed by hashing it (as in step 1),         and querying the MerkleTree for a proof, providing the hashed plot data element as a leafSee also: https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof\",\"params\":{\"plotData\":\"plot data to verify\",\"proof\":\"Merkle proof for the plot data supplied\"},\"returns\":{\"_0\":\"true if plot is valid (belongs to registered collection), false otherwise\"}},\"isSenderInRole(uint256)\":{\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"now32()\":{\"details\":\"Testing time-dependent functionality may be difficult;      we override time in the helper test smart contract (mock)\",\"returns\":{\"_0\":\"`block.timestamp` in mainnet, custom values in testnets (if overridden)\"}},\"price(uint256,uint256,uint256)\":{\"details\":\"Calculates dutch auction price after the time of interest has passed since      the auction has startedThe price is assumed to drop exponentially, according to formula:      p(t) = p0 * 2^(-t/t0)      The price halves every t0 seconds passed from the start of the auctionCalculates with the precision p0 * 2^(-1/256), meaning the price updates      every t0 / 256 seconds      For example, if halving time is one hour, the price updates every 14 seconds\",\"params\":{\"p0\":\"initial price\",\"t\":\"elapsed time\",\"t0\":\"price halving time\"},\"returns\":{\"_0\":\"price after `t` seconds passed, `p = p0 * 2^(-t/t0)`\"}},\"rescueErc20(address,address,uint256)\":{\"details\":\"Restricted access function to rescue accidentally sent ERC20 tokens,      the tokens are rescued via `transfer` function call on the      contract address specified and with the parameters specified:      `_contract.transfer(_to, _value)`Doesn't allow to rescue sILV tokens, use withdraw/withdrawTo insteadRequires executor to have `ROLE_RESCUE_MANAGER` permission\",\"params\":{\"_contract\":\"smart contract address to execute `transfer` function on\",\"_to\":\"to address in `transfer(_to, _value)`\",\"_value\":\"value to transfer in `transfer(_to, _value)`\"}},\"setBeneficiary(address)\":{\"details\":\"Restricted access function to update the sale beneficiary address, the address      can be set, updated, or \\\"unset\\\" (deleted, set to zero)Setting the address to non-zero value effectively activates funds withdrawal      mechanism via the push patternSetting the address to zero value effectively deactivates funds withdrawal      mechanism via the push pattern (pull mechanism can be used instead)\"},\"setInputDataRoot(bytes32)\":{\"details\":\"Requires executor to have `ROLE_DATA_MANAGER` permission\",\"params\":{\"_root\":\"Merkle tree root for the input plot data collection\"}},\"tokenPriceAt(uint32,uint16,uint32)\":{\"details\":\"Throws if `t` is outside the [saleStart, saleEnd) bounds,      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),      or if the tier specified is invalid (no starting price is defined for it)\",\"params\":{\"sequenceId\":\"ID of the sequence token is sold in\",\"t\":\"the time of interest, time to evaluate the price at\",\"tierId\":\"ID of the tier token belongs to (defines token rarity)\"}},\"tokenPriceNow(uint32,uint16)\":{\"details\":\"Throws if `now` is outside the [saleStart, saleEnd) bounds,      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),      or if the tier specified is invalid (no starting price is defined for it)\",\"params\":{\"sequenceId\":\"ID of the sequence token is sold in\",\"tierId\":\"ID of the tier token belongs to (defines token rarity)\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for or zero      to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}},\"withdraw(bool)\":{\"details\":\"Restricted access function to withdraw funds on the contract balance,      sends funds back to transaction senderWithdraws both ETH and sILV balances if `_ethOnly` is set to false,      withdraws only ETH is `_ethOnly` is set to true\",\"params\":{\"_ethOnly\":\"a flag indicating whether to withdraw sILV or not\"}},\"withdrawTo(address,bool)\":{\"details\":\"Restricted access function to withdraw funds on the contract balance,      sends funds to the address specifiedWithdraws both ETH and sILV balances if `_ethOnly` is set to false,      withdraws only ETH is `_ethOnly` is set to true\",\"params\":{\"_ethOnly\":\"a flag indicating whether to withdraw sILV or not\",\"_to\":\"an address to send funds to\"}}},\"stateVariables\":{\"FEATURE_SALE_ACTIVE\":{\"details\":\"Feature FEATURE_SALE_ACTIVE must be enabled in order for      `buy()` function to be able to succeed\"},\"ROLE_DATA_MANAGER\":{\"details\":\"Role ROLE_DATA_MANAGER allows setting the Merkle tree root via setInputDataRoot()\"},\"ROLE_RESCUE_MANAGER\":{\"details\":\"Role ROLE_RESCUE_MANAGER allows withdrawing any ERC20 tokens stored      on the smart contract balance\"},\"ROLE_SALE_MANAGER\":{\"details\":\"Role ROLE_SALE_MANAGER allows sale initialization via initialize()\"},\"ROLE_WITHDRAWAL_MANAGER\":{\"details\":\"Role ROLE_WITHDRAWAL_MANAGER allows to set the `beneficiary` address via      - setBeneficiary()Role ROLE_WITHDRAWAL_MANAGER allows pull withdrawals of funds:      - withdraw()      - withdrawTo()\"},\"beneficiary\":{\"details\":\"Sale beneficiary address, if set - used to send funds obtained from the sale;      If not set - contract accumulates the funds on its own deployed address\"},\"halvingTime\":{\"details\":\"Price halving time, the time required for a token price to reduce to the      half of its initial valueDefined in seconds\"},\"sIlvContract\":{\"details\":\"Note: sILV ERC20 implementation never returns \\\"false\\\" on transfers,      it throws instead; we don't use any additional libraries like SafeERC20      to transfer sILV therefore\"},\"saleEnd\":{\"details\":\"Sale end unix timestamp, this is the time when sale deactivates,      and tokens of the last sequence become unavailableThe sale is active before the end (exclusive)\"},\"saleStart\":{\"details\":\"Sale start unix timestamp, this is the time when sale activates,      the time when the first sequence sale starts, that is      when tokens of the first sequence become available on saleThe sale is active after the start (inclusive)\"},\"seqDuration\":{\"details\":\"Sequence duration, time limit of how long a token / sequence can be available      for sale, first sequence stops selling at `saleStart + seqDuration`, second      sequence stops selling at `saleStart + seqOffset + seqDuration`, and so onDefined in seconds\"},\"seqOffset\":{\"details\":\"Sequence start offset, first sequence starts selling at `saleStart`,      second sequence starts at `saleStart + seqOffset`, third at      `saleStart + 2 * seqOffset` and so on at `saleStart + n * seqOffset`,      where `n` is zero-based sequence IDDefined in seconds\"},\"startPrices\":{\"details\":\"Tier start prices, starting token price for each (zero based) Tier ID,      defined in ETH, can be converted into sILV via Uniswap/Sushiswap price oracle,      sILV price is defined to be equal to ILV price\"},\"timeFlowQuantum\":{\"details\":\"Time flow quantum, price update interval, used by the price calculation algorithm,      the time is rounded down to be multiple of quantum when performing price calculations;      setting this value to one effectively disables its effect;Defined in seconds\"}},\"title\":\"Land Sale\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FEATURE_SALE_ACTIVE()\":{\"notice\":\"Enables the sale, buying tokens public function\"},\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_DATA_MANAGER()\":{\"notice\":\"Data manager is responsible for supplying the valid input plot data collection      Merkle root which then can be used to mint tokens, meaning effectively,      that data manager may act as a minter on the target NFT contract\"},\"ROLE_RESCUE_MANAGER()\":{\"notice\":\"People do mistake and may send ERC20 tokens by mistake; since      NFT smart contract is not designed to accept and hold any ERC20 tokens,      it allows the rescue manager to \\\"rescue\\\" such lost tokensRescue manager is responsible for \\\"rescuing\\\" ERC20 tokens accidentally      sent to the smart contract, except the sILV which is a payment token      and can be withdrawn by the withdrawal manager only\"},\"ROLE_SALE_MANAGER()\":{\"notice\":\"Sale manager is responsible for sale initialization:      setting up sale start/end, halving time, sequence params, and starting prices\"},\"ROLE_WITHDRAWAL_MANAGER()\":{\"notice\":\"Withdrawal manager is responsible for withdrawing funds obtained in sale      from the sale smart contract via pull/push mechanisms:      1) Pull: no pre-setup is required, withdrawal manager executes the         withdraw function periodically to withdraw funds      2) Push: withdrawal manager sets the `beneficiary` address which is used         by the smart contract to send funds to when users purchase land NFTs\"},\"buy((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])\":{\"notice\":\"Sells a plot of land (Land ERC721 token) from the sale to executor.      Executor must supply the metadata for the land plot and a Merkle tree proof      for the metadata supplied.Metadata for all the plots is stored off-chain and is publicly available      to buy plots and to generate Merkle proofs\"},\"evaluateBy(address,uint256,uint256)\":{\"notice\":\"Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"isActive()\":{\"notice\":\"Verifies if sale is in the active state, meaning that it is properly      initialized with the sale start/end times, sequence params, etc., and      that the current time is within the sale start/end boundsDoesn't check if the plot data Merkle root `root` is set or not;      active sale state doesn't guarantee that an item can be actually bought\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isPlotValid((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])\":{\"notice\":\"Verifies the validity of a plot supplied (namely, if it's registered for the sale)      based on the Merkle root of the plot data collection (already defined on the contract),      and the Merkle proof supplied to validate the particular plot data\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"priceOracle()\":{\"notice\":\"Land Sale Price Oracle is used to convert the token prices from USD      to ETH or sILV (ILV)\"},\"root()\":{\"notice\":\"Input data root, Merkle tree root for the collection of plot data elements,      available on saleMerkle root effectively \\\"compresses\\\" the (potentially) huge collection of elements      and allows to store it in a single 256-bits storage slot on-chain\"},\"sIlvContract()\":{\"notice\":\"Deployed sILV (Escrowed Illuvium) ERC20 token address,      accepted as a payment option alongside ETH\"},\"setInputDataRoot(bytes32)\":{\"notice\":\"Restricted access function to update input data root (Merkle tree root),       and to define, effectively, the tokens to be created by this smart contract\"},\"targetNftContract()\":{\"notice\":\"Deployed LandERC721 token address to mint tokens of      (when they are bought via the sale)\"},\"tokenPriceAt(uint32,uint16,uint32)\":{\"notice\":\"Determines the dutch auction price value for a token in a given      sequence `sequenceId`, given tier `tierId`, at a given time `t`\"},\"tokenPriceNow(uint32,uint16)\":{\"notice\":\"Determines the dutch auction price value for a token in a given      sequence `sequenceId`, given tier `tierId`, now (block.timestamp)\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"userRoles(address)\":{\"notice\":\"Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"}},\"notice\":\"Enables the Land NFT sale via dutch auction mechanismThe proposed volume of land is approximately 100,000 plots, split amongst the 7 regions.      The volume is released over a series of staggered sales with the first sale featuring      about 20,000 land plots (tokens).Land plots are sold in sequences, each sequence groups tokens which are sold in parallel.      Sequences start selling one by one with the configurable time interval between their start.      A sequence is available for a sale for a fixed (configurable) amount of time, meaning they      can overlap (tokens from several sequences are available on sale simultaneously) if this      amount of time is bigger than interval between sequences start.The sale operates in a configurable time interval which should be aligned with the      total number of sequences, their duration, and start interval.      Sale smart contract has no idea of the total number of sequences and doesn't validate      if these timings are correctly aligned.Starting prices of the plots are defined by the plot tier in ETH, and are configurable      within the sale contract per tier ID.      Token price declines over time exponentially, price halving time is configurable.      The exponential price decline simulates the price drop requirement which may be formulates      something like \\\"the price drops by 'x' % every 'y' minutes\\\".      For example, if x = 2, and y = 1, \\\"the price drops by 2% every minute\\\", the halving      time is around 34 minutes.Sale accepts ETH and sILV as a payment currency, sILV price is supplied by on-chain      price oracle (sILV price is assumed to be equal to ILV price)The data required to mint a plot includes (see `PlotData` struct):      - token ID, defines a unique ID for the land plot used as ERC721 token ID      - sequence ID, defines the time frame when the plot is available for sale      - region ID (1 - 7), determines which tileset to use in game,      - coordinates (x, y) on the overall world map, indicating which grid position the land sits in,      - tier ID (1 - 5), the rarity of the land, tier is used to create the list of sites,      - size (w, h), defines an internal coordinate system within a plot,Since minting a plot requires at least 32 bytes of data and due to a significant      amount of plots to be minted (about 100,000), pre-storing this data on-chain      is not a viable option (2,000,000,000 of gas only to pay for the storage).      Instead, we represent the whole land plot data collection on sale as a Merkle tree      structure and store the root of the Merkle tree on-chain.      To buy a particular plot, the buyer must know the entire collection and be able to      generate and present the Merkle proof for this particular plot.The input data is a collection of `PlotData` structures; the Merkle tree is built out      from this collection, and the tree root is stored on the contract by the data manager.      When buying a plot, the buyer also specifies the Merkle proof for a plot data to mint.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/LandSale.sol\":\"LandSale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6eecf5abec3cd10b2e9234936b80b6cb7c174e926542a2fe690a0186558deb40\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x3b68fc053bbad44644adcdddff840106591364bbc0879aac5505756b67fab974\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721URIStorage_init_unchained();\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal initializer {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x41695fa16b1c8b9e8fc92315f7413ce2f5d67782290b6d785fef7143932d54a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x54b0a0b80c447749f769f37fec206cdee23e7466511802191248e95c8250ff9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/interfaces/EIP2981Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface EIP2981 is IERC165 {\\n\\t/// ERC165 bytes to add to interface array - set in parent contract\\n\\t/// implementing this standard\\n\\t///\\n\\t/// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n\\t/// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\t/// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n\\t/// @notice Called with the sale price to determine how much royalty\\n\\t//          is owed and to whom.\\n\\t/// @param _tokenId - the NFT asset queried for royalty information\\n\\t/// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n\\t/// @return receiver - address of who should be sent the royalty payment\\n\\t/// @return royaltyAmount - the royalty payment amount for _salePrice\\n\\tfunction royaltyInfo(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _salePrice\\n\\t) external view returns (\\n\\t\\taddress receiver,\\n\\t\\tuint256 royaltyAmount\\n\\t);\\n}\\n\",\"keccak256\":\"0x26dcae04caabf8b15bcb9fac3da0599685f9daf39c14c5dc5a255b5c076c18f1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3b992dc3e3220b338928bd9a7737347e35fbbdd74f8c05fe58dd7a319706caa\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title EIP-20: ERC-20 Token Standard\\n *\\n * @notice The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015,\\n *      is a Token Standard that implements an API for tokens within Smart Contracts.\\n *\\n * @notice It provides functionalities like to transfer tokens from one account to another,\\n *      to get the current token balance of an account and also the total supply of the token available on the network.\\n *      Besides these it also has some other functionalities like to approve that an amount of\\n *      token from an account can be spent by a third party account.\\n *\\n * @notice If a Smart Contract implements the following methods and events it can be called an ERC-20 Token\\n *      Contract and, once deployed, it will be responsible to keep track of the created tokens on Ethereum.\\n *\\n * @notice See https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\\n * @notice See https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface ERC20 {\\n\\t/**\\n\\t * @dev Fired in transfer(), transferFrom() to indicate that token transfer happened\\n\\t *\\n\\t * @param from an address tokens were consumed from\\n\\t * @param to an address tokens were sent to\\n\\t * @param value number of tokens transferred\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in approve() to indicate an approval event happened\\n\\t *\\n\\t * @param owner an address which granted a permission to transfer\\n\\t *      tokens on its behalf\\n\\t * @param spender an address which received a permission to transfer\\n\\t *      tokens on behalf of the owner `_owner`\\n\\t * @param value amount of tokens granted to transfer on behalf\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @return name of the token (ex.: USD Coin)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @return symbol of the token (ex.: USDC)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t *      For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t *      be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * @dev Tokens usually opt for a value of 18, imitating the relationship between\\n\\t *      Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t *      overridden;\\n\\t *\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\n\\t *      no way affects any of the arithmetic of the contract, including\\n\\t *      {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t *\\n\\t * @return token decimals\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function decimals() external view returns (uint8);\\n\\n\\t/**\\n\\t * @return the amount of tokens in existence\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Gets the balance of a particular address\\n\\t *\\n\\t * @param _owner the address to query the the balance for\\n\\t * @return balance an amount of tokens owned by the address specified\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * self address or\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transfer(address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner (transaction sender)\\n\\t *\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approve(address _spender, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n\\t *\\n\\t * @dev A function to check an amount of tokens owner approved\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\n\\t *\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n\\t *      of token owner `_owner`\\n\\t */\\n\\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x321638f81f32c1ae02609afe0ac35401bb9cf928f8eee33162451d33815959f9\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev Solidity issue #3412: The ERC721 interfaces include explicit mutability guarantees for each function.\\n *      Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure.\\n *      Implementation MUST meet the mutability guarantee in this interface and MAY meet a stronger guarantee.\\n *      For example, a payable function in this interface may be implemented as nonpayable\\n *      (no state mutability specified) in implementing contract.\\n *      It is expected a later Solidity release will allow stricter contract to inherit from this interface,\\n *      but current workaround is that we edit this interface to add stricter mutability before inheriting:\\n *      we have removed all \\\"payable\\\" modifiers.\\n *\\n * @dev The ERC-165 identifier for this interface is 0x80ac58cd.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721 is ERC165 {\\n\\t/// @dev This emits when ownership of any NFT changes by any mechanism.\\n\\t///  This event emits when NFTs are created (`from` == 0) and destroyed\\n\\t///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n\\t///  may be created and assigned without emitting Transfer. At the time of\\n\\t///  any transfer, the approved address for that NFT (if any) is reset to none.\\n\\tevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when the approved address for an NFT is changed or\\n\\t///  reaffirmed. The zero address indicates there is no approved address.\\n\\t///  When a Transfer event emits, this also indicates that the approved\\n\\t///  address for that NFT (if any) is reset to none.\\n\\tevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when an operator is enabled or disabled for an owner.\\n\\t///  The operator can manage all NFTs of the owner.\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\t/// @notice Count all NFTs assigned to an owner\\n\\t/// @dev NFTs assigned to the zero address are considered invalid, and this\\n\\t///  function throws for queries about the zero address.\\n\\t/// @param _owner An address for whom to query the balance\\n\\t/// @return The number of NFTs owned by `_owner`, possibly zero\\n\\tfunction balanceOf(address _owner) external view returns (uint256);\\n\\n\\t/// @notice Find the owner of an NFT\\n\\t/// @dev NFTs assigned to zero address are considered invalid, and queries\\n\\t///  about them do throw.\\n\\t/// @param _tokenId The identifier for an NFT\\n\\t/// @return The address of the owner of the NFT\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n\\t///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t///  `onERC721Received` on `_to` and throws if the return value is not\\n\\t///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\t/// @param _data Additional data with no specified format, sent in call to `_to`\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external /*payable*/;\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev This works identically to the other function with an extra data parameter,\\n\\t///  except this function just sets data to \\\"\\\".\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n\\t///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n\\t///  THEY MAY BE PERMANENTLY LOST\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Change or reaffirm the approved address for an NFT\\n\\t/// @dev The zero address indicates there is no approved address.\\n\\t///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n\\t///  operator of the current owner.\\n\\t/// @param _approved The new approved NFT controller\\n\\t/// @param _tokenId The NFT to approve\\n\\tfunction approve(address _approved, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t///  all of `msg.sender`'s assets\\n\\t/// @dev Emits the ApprovalForAll event. The contract MUST allow\\n\\t///  multiple operators per owner.\\n\\t/// @param _operator Address to add to the set of authorized operators\\n\\t/// @param _approved True if the operator is approved, false to revoke approval\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\t/// @notice Get the approved address for a single NFT\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT.\\n\\t/// @param _tokenId The NFT to find the approved address for\\n\\t/// @return The approved address for this NFT, or the zero address if there is none\\n\\tfunction getApproved(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Query if an address is an authorized operator for another address\\n\\t/// @param _owner The address that owns the NFTs\\n\\t/// @param _operator The address that acts on behalf of the owner\\n\\t/// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param _operator The address which called `safeTransferFrom` function\\n\\t/// @param _from The address which previously owned the token\\n\\t/// @param _tokenId The NFT identifier which is being transferred\\n\\t/// @param _data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x5b5e139f.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Metadata is ERC721 {\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\n\\tfunction name() external view returns (string memory _name);\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract\\n\\tfunction symbol() external view returns (string memory _symbol);\\n\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n\\t///  Metadata JSON Schema\\\".\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x780e9d63.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Enumerable is ERC721 {\\n\\t/// @notice Count NFTs tracked by this contract\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/// @notice Enumerate valid NFTs\\n\\t/// @dev Throws if `_index` >= `totalSupply()`.\\n\\t/// @param _index A counter less than `totalSupply()`\\n\\t/// @return The token identifier for the `_index`th NFT,\\n\\t///  (sort order not specified)\\n\\tfunction tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n\\t/// @notice Enumerate NFTs assigned to an owner\\n\\t/// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n\\t///  `_owner` is the zero address, representing invalid NFTs.\\n\\t/// @param _owner An address where we are interested in NFTs owned by them\\n\\t/// @param _index A counter less than `balanceOf(_owner)`\\n\\t/// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n\\t///   (sort order not specified)\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x53608af5a839d3fe633531870d2d2edc717c0988714b761a37ff3bd645664775\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721SpecExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title Mintable ERC721 Extension\\n *\\n * @notice Defines mint capabilities for ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface MintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n}\\n\\n/**\\n * @title Batch Mintable ERC721 Extension\\n *\\n * @notice Defines batch minting capabilities for ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface BatchMintable {\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\\n/**\\n * @title Burnable ERC721 Extension\\n *\\n * @notice Defines burn capabilities for ERC721 tokens.\\n *      This interface should be treated as a definition of what burnable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface BurnableERC721 {\\n\\t/**\\n\\t * @notice Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Should be accessible publicly by token owners.\\n\\t *      May have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) external;\\n}\\n\",\"keccak256\":\"0x52c5ceab9917821bb78f6621e4c31f56027315122c4a8ca47bae826328a2b491\",\"license\":\"MIT\"},\"contracts/interfaces/IdentifiableSpec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title Identifiable Token\\n *\\n * @notice Marker interface for the smart contracts having TOKEN_UID public property,\\n *      usually these are ERC20/ERC721/ERC1155 token smart contracts\\n *\\n * @dev TOKEN_UID is used as an enhancement to ERC165 and helps better identifying\\n *      deployed smart contracts\\n *\\n * @author Basil Gorin\\n */\\ninterface IdentifiableToken {\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t *\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t *\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t * @dev Example value: 0x0bcafe95bec2350659433fc61cb9c4fbe18719da00059d525154dfe0d6e8c8fd\\n\\t */\\n\\tfunction TOKEN_UID() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x37dbd3c6aa8d8f8d8e333e51937f30038137e33487f92a02f32b2080f2be037a\",\"license\":\"MIT\"},\"contracts/interfaces/LandERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../lib/Land.sol\\\";\\n\\n/**\\n * @title Land ERC721 Metadata\\n *\\n * @notice Defines metadata-related capabilities for LandERC721 token.\\n *      This interface should be treated as a definition of what metadata is for LandERC721,\\n *      and what operations are defined/allowed for it.\\n *\\n * @author Basil Gorin\\n */\\ninterface LandERC721Metadata {\\n\\t/**\\n\\t * @notice Presents token metadata in a well readable form,\\n\\t *      with the Internal Land Structure included, as a `PlotView` struct\\n\\t *\\n\\t * @notice Reconstructs the internal land structure of the plot based on the stored\\n\\t *      Tier ID, Plot Size, Generator Version, and Seed\\n\\t *\\n\\t * @param _tokenId token ID to query metadata view for\\n\\t * @return token metadata as a `PlotView` struct\\n\\t */\\n\\tfunction viewMetadata(uint256 _tokenId) external view returns(Land.PlotView memory);\\n\\n\\t/**\\n\\t * @notice Presents token metadata \\\"as is\\\", without the Internal Land Structure included,\\n\\t *      as a `PlotStore` struct;\\n\\t *\\n\\t * @notice Doesn't reconstruct the internal land structure of the plot, allowing to\\n\\t *      access Generator Version, and Seed fields \\\"as is\\\"\\n\\t *\\n\\t * @param _tokenId token ID to query on-chain metadata for\\n\\t * @return token metadata as a `PlotStore` struct\\n\\t */\\n\\tfunction getMetadata(uint256 _tokenId) external view returns(Land.PlotStore memory);\\n\\n\\t/**\\n\\t * @notice Verifies if token has its metadata set on-chain; for the tokens\\n\\t *      in existence metadata is immutable, it can be set once, and not updated\\n\\t *\\n\\t * @dev If `exists(_tokenId) && hasMetadata(_tokenId)` is true, `setMetadata`\\n\\t *      for such a `_tokenId` will always throw\\n\\t *\\n\\t * @param _tokenId token ID to check metadata existence for\\n\\t * @return true if token ID specified has metadata associated with it\\n\\t */\\n\\tfunction hasMetadata(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Sets/updates token metadata on-chain; same metadata struct can be then\\n\\t *      read back using `getMetadata()` function, or it can be converted to\\n\\t *      `PlotView` using `viewMetadata()` function\\n\\t *\\n\\t * @dev The metadata supplied is validated to satisfy (regionId, x, y) uniqueness;\\n\\t *      non-intersection of the sites coordinates within a plot is guaranteed by the\\n\\t *      internal land structure generator algorithm embedded into the `viewMetadata()`\\n\\t *\\n\\t * @dev Metadata for non-existing tokens can be set and updated unlimited\\n\\t *      amount of times without any restrictions (except the constraints above)\\n\\t * @dev Metadata for an existing token can only be set, it cannot be updated\\n\\t *      (`setMetadata` will throw if metadata already exists)\\n\\t *\\n\\t * @param _tokenId token ID to set/updated the metadata for\\n\\t * @param _plot token metadata to be set for the token ID\\n\\t */\\n\\tfunction setMetadata(uint256 _tokenId, Land.PlotStore memory _plot) external;\\n\\n\\t/**\\n\\t * @dev Removes token metadata\\n\\t *\\n\\t * @param _tokenId token ID to remove metadata for\\n\\t */\\n\\tfunction removeMetadata(uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Mints the token and assigns the metadata supplied\\n\\t *\\n\\t * @dev Creates new token with the token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Consider minting with `safeMint` (and setting metadata before),\\n\\t *      for the \\\"safe mint\\\" like behavior\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId token ID to mint and set metadata for\\n\\t * @param _plot token metadata to be set for the token ID\\n\\t */\\n\\tfunction mintWithMetadata(address _to, uint256 _tokenId, Land.PlotStore memory _plot) external;\\n}\\n\",\"keccak256\":\"0x58c1cca8580f3c2ab6dc6245ac16ba18902688b544a7cd7d128316afeb06817e\",\"license\":\"MIT\"},\"contracts/interfaces/PriceOracleSpec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title Pair Price Oracle, a.k.a. Pair Oracle\\n *\\n * @notice Generic interface used to consult on the Uniswap-like token pairs conversion prices;\\n *      one pair oracle is used to consult on the exchange rate within a single token pair\\n *\\n * @notice See also: https://docs.uniswap.org/protocol/V2/guides/smart-contract-integration/building-an-oracle\\n *\\n * @author Basil Gorin\\n */\\ninterface PairOracle {\\n\\t/**\\n\\t * @notice Updates the oracle with the price values if required, for example\\n\\t *      the cumulative price at the start and end of a period, etc.\\n\\t *\\n\\t * @dev This function is part of the oracle maintenance flow\\n\\t */\\n\\tfunction update() external;\\n\\n\\t/**\\n\\t * @notice For a pair of tokens A/B (sell/buy), consults on the amount of token B to be\\n\\t *      bought if the specified amount of token A to be sold\\n\\t *\\n\\t * @dev This function is part of the oracle usage flow\\n\\t *\\n\\t * @param token token A (token to sell) address\\n\\t * @param amountIn amount of token A to sell\\n\\t * @return amountOut amount of token B to be bought\\n\\t */\\n\\tfunction consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\\n}\\n\\n/**\\n * @title Oracle Registry\\n *\\n * @notice To make pair oracles more convenient to use, a more generic Oracle Registry\\n *        interface is introduced: it stores the addresses of pair price oracles and allows\\n *        searching/querying for them\\n *\\n * @author Basil Gorin\\n */\\ninterface OracleRegistry {\\n\\t/**\\n\\t * @notice Searches for the Pair Price Oracle for A/B (sell/buy) token pair\\n\\t *\\n\\t * @param tokenA token A (token to sell) address\\n\\t * @param tokenB token B (token to buy) address\\n\\t * @return pairOracle pair price oracle address for A/B token pair\\n\\t */\\n\\tfunction getOracle(address tokenA, address tokenB) external view returns(address pairOracle);\\n}\\n\\n/**\\n * @title Land Sale Oracle Interface\\n *\\n * @notice Supports the Land Sale with the ETH/ILV conversion required,\\n *       marker interface is required to support ERC165 lookups\\n *\\n * @author Basil Gorin\\n */\\ninterface LandSaleOracle {\\n\\t/**\\n\\t * @notice Powers the ETH/ILV Land token price conversion, used when\\n\\t *      selling the land for sILV to determine how much sILV to accept\\n\\t *      instead of the nominated ETH price\\n\\t *\\n\\t * @notice Note that sILV price is considered to be equal to ILV price\\n\\t *\\n\\t * @param ethOut amount of ETH sale contract is expecting to get\\n\\t * @return ilvIn amount of sILV sale contract should accept instead\\n\\t */\\n\\tfunction ethToIlv(uint256 ethOut) external returns(uint256 ilvIn);\\n}\\n\",\"keccak256\":\"0xa577aea28c0900509836d575659ab12b836740c696e7bd0f2d8bf690ed8f0811\",\"license\":\"MIT\"},\"contracts/lib/Land.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title Land Library\\n *\\n * @notice A library defining data structures related to land plots (used in Land ERC721 token),\\n *      and functions transforming these structures between view and internal (packed) representations,\\n *      in both directions.\\n *\\n * @notice Due to some limitations Solidity has (ex.: allocating array of structures in storage),\\n *      and due to the specific nature of internal land structure\\n *      (landmark and resource sites data is deterministically derived from a pseudo random seed),\\n *      it is convenient to separate data structures used to store metadata on-chain (store),\\n *      and data structures used to present metadata via smart contract ABI (view)\\n *\\n * @notice Introduces helper functions to detect and deal with the resource site collisions\\n *\\n * @author Basil Gorin\\n */\\nlibrary Land {\\n\\t/**\\n\\t * @title Resource Site View\\n\\t *\\n\\t * @notice Resource Site, bound to a coordinates (x, y) within the land plot\\n\\t *\\n\\t * @notice Resources can be of two major types, each type having three subtypes:\\n\\t *      - Element (Carbon, Silicon, Hydrogen), or\\n\\t *      - Fuel (Crypton, Hyperion, Solon)\\n\\t *\\n\\t * @dev View only structure, used in public API/ABI, not used in on-chain storage\\n\\t */\\n\\tstruct Site {\\n\\t\\t/**\\n\\t\\t * @dev Site type:\\n\\t\\t *        1) Carbon (element),\\n\\t\\t *        2) Silicon (element),\\n\\t\\t *        3) Hydrogen (element),\\n\\t\\t *        4) Crypton (fuel),\\n\\t\\t *        5) Hyperion (fuel),\\n\\t\\t *        6) Solon (fuel)\\n\\t\\t */\\n\\t\\tuint8 typeId;\\n\\n\\t\\t/**\\n\\t\\t * @dev x-coordinate within a plot\\n\\t\\t */\\n\\t\\tuint8 x;\\n\\n\\t\\t/**\\n\\t\\t * @dev y-coordinate within a plot\\n\\t\\t */\\n\\t\\tuint8 y;\\n\\t}\\n\\n\\t/**\\n\\t * @title Land Plot View\\n\\t *\\n\\t * @notice Land Plot, bound to a coordinates (x, y) within the region,\\n\\t *      with a rarity defined by the tier ID, sites, and (optionally)\\n\\t *      a landmark, positioned on the internal coordinate grid of the\\n\\t *      specified size within a plot.\\n\\t *\\n\\t * @notice Land plot coordinates and rarity are predefined (stored off-chain).\\n\\t *      Number of sites (and landmarks - 0/1) is defined by the land rarity.\\n\\t *      Positions of sites, types of sites/landmark are randomized and determined\\n\\t *      upon land plot creation.\\n\\t *\\n\\t * @dev View only structure, used in public API/ABI, not used in on-chain storage\\n\\t */\\n\\tstruct PlotView {\\n\\t\\t/**\\n\\t\\t * @dev Region ID defines the region on the map in IZ:\\n\\t\\t *        1) Abyssal Basin\\n\\t\\t *        2) Brightland Steppes\\n\\t\\t *        3) Shardbluff Labyrinth\\n\\t\\t *        4) Crimson Waste\\n\\t\\t *        5) Halcyon Sea\\n\\t\\t *        6) Taiga Boreal\\n\\t\\t *        7) Crystal Shores\\n\\t\\t */\\n\\t\\tuint16 regionId;\\n\\n\\t\\t/**\\n\\t\\t * @dev x-coordinate within the region\\n\\t\\t */\\n\\t\\tuint16 x;\\n\\n\\t\\t/**\\n\\t\\t * @dev y-coordinate within the region\\n\\t\\t */\\n\\t\\tuint16 y;\\n\\n\\t\\t/**\\n\\t\\t * @dev Tier ID defines land rarity and number of sites within the plot\\n\\t\\t */\\n\\t\\tuint16 tierId;\\n\\n\\t\\t/**\\n\\t\\t * @dev Plot size, limits the (x, y) coordinates for the sites\\n\\t\\t */\\n\\t\\tuint16 size;\\n\\n\\t\\t/**\\n\\t\\t * @dev Landmark Type ID:\\n\\t\\t *        0) no Landmark\\n\\t\\t *        1) Carbon Landmark,\\n\\t\\t *        2) Silicon Landmark,\\n\\t\\t *        3) Hydrogen Landmark (Eternal Spring),\\n\\t\\t *        4) Crypton Landmark,\\n\\t\\t *        5) Hyperion Landmark,\\n\\t\\t *        6) Solon Landmark (Fallen Star),\\n\\t\\t *        7) Arena\\n\\t\\t *\\n\\t\\t * @dev Landmark is always positioned in the center of internal grid\\n\\t\\t */\\n\\t\\tuint16 landmarkTypeId;\\n\\n\\t\\t/**\\n\\t\\t * @dev Element/fuel sites within the plot\\n\\t\\t */\\n\\t\\tSite[] sites;\\n\\t}\\n\\n\\t/**\\n\\t * @title Land Plot Store\\n\\t *\\n\\t * @notice Land Plot data structure as it is stored on-chain\\n\\t *\\n\\t * @notice Contains same data as `Plot` struct does\\n\\t *      - `region | y | x | tierId | size`, concatenated into a single uint96 field\\n\\t *      - array of sites, each site is `typeId | y | x`, concatenated into a single uint24 field\\n\\t *\\n\\t * @dev On-chain only structure, not used in public API/ABI\\n\\t */\\n\\tstruct PlotStore {\\n\\t\\t/**\\n\\t\\t * @dev Region ID defines the region on the map in IZ:\\n\\t\\t *        1) Abyssal Basin\\n\\t\\t *        2) Brightland Steppes\\n\\t\\t *        3) Shardbluff Labyrinth\\n\\t\\t *        4) Crimson Waste\\n\\t\\t *        5) Halcyon Sea\\n\\t\\t *        6) Taiga Boreal\\n\\t\\t *        7) Crystal Shores\\n\\t\\t */\\n\\t\\tuint16 regionId;\\n\\n\\t\\t/**\\n\\t\\t * @dev x-coordinate within the region\\n\\t\\t */\\n\\t\\tuint16 x;\\n\\n\\t\\t/**\\n\\t\\t * @dev y-coordinate within the region\\n\\t\\t */\\n\\t\\tuint16 y;\\n\\n\\t\\t/**\\n\\t\\t * @dev Tier ID defines land rarity and number of sites within the plot\\n\\t\\t */\\n\\t\\tuint16 tierId;\\n\\n\\t\\t/**\\n\\t\\t * @dev Plot Size, limits the (x, y) coordinates for the sites\\n\\t\\t */\\n\\t\\tuint16 size;\\n\\n\\t\\t/**\\n\\t\\t * @dev Generator Version, reserved for the future use in order to tweak the\\n\\t\\t *      behavior of the internal land structure algorithm\\n\\t\\t */\\n\\t\\tuint16 version;\\n\\n\\t\\t/**\\n\\t\\t * @dev Pseudo-random Seed to generate Internal Land Structure\\n\\t\\t */\\n\\t\\tuint160 seed;\\n\\t}\\n\\n\\n\\t/**\\n\\t * @dev Expands `PlotStore` data struct into a `PlotView` view struct\\n\\t *\\n\\t * @dev Derives Internal Land Structure from Tier ID, Plot Size, and Seed,\\n\\t *      Generator Version is not currently used\\n\\t *\\n\\t * @param store internal plot data structure to expand\\n\\t * @return `PlotView` view struct, expanded from the input data\\n\\t */\\n\\tfunction plotView(PlotStore memory store) internal pure returns(PlotView memory) {\\n\\t\\t// define landmark and sites array variables\\n\\t\\tuint8 landmarkTypeId;\\n\\t\\tLand.Site[] memory sites;\\n\\n\\t\\t// derive the landmark and sites from Seed, tier ID, and Plot Size\\n\\t\\t(landmarkTypeId, sites) = getInternalStructure(store.seed, uint8(store.tierId), uint8(store.size));\\n\\n\\t\\t// split the `PlotStore` into pieces using the bitwise arithmetic and\\n\\t\\t// return the result as a `Plot` structure\\n\\t\\treturn PlotView({\\n\\t\\t\\tlandmarkTypeId: landmarkTypeId,\\n\\t\\t\\ttierId:         store.tierId,\\n\\t\\t\\tsize:           store.size,\\n\\t\\t\\tregionId:       store.regionId,\\n\\t\\t\\ty:              store.y,\\n\\t\\t\\tx:              store.x,\\n\\t\\t\\tsites:          sites\\n\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t * @dev Based on the random seed, tier ID, and plot size, determines the\\n\\t *      internal land structure (landmark type and sites)\\n\\t *\\n\\t * @dev Function works in a deterministic way and derives the same data\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\n\\t *\\n\\t * @param seed random seed to consume and derive the internal structure\\n\\t * @param tierId tier ID of the land plot to derive internal structure for\\n\\t * @param plotSize size of the land plot to derive internal structure for\\n\\t * @return landmarkTypeId randomized landmark type ID\\n\\t * @return sites randomized array of land sites\\n\\t */\\n\\tfunction getInternalStructure(\\n\\t\\tuint256 seed,\\n\\t\\tuint8 tierId,\\n\\t\\tuint8 plotSize\\n\\t) internal pure returns(uint8 landmarkTypeId, Land.Site[] memory sites) {\\n\\t\\t// determine the landmark, possibly consuming the rnd256\\n\\t\\tlandmarkTypeId = getLandmark(seed, tierId);\\n\\n\\t\\t// determine number of element sites based on the tier ID\\n\\t\\tuint8 elementSites = 3 * tierId;\\n\\t\\t// determine number of fuel sites based on the tier ID\\n\\t\\t// and immediately derive total number of sites\\n\\t\\tuint8 totalSites = elementSites + (tierId < 2? tierId: 3 * (tierId - 1));\\n\\n\\t\\t// allocate temporary array to store (and determine) sites' coordinates\\n\\t\\tuint16[] memory coords = new uint16[](totalSites);\\n\\n\\t\\t// transform coordinate system (1): (x, y) => (x / 2, y / 2)\\n\\t\\tuint8 size = plotSize / 2;\\n\\t\\t// transform coordinate system (2): reduce grid size to be multiple of 2\\n\\t\\tsize = size / 2 * 2;\\n\\n\\t\\t// define coordinate system: isomorphic grid on a square of size [size, size]\\n\\t\\t// transform coordinate system (3): pack isomorphic grid on a rectangle of size [size, 1 + size / 2]\\n\\t\\t// transform coordinate system (4): (x, y) -> y * size + x (two-dimensional Cartesian -> one-dimensional segment)\\n\\t\\t// generate site coordinates in a transformed coordinate system (on a one-dimensional segment)\\n\\t\\tfillCoords(seed, coords, uint16(size) * (1 + size / 2));\\n\\n\\t\\t// allocate number of sites required\\n\\t\\tsites = new Land.Site[](totalSites);\\n\\n\\t\\t// define the variables used inside the loop outside the loop to help compiler optimizations\\n\\t\\t// site type ID\\n\\t\\tuint8 typeId;\\n\\t\\t// site coordinates (x, y)\\n\\t\\tuint8 x;\\n\\t\\tuint8 y;\\n\\n\\t\\t// determine the element and fuel sites one by one\\n\\t\\tfor(uint8 i = 0; i < totalSites; i++) {\\n\\t\\t\\t// determine next random number in the sequence, and random site type from it\\n\\t\\t\\t(seed, typeId) = nextRndUint8(seed, i < elementSites? 1:  4, 3);\\n\\n\\t\\t\\t// determine x and y\\n\\t\\t\\t// reverse transform coordinate system (4): x = size % i, y = size / i\\n\\t\\t\\t// (back from one-dimensional segment to two-dimensional Cartesian)\\n\\t\\t\\tx = uint8(coords[i] % size);\\n\\t\\t\\ty = uint8(coords[i] / size);\\n\\n\\t\\t\\t// reverse transform coordinate system (3): unpack isomorphic grid onto a square of size [size, size]\\n\\t\\t\\t// fix the \\\"(0, 0) left-bottom corner\\\" of the isomorphic grid\\n\\t\\t\\tif(x + y < size / 2) {\\n\\t\\t\\t\\tx += size / 2;\\n\\t\\t\\t\\ty += 1 + size / 2;\\n\\t\\t\\t}\\n\\t\\t\\t// fix the \\\"(size, 0) right-bottom corner\\\" of the isomorphic grid\\n\\t\\t\\telse if(x >= size / 2 && x >= y + size / 2) {\\n\\t\\t\\t\\tx -= size / 2;\\n\\t\\t\\t\\ty += 1 + size / 2;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// based on the determined site type and coordinates, allocate the site\\n\\t\\t\\tsites[i] = Land.Site({\\n\\t\\t\\ttypeId: typeId,\\n\\t\\t\\t\\t// reverse transform coordinate system (2): shift (x, y) => (x + 1, y + 1) if grid size was reduced\\n\\t\\t\\t\\t// reverse transform coordinate system (1): (x, y) => (2 * x, 2 * y)\\n\\t\\t\\t\\tx: x * 2 + plotSize / 2 % 2,\\n\\t\\t\\t\\ty: y * 2 + plotSize / 2 % 2\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Based on the random seed and tier ID determines the landmark type of the plot.\\n\\t *      Random seed is consumed for tiers 3 and 4 to randomly determine one of three\\n\\t *      possible landmark types.\\n\\t *      Tier 5 has its landmark type predefined (arena), lower tiers don't have a landmark.\\n\\t *\\n\\t * @dev Function works in a deterministic way and derives the same data\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\n\\t *\\n\\t * @param seed random seed to consume and derive the landmark type based on\\n\\t * @param tierId tier ID of the land plot\\n\\t * @return landmarkTypeId landmark type defined by its ID\\n\\t */\\n\\tfunction getLandmark(uint256 seed, uint8 tierId) internal pure returns(uint8 landmarkTypeId) {\\n\\t\\t// depending on the tier, land plot can have a landmark\\n\\t\\t// tier 3 has an element landmark (1, 2, 3)\\n\\t\\tif(tierId == 3) {\\n\\t\\t\\t// derive random element landmark\\n\\t\\t\\treturn uint8(1 + seed % 3);\\n\\t\\t}\\n\\t\\t// tier 4 has a fuel landmark (4, 5, 6)\\n\\t\\tif(tierId == 4) {\\n\\t\\t\\t// derive random fuel landmark\\n\\t\\t\\treturn uint8(4 + seed % 3);\\n\\t\\t}\\n\\t\\t// tier 5 has an arena landmark\\n\\t\\tif(tierId == 5) {\\n\\t\\t\\t// 7 - arena landmark\\n\\t\\t\\treturn 7;\\n\\t\\t}\\n\\n\\t\\t// lower tiers (0, 1, 2) don't have any landmark\\n\\t\\t// tiers greater than 5 are not defined\\n\\t\\treturn 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fills in an array of integers with no duplicates from the random seed;\\n\\t *      each element in the array is within [0, size) bounds and represents\\n\\t *      a two-dimensional Cartesian coordinate point (x, y) presented as one-dimensional\\n\\t *\\n\\t * @dev Function works in a deterministic way and derives the same data\\n\\t *      for the same inputs; the term \\\"random\\\" in comments means \\\"pseudo-random\\\"\\n\\t *\\n\\t * @dev The input seed is considered to be already used to derive some random value\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\n\\t *      value is derived from it\\n\\t */\\n\\t// TODO: leave the free space in the center for a landmark\\n\\tfunction fillCoords(uint256 seed, uint16[] memory coords, uint16 size) internal pure returns(uint256 nextSeed) {\\n\\t\\t// generate site coordinates one by one\\n\\t\\tfor(uint8 i = 0; i < coords.length; i++) {\\n\\t\\t\\t// get next number and update the seed\\n\\t\\t\\t(seed, coords[i]) = nextRndUint16(seed, 0, size);\\n\\t\\t}\\n\\n\\t\\t// sort the coordinates\\n\\t\\tLand.sort(coords);\\n\\n\\t\\t// if there are any duplicates\\n\\t\\tif(!Land.unique(coords)) {\\n\\t\\t\\t// regenerate the whole thing\\n\\t\\t\\t// TODO: can we improve the coinciding sites fix algorithm?\\n\\t\\t\\treturn fillCoords(seed, coords, size);\\n\\t\\t}\\n\\n\\t\\t// return the updated and used seed\\n\\t\\treturn seed;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Based on the random seed, generates next random seed, and a random value\\n\\t *      not lower than given `offset` value and able to have `options` different\\n\\t *      possible values\\n\\t *\\n\\t * @dev The input seed is considered to be already used to derive some random value\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\n\\t *      value is derived from it\\n\\t */\\n\\tfunction nextRndUint8(\\n\\t\\tuint256 seed,\\n\\t\\tuint8 offset,\\n\\t\\tuint8 options\\n\\t) internal pure returns(\\n\\t\\tuint256 nextSeed,\\n\\t\\tuint8 rndVal\\n\\t) {\\n\\t\\t// generate next random seed first\\n\\t\\tnextSeed = uint256(keccak256(abi.encodePacked(seed)));\\n\\n\\t\\t// derive random value with the desired properties from\\n\\t\\t// the newly generated seed\\n\\t\\trndVal = offset + uint8(nextSeed % options);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Based on the random seed, generates next random seed, and a random value\\n\\t *      not lower than given `offset` value and able to have `options` different\\n\\t *      possible values\\n\\t *\\n\\t * @dev The input seed is considered to be already used to derive some random value\\n\\t *      from it, therefore the function derives a new one by hashing the previous one\\n\\t *      before generating the random value; the output seed is \\\"used\\\" - output random\\n\\t *      value is derived from it\\n\\t */\\n\\tfunction nextRndUint16(\\n\\t\\tuint256 seed,\\n\\t\\tuint16 offset,\\n\\t\\tuint16 options\\n\\t) internal pure returns(\\n\\t\\tuint256 nextSeed,\\n\\t\\tuint16 rndVal\\n\\t) {\\n\\t\\t// generate next random seed first\\n\\t\\tnextSeed = uint256(keccak256(abi.encodePacked(seed)));\\n\\n\\t\\t// derive random value with the desired properties from\\n\\t\\t// the newly generated seed\\n\\t\\trndVal = offset + uint16(nextSeed % options);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Plot location is a combination of (regionId, x, y), it's effectively\\n\\t *      a 3-dimensional coordinate, unique for each plot\\n\\t *\\n\\t * @dev The function extracts plot location from the plot and represents it\\n\\t *      in a packed form of 3 integers constituting the location: regionId | x | y\\n\\t *\\n\\t * @param plot `PlotView` view structure to extract location from\\n\\t * @return Plot location (regionId, x, y) as a packed integer\\n\\t */\\n\\tfunction loc(PlotView memory plot) internal pure returns(uint48) {\\n\\t\\t// tightly pack the location data and return\\n\\t\\treturn uint48(plot.regionId) << 32 | uint32(plot.y) << 16 | plot.x;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Plot location is a combination of (regionId, x, y), it's effectively\\n\\t *      a 3-dimensional coordinate, unique for each plot\\n\\t *\\n\\t * @dev The function extracts plot location from the plot and represents it\\n\\t *      in a packed form of 3 integers constituting the location: regionId | x | y\\n\\t *\\n\\t * @param plot `PlotStore` data store structure to extract location from\\n\\t * @return Plot location (regionId, x, y) as a packed integer\\n\\t */\\n\\tfunction loc(PlotStore memory plot) internal pure returns(uint48) {\\n\\t\\t// tightly pack the location data and return\\n\\t\\treturn uint48(plot.regionId) << 32 | uint32(plot.y) << 16 | plot.x;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Site location is a combination of (x, y), unique for each site within a plot\\n\\t *\\n\\t * @dev The function extracts site location from the site and represents it\\n\\t *      in a packed form of 2 integers constituting the location: x | y\\n\\t *\\n\\t * @param site `Site` view structure to extract location from\\n\\t * @return Site location (x, y) as a packed integer\\n\\t */\\n\\tfunction loc(Site memory site) internal pure returns(uint16) {\\n\\t\\t// tightly pack the location data and return\\n\\t\\treturn uint16(site.y) << 8 | site.x;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if there are no repeating elements in the array\\n\\t *\\n\\t * @dev Assumes the array is sorted ascending:\\n\\t *      returns true if array is strictly monotonically increasing, false otherwise\\n\\t *\\n\\t * @param arr an array of elements to check\\n\\t * @return true if there are no repeating elements, false otherwise\\n\\t */\\n\\tfunction unique(uint16[] memory arr) internal pure returns (bool) {\\n\\t\\t// iterate over the array [1, n], leaving the space in the beginning for pair comparison\\n\\t\\tfor(uint256 i = 1; i < arr.length; i++) {\\n\\t\\t\\t// verify if there is a strict monotonically increase violation\\n\\t\\t\\tif(arr[i - 1] >= arr[i]) {\\n\\t\\t\\t\\t// return false if yes\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// return true if no violation was found - array is strictly monotonically increasing\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sorts an array of integers using quick sort algorithm\\n\\t *\\n\\t * @dev Quick sort recursive implementation\\n\\t *      Source:   https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f\\n\\t *      See also: https://www.geeksforgeeks.org/quick-sort/\\n\\t *\\n\\t * @param arr an array to sort\\n\\t */\\n\\tfunction sort(uint16[] memory arr) internal pure {\\n\\t\\tquickSort(arr, 0, int256(arr.length - 1));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Quick sort recursive implementation\\n\\t *      Source:   https://gist.github.com/subhodi/b3b86cc13ad2636420963e692a4d896f\\n\\t *      See also: https://www.geeksforgeeks.org/quick-sort/\\n\\t */\\n\\t// TODO: review the implementation code\\n\\tfunction quickSort(uint16[] memory arr, int256 left, int256 right) internal pure {\\n\\t\\tint256 i = left;\\n\\t\\tint256 j = right;\\n\\t\\t// TODO: remove?\\n/*\\n\\t\\tif(i == j) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n*/\\n\\t\\tuint16 pivot = arr[uint256(left + (right - left) / 2)];\\n\\t\\twhile(i <= j) {\\n\\t\\t\\twhile(arr[uint256(i)] < pivot) {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\twhile(pivot < arr[uint256(j)]) {\\n\\t\\t\\t\\tj--;\\n\\t\\t\\t}\\n\\t\\t\\tif(i <= j) {\\n\\t\\t\\t\\t(arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t\\tj--;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(left < j) {\\n\\t\\t\\tquickSort(arr, left, j);\\n\\t\\t}\\n\\t\\tif(i < right) {\\n\\t\\t\\tquickSort(arr, i, right);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xbaf9b06fb2bde1837bd6a2d30deb4e442c9adc4a096154dde49660d11e93fd2d\",\"license\":\"MIT\"},\"contracts/protocol/LandSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/ERC20Spec.sol\\\";\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../interfaces/IdentifiableSpec.sol\\\";\\nimport \\\"../interfaces/PriceOracleSpec.sol\\\";\\nimport \\\"../lib/Land.sol\\\";\\nimport \\\"../token/LandERC721.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title Land Sale\\n *\\n * @notice Enables the Land NFT sale via dutch auction mechanism\\n *\\n * @notice The proposed volume of land is approximately 100,000 plots, split amongst the 7 regions.\\n *      The volume is released over a series of staggered sales with the first sale featuring\\n *      about 20,000 land plots (tokens).\\n *\\n * @notice Land plots are sold in sequences, each sequence groups tokens which are sold in parallel.\\n *      Sequences start selling one by one with the configurable time interval between their start.\\n *      A sequence is available for a sale for a fixed (configurable) amount of time, meaning they\\n *      can overlap (tokens from several sequences are available on sale simultaneously) if this\\n *      amount of time is bigger than interval between sequences start.\\n *\\n * @notice The sale operates in a configurable time interval which should be aligned with the\\n *      total number of sequences, their duration, and start interval.\\n *      Sale smart contract has no idea of the total number of sequences and doesn't validate\\n *      if these timings are correctly aligned.\\n *\\n * @notice Starting prices of the plots are defined by the plot tier in ETH, and are configurable\\n *      within the sale contract per tier ID.\\n *      Token price declines over time exponentially, price halving time is configurable.\\n *      The exponential price decline simulates the price drop requirement which may be formulates\\n *      something like \\\"the price drops by 'x' % every 'y' minutes\\\".\\n *      For example, if x = 2, and y = 1, \\\"the price drops by 2% every minute\\\", the halving\\n *      time is around 34 minutes.\\n *\\n * @notice Sale accepts ETH and sILV as a payment currency, sILV price is supplied by on-chain\\n *      price oracle (sILV price is assumed to be equal to ILV price)\\n *\\n * @notice The data required to mint a plot includes (see `PlotData` struct):\\n *      - token ID, defines a unique ID for the land plot used as ERC721 token ID\\n *      - sequence ID, defines the time frame when the plot is available for sale\\n *      - region ID (1 - 7), determines which tileset to use in game,\\n *      - coordinates (x, y) on the overall world map, indicating which grid position the land sits in,\\n *      - tier ID (1 - 5), the rarity of the land, tier is used to create the list of sites,\\n *      - size (w, h), defines an internal coordinate system within a plot,\\n *\\n * @notice Since minting a plot requires at least 32 bytes of data and due to a significant\\n *      amount of plots to be minted (about 100,000), pre-storing this data on-chain\\n *      is not a viable option (2,000,000,000 of gas only to pay for the storage).\\n *      Instead, we represent the whole land plot data collection on sale as a Merkle tree\\n *      structure and store the root of the Merkle tree on-chain.\\n *      To buy a particular plot, the buyer must know the entire collection and be able to\\n *      generate and present the Merkle proof for this particular plot.\\n *\\n * @notice The input data is a collection of `PlotData` structures; the Merkle tree is built out\\n *      from this collection, and the tree root is stored on the contract by the data manager.\\n *      When buying a plot, the buyer also specifies the Merkle proof for a plot data to mint.\\n *\\n * @dev Merkle proof verification is based on OpenZeppelin implementation, see\\n *      https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof\\n *\\n * @author Basil Gorin\\n */\\ncontract LandSale is AccessControl {\\n\\t// Use Zeppelin MerkleProof Library to verify Merkle proofs\\n\\tusing MerkleProof for bytes32[];\\n\\n\\t/**\\n\\t * @notice Data structure modeling the data entry required to mint a single plot.\\n\\t *      The contract is initialized with the Merkle root of the plots collection Merkle tree.\\n\\t * @dev When buying a plot this data structure must be supplied together with the\\n\\t *      Merkle proof allowing to verify the plot data belongs to the original collection.\\n\\t */\\n\\tstruct PlotData {\\n\\t\\t/// @dev Token ID, defines a unique ID for the land plot used as ERC721 token ID\\n\\t\\tuint32 tokenId;\\n\\t\\t/// @dev Sequence ID, defines the time frame when the plot is available for sale\\n\\t\\tuint32 sequenceId;\\n\\t\\t/// @dev Region ID defines the region on the map in IZ\\n\\t\\tuint16 regionId;\\n\\t\\t/// @dev x-coordinate within the region plot\\n\\t\\tuint16 x;\\n\\t\\t/// @dev y-coordinate within the region plot\\n\\t\\tuint16 y;\\n\\t\\t/// @dev Tier ID defines land rarity and number of sites within the plot\\n\\t\\tuint16 tierId;\\n\\t\\t/// @dev Plot size, limits the (x, y) coordinates for the sites\\n\\t\\tuint16 size;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Deployed LandERC721 token address to mint tokens of\\n\\t *      (when they are bought via the sale)\\n\\t */\\n\\taddress public immutable targetNftContract;\\n\\n\\t/**\\n\\t * @notice Deployed sILV (Escrowed Illuvium) ERC20 token address,\\n\\t *      accepted as a payment option alongside ETH\\n\\t * @dev Note: sILV ERC20 implementation never returns \\\"false\\\" on transfers,\\n\\t *      it throws instead; we don't use any additional libraries like SafeERC20\\n\\t *      to transfer sILV therefore\\n\\t */\\n\\taddress public immutable sIlvContract;\\n\\n\\t/**\\n\\t * @notice Land Sale Price Oracle is used to convert the token prices from USD\\n\\t *      to ETH or sILV (ILV)\\n\\t */\\n\\taddress public immutable priceOracle;\\n\\n\\t/**\\n\\t * @notice Input data root, Merkle tree root for the collection of plot data elements,\\n\\t *      available on sale\\n\\t *\\n\\t * @notice Merkle root effectively \\\"compresses\\\" the (potentially) huge collection of elements\\n\\t *      and allows to store it in a single 256-bits storage slot on-chain\\n\\t */\\n\\tbytes32 public root;\\n\\n\\t/**\\n\\t * @dev Sale start unix timestamp, this is the time when sale activates,\\n\\t *      the time when the first sequence sale starts, that is\\n\\t *      when tokens of the first sequence become available on sale\\n\\t * @dev The sale is active after the start (inclusive)\\n\\t */\\n\\tuint32 public saleStart;\\n\\n\\t/**\\n\\t * @dev Sale end unix timestamp, this is the time when sale deactivates,\\n\\t *      and tokens of the last sequence become unavailable\\n\\t * @dev The sale is active before the end (exclusive)\\n\\t */\\n\\tuint32 public saleEnd;\\n\\n\\t/**\\n\\t * @dev Price halving time, the time required for a token price to reduce to the\\n\\t *      half of its initial value\\n\\t * @dev Defined in seconds\\n\\t */\\n\\tuint32 public halvingTime;\\n\\n\\t/**\\n\\t * @dev Time flow quantum, price update interval, used by the price calculation algorithm,\\n\\t *      the time is rounded down to be multiple of quantum when performing price calculations;\\n\\t *      setting this value to one effectively disables its effect;\\n\\t * @dev Defined in seconds\\n\\t */\\n\\tuint32 public timeFlowQuantum;\\n\\n\\t/**\\n\\t * @dev Sequence duration, time limit of how long a token / sequence can be available\\n\\t *      for sale, first sequence stops selling at `saleStart + seqDuration`, second\\n\\t *      sequence stops selling at `saleStart + seqOffset + seqDuration`, and so on\\n\\t * @dev Defined in seconds\\n\\t */\\n\\tuint32 public seqDuration;\\n\\n\\t/**\\n\\t * @dev Sequence start offset, first sequence starts selling at `saleStart`,\\n\\t *      second sequence starts at `saleStart + seqOffset`, third at\\n\\t *      `saleStart + 2 * seqOffset` and so on at `saleStart + n * seqOffset`,\\n\\t *      where `n` is zero-based sequence ID\\n\\t * @dev Defined in seconds\\n\\t */\\n\\tuint32 public seqOffset;\\n\\n\\t/**\\n\\t * @dev Tier start prices, starting token price for each (zero based) Tier ID,\\n\\t *      defined in ETH, can be converted into sILV via Uniswap/Sushiswap price oracle,\\n\\t *      sILV price is defined to be equal to ILV price\\n\\t */\\n\\tuint96[] public startPrices;\\n\\n\\t/**\\n\\t * @dev Sale beneficiary address, if set - used to send funds obtained from the sale;\\n\\t *      If not set - contract accumulates the funds on its own deployed address\\n\\t */\\n\\taddress payable public beneficiary;\\n\\n\\t/**\\n\\t * @notice Enables the sale, buying tokens public function\\n\\t *\\n\\t * @dev Feature FEATURE_SALE_ACTIVE must be enabled in order for\\n\\t *      `buy()` function to be able to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_SALE_ACTIVE = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Data manager is responsible for supplying the valid input plot data collection\\n\\t *      Merkle root which then can be used to mint tokens, meaning effectively,\\n\\t *      that data manager may act as a minter on the target NFT contract\\n\\t *\\n\\t * @dev Role ROLE_DATA_MANAGER allows setting the Merkle tree root via setInputDataRoot()\\n\\t */\\n\\tuint32 public constant ROLE_DATA_MANAGER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Sale manager is responsible for sale initialization:\\n\\t *      setting up sale start/end, halving time, sequence params, and starting prices\\n\\t *\\n\\t * @dev  Role ROLE_SALE_MANAGER allows sale initialization via initialize()\\n\\t */\\n\\tuint32 public constant ROLE_SALE_MANAGER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice Withdrawal manager is responsible for withdrawing funds obtained in sale\\n\\t *      from the sale smart contract via pull/push mechanisms:\\n\\t *      1) Pull: no pre-setup is required, withdrawal manager executes the\\n\\t *         withdraw function periodically to withdraw funds\\n\\t *      2) Push: withdrawal manager sets the `beneficiary` address which is used\\n\\t *         by the smart contract to send funds to when users purchase land NFTs\\n\\t *\\n\\t * @dev Role ROLE_WITHDRAWAL_MANAGER allows to set the `beneficiary` address via\\n\\t *      - setBeneficiary()\\n\\t * @dev Role ROLE_WITHDRAWAL_MANAGER allows pull withdrawals of funds:\\n\\t *      - withdraw()\\n\\t *      - withdrawTo()\\n\\t */\\n\\tuint32 public constant ROLE_WITHDRAWAL_MANAGER = 0x0004_0000;\\n\\n\\t/**\\n\\t * @notice People do mistake and may send ERC20 tokens by mistake; since\\n\\t *      NFT smart contract is not designed to accept and hold any ERC20 tokens,\\n\\t *      it allows the rescue manager to \\\"rescue\\\" such lost tokens\\n\\t *\\n\\t * @notice Rescue manager is responsible for \\\"rescuing\\\" ERC20 tokens accidentally\\n\\t *      sent to the smart contract, except the sILV which is a payment token\\n\\t *      and can be withdrawn by the withdrawal manager only\\n\\t *\\n\\t * @dev Role ROLE_RESCUE_MANAGER allows withdrawing any ERC20 tokens stored\\n\\t *      on the smart contract balance\\n\\t */\\n\\tuint32 public constant ROLE_RESCUE_MANAGER = 0x0008_0000;\\n\\n\\t/**\\n\\t * @dev Fired in setInputDataRoot()\\n\\t *\\n\\t * @param _by an address which executed the operation\\n\\t * @param _root new Merkle root value\\n\\t */\\n\\tevent RootChanged(address indexed _by, bytes32 _root);\\n\\n\\t/**\\n\\t * @dev Fired in initialize()\\n\\t *\\n\\t * @param _by an address which executed the operation\\n\\t * @param _saleStart sale start time, and first sequence start time\\n\\t * @param _saleEnd sale end time, should match with the last sequence end time\\n\\t * @param _halvingTime price halving time, the time required for a token price\\n\\t *      to reduce to the half of its initial value\\n\\t * @param _timeFlowQuantum time flow quantum, price update interval, used by\\n\\t *      the price calculation algorithm to update prices\\n\\t * @param _seqDuration sequence duration, time limit of how long a token / sequence\\n\\t *      can be available for sale\\n\\t * @param _seqOffset sequence start offset, each sequence starts `_seqOffset`\\n\\t *      later after the previous one\\n\\t * @param _startPrices tier start prices, starting token price for each (zero based) Tier ID\\n\\t */\\n\\tevent Initialized(\\n\\t\\taddress indexed _by,\\n\\t\\tuint32 _saleStart,\\n\\t\\tuint32 _saleEnd,\\n\\t\\tuint32 _halvingTime,\\n\\t\\tuint32 _timeFlowQuantum,\\n\\t\\tuint32 _seqDuration,\\n\\t\\tuint32 _seqOffset,\\n\\t\\tuint96[] _startPrices\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in setBeneficiary\\n\\t *\\n\\t * @param _by an address which executed the operation\\n\\t * @param _beneficiary new beneficiary address or zero-address\\n\\t */\\n\\tevent BeneficiaryUpdated(address indexed _by, address indexed _beneficiary);\\n\\n\\t/**\\n\\t * @dev Fired in withdraw() and withdrawTo()\\n\\t *\\n\\t * @param _by an address which executed the operation\\n\\t * @param _to an address which received the funds withdrawn\\n\\t * @param _eth amount of ETH withdrawn\\n\\t * @param _sIlv amount of sILV withdrawn\\n\\t */\\n\\tevent Withdrawn(address indexed _by, address indexed _to, uint256 _eth, uint256 _sIlv);\\n\\n\\t/**\\n\\t * @dev Fired in buy()\\n\\t *\\n\\t * @param _by an address which had bought the plot\\n\\t * @param _plotData off-chain plot metadata supplied externally\\n\\t * @param _plot on-chain plot metadata minted token (contains seed)\\n\\t * @param _eth ETH price of the lot\\n\\t * @param _sIlv sILV price of the lot (zero if paid in ETH)\\n\\t */\\n\\tevent PlotBought(address indexed _by, PlotData _plotData, Land.PlotStore _plot, uint256 _eth, uint256 _sIlv);\\n\\n\\t/**\\n\\t * @dev Creates/deploys sale smart contract instance and binds it to\\n\\t *      1) the target NFT smart contract address to be used to mint tokens (Land ERC721),\\n\\t *      2) sILV (Escrowed Illuvium) contract address to be used as one of the payment options\\n\\t *      3) Price Oracle contract address to be used to determine ETH/sILV price\\n\\t *\\n\\t * @param _nft target NFT smart contract address\\n\\t * @param _sIlv sILV (Escrowed Illuvium) contract address\\n\\t * @param _oracle price oracle contract address\\n\\t */\\n\\tconstructor(address _nft, address _sIlv, address _oracle) AccessControl(msg.sender) {\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(_nft != address(0), \\\"target contract is not set\\\");\\n\\t\\trequire(_sIlv != address(0), \\\"sILV contract is not set\\\");\\n\\t\\trequire(_oracle != address(0), \\\"oracle address is not set\\\");\\n\\n\\t\\t// verify the inputs are valid smart contracts of the expected interfaces\\n\\t\\trequire(\\n\\t\\t\\tIERC165(_nft).supportsInterface(type(ERC721).interfaceId)\\n\\t\\t\\t&& IERC165(_nft).supportsInterface(type(MintableERC721).interfaceId)\\n\\t\\t\\t&& IERC165(_nft).supportsInterface(type(LandERC721Metadata).interfaceId),\\n\\t\\t\\t\\\"unexpected target type\\\"\\n\\t\\t);\\n\\t\\t// for the sILV ERC165 check is unavailable, but TOKEN_UID check is available\\n\\t\\trequire(\\n\\t\\t\\tIdentifiableToken(_sIlv).TOKEN_UID() == 0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62,\\n\\t\\t\\t\\\"unexpected sILV UID\\\"\\n\\t\\t);\\n\\t\\trequire(IERC165(_oracle).supportsInterface(type(LandSaleOracle).interfaceId), \\\"unexpected oracle type\\\");\\n\\n\\t\\t// assign the addresses\\n\\t\\ttargetNftContract = _nft;\\n\\t\\tsIlvContract = _sIlv;\\n\\t\\tpriceOracle = _oracle;\\n\\t}\\n\\n\\t/**\\n\\t * @dev `startPrices` getter; the getters solidity creates for arrays\\n\\t *      may be inconvenient to use if we need an entire array to be read\\n\\t *\\n\\t * @return `startPrices` as is - as an array of uint96\\n\\t */\\n\\tfunction getStartPrices() public view returns(uint96[] memory) {\\n\\t\\t// read `startPrices` array into memory and return\\n\\t\\treturn startPrices;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Restricted access function to update input data root (Merkle tree root),\\n\\t *       and to define, effectively, the tokens to be created by this smart contract\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_DATA_MANAGER` permission\\n\\t *\\n\\t * @param _root Merkle tree root for the input plot data collection\\n\\t */\\n\\tfunction setInputDataRoot(bytes32 _root) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_DATA_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// update input data Merkle tree root\\n\\t\\troot = _root;\\n\\n\\t\\t// emit an event\\n\\t\\temit RootChanged(msg.sender, _root);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verifies the validity of a plot supplied (namely, if it's registered for the sale)\\n\\t *      based on the Merkle root of the plot data collection (already defined on the contract),\\n\\t *      and the Merkle proof supplied to validate the particular plot data\\n\\t *\\n\\t * @dev Merkle tree and proof can be constructed using the `web3-utils`, `merkletreejs`,\\n\\t *      and `keccak256` npm packages:\\n\\t *      1. Hash the plot data collection elements via `web3.utils.soliditySha3`, making sure\\n\\t *         the packing order and types are exactly as defined in `PlotData` struct\\n\\t *      2. Create a sorted MerkleTree (`merkletreejs`) from the hashed collection, use `keccak256`\\n\\t *         from the `keccak256` npm package as a hashing function, do not hash leaves\\n\\t *         (already hashed in step 1); Ex. MerkleTree options: {hashLeaves: false, sortPairs: true}\\n\\t *      3. For any given plot data element the proof is constructed by hashing it (as in step 1),\\n\\t *         and querying the MerkleTree for a proof, providing the hashed plot data element as a leaf\\n\\t *\\n\\t * @dev See also: https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof\\n\\t *\\n\\t * @param plotData plot data to verify\\n\\t * @param proof Merkle proof for the plot data supplied\\n\\t * @return true if plot is valid (belongs to registered collection), false otherwise\\n\\t */\\n\\tfunction isPlotValid(PlotData memory plotData, bytes32[] memory proof) public view returns(bool) {\\n\\t\\t// construct Merkle tree leaf from the inputs supplied\\n\\t\\tbytes32 leaf = keccak256(abi.encodePacked(\\n\\t\\t\\t\\tplotData.tokenId,\\n\\t\\t\\t\\tplotData.sequenceId,\\n\\t\\t\\t\\tplotData.regionId,\\n\\t\\t\\t\\tplotData.x,\\n\\t\\t\\t\\tplotData.y,\\n\\t\\t\\t\\tplotData.tierId,\\n\\t\\t\\t\\tplotData.size\\n\\t\\t\\t));\\n\\n\\t\\t// verify the proof supplied, and return the verification result\\n\\t\\treturn proof.verify(root, leaf);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to set up sale parameters, all at once,\\n\\t *      or any subset of them\\n\\t *\\n\\t * @dev To skip parameter initialization, set it to `-1`,\\n\\t *      that is a maximum value for unsigned integer of the corresponding type;\\n\\t *      for `_startPrices` use a single array element with the `-1` value to skip\\n\\t *\\n\\t * @dev Example: following initialization will update only `_seqDuration` and `_seqOffset`,\\n\\t *      leaving the rest of the fields unchanged\\n\\t *      initialize(\\n\\t *          0xFFFFFFFF, // `_saleStart` unchanged\\n\\t *          0xFFFFFFFF, // `_saleEnd` unchanged\\n\\t *          0xFFFFFFFF, // `_halvingTime` unchanged\\n\\t *          21600,      // `_seqDuration` updated to 6 hours\\n\\t *          3600,       // `_seqOffset` updated to 1 hour\\n\\t *          [0xFFFFFFFFFFFFFFFFFFFFFFFF] // `_startPrices` unchanged\\n\\t *      )\\n\\t *\\n\\t * @dev Sale start and end times should match with the number of sequences,\\n\\t *      sequence duration and offset, if `n` is number of sequences, then\\n\\t *      the following equation must hold:\\n\\t *         `saleStart + (n - 1) * seqOffset + seqDuration = saleEnd`\\n\\t *      Note: `n` is unknown to the sale contract and there is no way for it\\n\\t *      to accurately validate other parameters of the equation above\\n\\t *\\n\\t * @dev Input params are not validated; to get an idea if these params look valid,\\n\\t *      refer to `isActive() `function, and it's logic\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_SALE_MANAGER` role\\n\\t *\\n\\t * @param _saleStart sale start time, and first sequence start time\\n\\t * @param _saleEnd sale end time, should match with the last sequence end time\\n\\t * @param _halvingTime price halving time, the time required for a token price\\n\\t *      to reduce to the half of its initial value\\n\\t * @param _timeFlowQuantum time flow quantum, price update interval, used by\\n\\t *      the price calculation algorithm to update prices\\n\\t * @param _seqDuration sequence duration, time limit of how long a token / sequence\\n\\t *      can be available for sale\\n\\t * @param _seqOffset sequence start offset, each sequence starts `_seqOffset`\\n\\t *      later after the previous one\\n\\t * @param _startPrices tier start prices, starting token price for each (zero based) Tier ID\\n\\t */\\n\\tfunction initialize(\\n\\t\\tuint32 _saleStart,           // <<<--- keep type in sync with the body type(uint32).max !!!\\n\\t\\tuint32 _saleEnd,             // <<<--- keep type in sync with the body type(uint32).max !!!\\n\\t\\tuint32 _halvingTime,         // <<<--- keep type in sync with the body type(uint32).max !!!\\n\\t\\tuint32 _timeFlowQuantum,     // <<<--- keep type in sync with the body type(uint32).max !!!\\n\\t\\tuint32 _seqDuration,         // <<<--- keep type in sync with the body type(uint32).max !!!\\n\\t\\tuint32 _seqOffset,           // <<<--- keep type in sync with the body type(uint32).max !!!\\n\\t\\tuint96[] memory _startPrices // <<<--- keep type in sync with the body type(uint96).max !!!\\n\\t) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_SALE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// Note: no input validation at this stage, initial params state is invalid anyway,\\n\\t\\t//       and we're not limiting sale manager to set these params back to this state\\n\\n\\t\\t// set/update sale parameters (allowing partial update)\\n\\t\\t// 0xFFFFFFFF, 32 bits\\n\\t\\tif(_saleStart != type(uint32).max) {\\n\\t\\t\\tsaleStart = _saleStart;\\n\\t\\t}\\n\\t\\t// 0xFFFFFFFF, 32 bits\\n\\t\\tif(_saleEnd != type(uint32).max) {\\n\\t\\t\\tsaleEnd = _saleEnd;\\n\\t\\t}\\n\\t\\t// 0xFFFFFFFF, 32 bits\\n\\t\\tif(_halvingTime != type(uint32).max) {\\n\\t\\t\\thalvingTime = _halvingTime;\\n\\t\\t}\\n\\t\\t// 0xFFFFFFFF, 32 bits\\n\\t\\tif(_timeFlowQuantum != type(uint32).max) {\\n\\t\\t\\ttimeFlowQuantum = _timeFlowQuantum;\\n\\t\\t}\\n\\t\\t// 0xFFFFFFFF, 32 bits\\n\\t\\tif(_seqDuration != type(uint32).max) {\\n\\t\\t\\tseqDuration = _seqDuration;\\n\\t\\t}\\n\\t\\t// 0xFFFFFFFF, 32 bits\\n\\t\\tif(_seqOffset != type(uint32).max) {\\n\\t\\t\\tseqOffset = _seqOffset;\\n\\t\\t}\\n\\t\\t// 0xFFFFFFFFFFFFFFFFFFFFFFFF, 96 bits\\n\\t\\tif(_startPrices.length != 1 || _startPrices[0] != type(uint96).max) {\\n\\t\\t\\tstartPrices = _startPrices;\\n\\t\\t}\\n\\n\\t\\t// emit an event\\n\\t\\temit Initialized(msg.sender, saleStart, saleEnd, halvingTime, timeFlowQuantum, seqDuration, seqOffset, startPrices);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verifies if sale is in the active state, meaning that it is properly\\n\\t *      initialized with the sale start/end times, sequence params, etc., and\\n\\t *      that the current time is within the sale start/end bounds\\n\\t *\\n\\t * @notice Doesn't check if the plot data Merkle root `root` is set or not;\\n\\t *      active sale state doesn't guarantee that an item can be actually bought\\n\\t *\\n\\t * @dev The sale is defined as active if all of the below conditions hold:\\n\\t *      - sale start is now or in the past\\n\\t *      - sale end is in the future\\n\\t *      - halving time is not zero\\n\\t *      - sequence duration is not zero\\n\\t *      - there is at least one starting price set (zero price is valid)\\n\\t *\\n\\t * @return true if sale is active, false otherwise\\n\\t */\\n\\tfunction isActive() public view returns(bool) {\\n\\t\\t// calculate sale state based on the internal sale params state and return\\n\\t\\treturn saleStart <= now32() && now32() < saleEnd\\n\\t\\t\\t&& halvingTime > 0\\n\\t\\t\\t&& timeFlowQuantum > 0\\n\\t\\t\\t&& seqDuration > 0\\n\\t\\t\\t&& startPrices.length > 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to update the sale beneficiary address, the address\\n\\t *      can be set, updated, or \\\"unset\\\" (deleted, set to zero)\\n\\t *\\n\\t * @dev Setting the address to non-zero value effectively activates funds withdrawal\\n\\t *      mechanism via the push pattern\\n\\t *\\n\\t * @dev Setting the address to zero value effectively deactivates funds withdrawal\\n\\t *      mechanism via the push pattern (pull mechanism can be used instead)\\n\\t */\\n\\tfunction setBeneficiary(address payable _beneficiary) public {\\n\\t\\t// check the access permission\\n\\t\\trequire(isSenderInRole(ROLE_WITHDRAWAL_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// update the beneficiary address\\n\\t\\tbeneficiary = _beneficiary;\\n\\n\\t\\t// emit an event\\n\\t\\temit BeneficiaryUpdated(msg.sender, _beneficiary);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to withdraw funds on the contract balance,\\n\\t *      sends funds back to transaction sender\\n\\t *\\n\\t * @dev Withdraws both ETH and sILV balances if `_ethOnly` is set to false,\\n\\t *      withdraws only ETH is `_ethOnly` is set to true\\n\\t *\\n\\t * @param _ethOnly a flag indicating whether to withdraw sILV or not\\n\\t */\\n\\tfunction withdraw(bool _ethOnly) public {\\n\\t\\t// delegate to `withdrawTo`\\n\\t\\twithdrawTo(payable(msg.sender), _ethOnly);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to withdraw funds on the contract balance,\\n\\t *      sends funds to the address specified\\n\\t *\\n\\t * @dev Withdraws both ETH and sILV balances if `_ethOnly` is set to false,\\n\\t *      withdraws only ETH is `_ethOnly` is set to true\\n\\t *\\n\\t * @param _to an address to send funds to\\n\\t * @param _ethOnly a flag indicating whether to withdraw sILV or not\\n\\t */\\n\\tfunction withdrawTo(address payable _to, bool _ethOnly) public {\\n\\t\\t// check the access permission\\n\\t\\trequire(isSenderInRole(ROLE_WITHDRAWAL_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// verify withdrawal address is set\\n\\t\\trequire(_to != address(0), \\\"recipient not set\\\");\\n\\n\\t\\t// ETH value to send\\n\\t\\tuint256 ethBalance = address(this).balance;\\n\\n\\t\\t// sILV value to send\\n\\t\\tuint256 sIlvBalance = _ethOnly? 0: ERC20(sIlvContract).balanceOf(address(this));\\n\\n\\t\\t// verify there is a balance to send\\n\\t\\trequire(ethBalance > 0 || sIlvBalance > 0, \\\"zero balance\\\");\\n\\n\\t\\t// if there is ETH to send\\n\\t\\tif(ethBalance > 0) {\\n\\t\\t\\t// send the entire balance to the address specified\\n\\t\\t\\t_to.transfer(ethBalance);\\n\\t\\t}\\n\\n\\t\\t// if there is sILV to send\\n\\t\\tif(sIlvBalance > 0) {\\n\\t\\t\\t// send the entire balance to the address specified\\n\\t\\t\\tERC20(sIlvContract).transfer(_to, sIlvBalance);\\n\\t\\t}\\n\\n\\t\\t// emit en event\\n\\t\\temit Withdrawn(msg.sender, _to, ethBalance, sIlvBalance);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to rescue accidentally sent ERC20 tokens,\\n\\t *      the tokens are rescued via `transfer` function call on the\\n\\t *      contract address specified and with the parameters specified:\\n\\t *      `_contract.transfer(_to, _value)`\\n\\t *\\n\\t * @dev Doesn't allow to rescue sILV tokens, use withdraw/withdrawTo instead\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_RESCUE_MANAGER` permission\\n\\t *\\n\\t * @param _contract smart contract address to execute `transfer` function on\\n\\t * @param _to to address in `transfer(_to, _value)`\\n\\t * @param _value value to transfer in `transfer(_to, _value)`\\n\\t */\\n\\tfunction rescueErc20(address _contract, address _to, uint256 _value) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_RESCUE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// verify rescue manager is not trying to withdraw sILV:\\n\\t\\t// we have a withdrawal manager to help with that\\n\\t\\trequire(_contract != sIlvContract, \\\"sILV access denied\\\");\\n\\n\\t\\t// perform the transfer as requested, without any checks\\n\\t\\tERC20(_contract).transfer(_to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the dutch auction price value for a token in a given\\n\\t *      sequence `sequenceId`, given tier `tierId`, now (block.timestamp)\\n\\t *\\n\\t * @dev Throws if `now` is outside the [saleStart, saleEnd) bounds,\\n\\t *      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),\\n\\t *      or if the tier specified is invalid (no starting price is defined for it)\\n\\t *\\n\\t * @param sequenceId ID of the sequence token is sold in\\n\\t * @param tierId ID of the tier token belongs to (defines token rarity)\\n\\t */\\n\\tfunction tokenPriceNow(uint32 sequenceId, uint16 tierId) public view returns(uint256) {\\n\\t\\t// delegate to `tokenPriceAt` using current time as `t`\\n\\t\\treturn tokenPriceAt(sequenceId, tierId, now32());\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the dutch auction price value for a token in a given\\n\\t *      sequence `sequenceId`, given tier `tierId`, at a given time `t`\\n\\t *\\n\\t * @dev Throws if `t` is outside the [saleStart, saleEnd) bounds,\\n\\t *      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),\\n\\t *      or if the tier specified is invalid (no starting price is defined for it)\\n\\t *\\n\\t * @param sequenceId ID of the sequence token is sold in\\n\\t * @param tierId ID of the tier token belongs to (defines token rarity)\\n\\t * @param t the time of interest, time to evaluate the price at\\n\\t */\\n\\tfunction tokenPriceAt(uint32 sequenceId, uint16 tierId, uint32 t) public view returns(uint256) {\\n\\t\\t// calculate sequence sale start\\n\\t\\tuint32 seqStart = saleStart + sequenceId * seqOffset;\\n\\t\\t// calculate sequence sale end\\n\\t\\tuint32 seqEnd = seqStart + seqDuration;\\n\\n\\t\\t// verify `t` is in a reasonable bounds [saleStart, saleEnd)\\n\\t\\trequire(saleStart <= t && t < saleEnd, \\\"invalid time\\\");\\n\\n\\t\\t// ensure `t` is in `[seqStart, seqEnd)` bounds; no price exists outside the bounds\\n\\t\\trequire(seqStart <= t && t < seqEnd, \\\"invalid sequence\\\");\\n\\n\\t\\t// verify the initial price is set (initialized) for the tier specified\\n\\t\\trequire(startPrices.length > tierId, \\\"invalid tier\\\");\\n\\n\\t\\t// convert `t` from \\\"absolute\\\" to \\\"relative\\\" (within a sequence)\\n\\t\\tt -= seqStart;\\n\\n\\t\\t// apply the time flow quantum: make `t` multiple of quantum\\n\\t\\tt /= timeFlowQuantum;\\n\\t\\tt *= timeFlowQuantum;\\n\\n\\t\\t// calculate the price based on the derived params - delegate to `price`\\n\\t\\treturn price(startPrices[tierId], halvingTime, t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates dutch auction price after the time of interest has passed since\\n\\t *      the auction has started\\n\\t *\\n\\t * @dev The price is assumed to drop exponentially, according to formula:\\n\\t *      p(t) = p0 * 2^(-t/t0)\\n\\t *      The price halves every t0 seconds passed from the start of the auction\\n\\t *\\n\\t * @dev Calculates with the precision p0 * 2^(-1/256), meaning the price updates\\n\\t *      every t0 / 256 seconds\\n\\t *      For example, if halving time is one hour, the price updates every 14 seconds\\n\\t *\\n\\t * @param p0 initial price\\n\\t * @param t0 price halving time\\n\\t * @param t elapsed time\\n\\t * @return price after `t` seconds passed, `p = p0 * 2^(-t/t0)`\\n\\t */\\n\\tfunction price(uint256 p0, uint256 t0, uint256 t) public pure returns(uint256) {\\n\\t\\t// perform very rough price estimation first by halving\\n\\t\\t// the price as many times as many t0 intervals have passed\\n\\t\\tuint256 p = p0 >> t / t0;\\n\\n\\t\\t// if price halves (decreases by 2 times) every t0 seconds passed,\\n\\t\\t// than every t0 / 2 seconds passed it decreases by sqrt(2) times (2 ^ (1/2)),\\n\\t\\t// every t0 / 2 seconds passed it decreases 2 ^ (1/4) times, and so on\\n\\n\\t\\t// we've prepared a small cheat sheet here with the pre-calculated values for\\n\\t\\t// the roots of the degree of two 2 ^ (1 / 2 ^ n)\\n\\t\\t// for the resulting function to be monotonically decreasing, it is required\\n\\t\\t// that (2 ^ (1 / 2 ^ n)) ^ 2 <= 2 ^ (1 / 2 ^ (n - 1))\\n\\t\\t// to emulate floating point values, we present them as nominator/denominator\\n\\t\\t// roots of the degree of two nominators:\\n\\t\\tuint56[8] memory sqrNominator = [\\n\\t\\t\\t1_414213562373095, // 2 ^ (1/2)\\n\\t\\t\\t1_189207115002721, // 2 ^ (1/4)\\n\\t\\t\\t1_090507732665257, // 2 ^ (1/8) *\\n\\t\\t\\t1_044273782427413, // 2 ^ (1/16) *\\n\\t\\t\\t1_021897148654116, // 2 ^ (1/32) *\\n\\t\\t\\t1_010889286051700, // 2 ^ (1/64)\\n\\t\\t\\t1_005429901112802, // 2 ^ (1/128) *\\n\\t\\t\\t1_002711275050202  // 2 ^ (1/256)\\n\\t\\t];\\n\\t\\t// roots of the degree of two denominator:\\n\\t\\tuint56 sqrDenominator =\\n\\t\\t\\t1_000000000000000;\\n\\n\\t\\t// perform up to 8 iterations to increase the precision of the calculation\\n\\t\\t// dividing the halving time `t0` by two on every step\\n\\t\\tfor(uint8 i = 0; i < sqrNominator.length && t > 0 && t0 > 1; i++) {\\n\\t\\t\\t// determine the reminder of `t` which requires the precision increase\\n\\t\\t\\tt %= t0;\\n\\t\\t\\t// halve the `t0` for the next iteration step\\n\\t\\t\\tt0 /= 2;\\n\\t\\t\\t// if elapsed time `t` is big enough and is \\\"visible\\\" with `t0` precision\\n\\t\\t\\tif(t >= t0) {\\n\\t\\t\\t\\t// decrease the price accordingly to the roots of the degree of two table\\n\\t\\t\\t\\tp = p * sqrDenominator / sqrNominator[i];\\n\\t\\t\\t}\\n\\t\\t\\t// if elapsed time `t` is big enough and is \\\"visible\\\" with `2 * t0` precision\\n\\t\\t\\t// (this is possible sometimes due to rounding errors when halving `t0`)\\n\\t\\t\\tif(t >= 2 * t0) {\\n\\t\\t\\t\\t// decrease the price again accordingly to the roots of the degree of two table\\n\\t\\t\\t\\tp = p * sqrDenominator / sqrNominator[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// return the result\\n\\t\\treturn p;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sells a plot of land (Land ERC721 token) from the sale to executor.\\n\\t *      Executor must supply the metadata for the land plot and a Merkle tree proof\\n\\t *      for the metadata supplied.\\n\\t *\\n\\t * @notice Metadata for all the plots is stored off-chain and is publicly available\\n\\t *      to buy plots and to generate Merkle proofs\\n\\t *\\n\\t * @dev Merkle tree and proof can be constructed using the `web3-utils`, `merkletreejs`,\\n\\t *      and `keccak256` npm packages:\\n\\t *      1. Hash the plot data collection elements via `web3.utils.soliditySha3`, making sure\\n\\t *         the packing order and types are exactly as defined in `PlotData` struct\\n\\t *      2. Create a sorted MerkleTree (`merkletreejs`) from the hashed collection, use `keccak256`\\n\\t *         from the `keccak256` npm package as a hashing function, do not hash leaves\\n\\t *         (already hashed in step 1); Ex. MerkleTree options: {hashLeaves: false, sortPairs: true}\\n\\t *      3. For any given plot data element the proof is constructed by hashing it (as in step 1),\\n\\t *         and querying the MerkleTree for a proof, providing the hashed plot data element as a leaf\\n\\t *\\n\\t * @dev Requires FEATURE_SALE_ACTIVE feature to be enabled\\n\\t *\\n\\t * @dev Throws if current time is outside the [saleStart, saleEnd) bounds,\\n\\t *      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),\\n\\t *      or if the tier specified is invalid (no starting price is defined for it)\\n\\t *\\n\\t * @dev See also: https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof\\n\\t *\\n\\t * @param plotData plot data to buy\\n\\t * @param proof Merkle proof for the plot data supplied\\n\\t */\\n\\tfunction buy(PlotData memory plotData, bytes32[] memory proof) public payable {\\n\\t\\t// verify sale is in active state\\n\\t\\trequire(isFeatureEnabled(FEATURE_SALE_ACTIVE), \\\"sale disabled\\\");\\n\\n\\t\\t// check if sale is active (and initialized)\\n\\t\\trequire(isActive(), \\\"inactive sale\\\");\\n\\n\\t\\t// make sure plot data Merkle root was set (sale has something on sale)\\n\\t\\trequire(root != 0x00, \\\"empty sale\\\");\\n\\n\\t\\t// verify the plot supplied is a valid/registered plot\\n\\t\\trequire(isPlotValid(plotData, proof), \\\"invalid plot\\\");\\n\\n\\t\\t// process the payment, save the ETH/sILV lot prices\\n\\t\\tuint256 pEth;\\n\\t\\tuint256 pIlv;\\n\\t\\t(pEth, pIlv) = _processPayment(plotData.sequenceId, plotData.tierId);\\n\\n\\t\\t// generate the random seed to derive internal land structure (landmark and sites)\\n\\t\\t// hash the token ID, block timestamp and tx executor address to get a seed\\n\\t\\tuint160 rnd160 = uint160(uint256(keccak256(abi.encodePacked(plotData.tokenId, now32(), msg.sender))));\\n\\n\\t\\t// allocate the land plot metadata in memory (it will be used several times)\\n\\t\\tLand.PlotStore memory plot = Land.PlotStore({\\n\\t\\t\\tregionId: plotData.regionId,\\n\\t\\t\\tx: plotData.x,\\n\\t\\t\\ty: plotData.y,\\n\\t\\t\\ttierId: plotData.tierId,\\n\\t\\t\\tsize: plotData.size,\\n\\t\\t\\tversion: 1,\\n\\t\\t\\tseed: rnd160\\n\\t\\t});\\n\\n\\t\\t// set token metadata - delegate to `setMetadata`\\n\\t\\tLandERC721(targetNftContract).setMetadata(plotData.tokenId, plot);\\n\\t\\t// mint the token - delegate to `mint`\\n\\t\\tMintableERC721(targetNftContract).mint(msg.sender, plotData.tokenId);\\n\\n\\t\\t// emit an event\\n\\t\\temit PlotBought(msg.sender, plotData, plot, pEth, pIlv);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Charges tx executor in ETH/sILV, based on if ETH is supplied in the tx or not:\\n\\t *      - if ETH is supplied, charges ETH only (throws if value supplied is not enough)\\n\\t *      - if ETH is not supplied, charges sILV only (throws if sILV transfer fails)\\n\\t *\\n\\t * @dev Sends the change (for ETH payment - if any) back to transaction executor\\n\\t *\\n\\t * @dev Internal use only, throws on any payment failure\\n\\t *\\n\\t * @param sequenceId ID of the sequence token is sold in\\n\\t * @param tierId ID of the tier token belongs to (defines token rarity)\\n\\t */\\n\\tfunction _processPayment(uint32 sequenceId, uint16 tierId) private returns(uint256 pEth, uint256 pIlv) {\\n\\t\\t// determine current token price\\n\\t\\tpEth = tokenPriceNow(sequenceId, tierId);\\n\\n\\t\\t// current land sale version doesn't support free tiers (ID: 0)\\n\\t\\trequire(pEth != 0, \\\"unsupported tier\\\");\\n\\n\\t\\t// if ETH is not supplied, try to process sILV payment\\n\\t\\tif(msg.value == 0) {\\n\\t\\t\\t// convert price `p` to ILV/sILV\\n\\t\\t\\tpIlv = LandSaleOracle(priceOracle).ethToIlv(pEth);\\n\\n\\t\\t\\t// verify sender sILV balance and allowance to improve error messaging\\n\\t\\t\\t// note: `transferFrom` would fail anyway, but we need more clear error message\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tERC20(sIlvContract).balanceOf(msg.sender) >= pIlv\\n\\t\\t\\t\\t&& ERC20(sIlvContract).allowance(msg.sender, address(this)) >= pIlv,\\n\\t\\t\\t\\t\\\"not enough funds\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// if beneficiary address is set, transfer the funds directly to the beneficiary\\n\\t\\t\\t// otherwise, transfer the funds to the sale contract for the future pull withdrawal\\n\\t\\t\\tERC20(sIlvContract).transferFrom(msg.sender, beneficiary != address(0)? beneficiary: address(this), pIlv);\\n\\n\\t\\t\\t// no need for the change processing here since we're taking the amount ourselves\\n\\n\\t\\t\\t// return ETH price and sILV price actually charged\\n\\t\\t\\treturn (pEth, pIlv);\\n\\t\\t}\\n\\n\\t\\t// process ETH payment otherwise\\n\\n\\t\\t// ensure amount of ETH send\\n\\t\\trequire(msg.value >= pEth, \\\"not enough ETH\\\");\\n\\n\\t\\t// if beneficiary address is set\\n\\t\\tif(beneficiary != address(0)) {\\n\\t\\t\\t// transfer the funds directly to the beneficiary\\n\\t\\t\\tbeneficiary.transfer(pEth);\\n\\t\\t}\\n\\t\\t// if beneficiary address is not set, funds remain on\\n\\t\\t// the sale contract address for the future pull withdrawal\\n\\n\\t\\t// if there is any change sent in the transaction\\n\\t\\t// (most of the cases there will be a change since this is a dutch auction)\\n\\t\\tif(msg.value > pEth) {\\n\\t\\t\\t// transfer the change back to the transaction executor (buyer)\\n\\t\\t\\tpayable(msg.sender).transfer(msg.value - pEth);\\n\\t\\t}\\n\\n\\t\\t// return the ETH price charged\\n\\t\\treturn (pEth, 0);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Testing time-dependent functionality may be difficult;\\n\\t *      we override time in the helper test smart contract (mock)\\n\\t *\\n\\t * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n\\t */\\n\\tfunction now32() public view virtual returns (uint32) {\\n\\t\\t// return current block timestamp\\n\\t\\treturn uint32(block.timestamp);\\n\\t}\\n}\\n\",\"keccak256\":\"0xcfc2a2cabf8ba7a56b69f8d3fd0d617aec9027f400856de7cc84d27f140015b2\",\"license\":\"MIT\"},\"contracts/token/LandERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/LandERC721Spec.sol\\\";\\nimport \\\"../lib/Land.sol\\\";\\nimport \\\"./RoyalERC721.sol\\\";\\n\\n/**\\n * @title Land ERC721\\n *\\n * @notice Land ERC721 (a.k.a Land Plot, Land, or Land NFT) represents land plots in Illuvium: Zero (IZ).\\n *      Each token is a piece of land (land plot) on the overall world map in IZ.\\n *\\n * @notice Land plot is uniquely identified by its region and coordinates (x, y) within the region.\\n *      There can be only one plot with the given coordinates (x, y) in a given region.\\n *\\n * @notice Land plot has internal coordinate system used to place the structures (off-chain).\\n *      Land plot may contain \\\"sites\\\" with the resources,\\n *      a Landmark, increasing the resource production / decreasing resource losses,\\n *      or a special type of Landmark - Arena, used to host tournaments.\\n *      Sites are positioned on the plot and have their own coordinates (x, y) within a plot.\\n *      Number of sites depends on the land plot rarity (tier).\\n *      Landmark may exist only in the rare land plots (tier 3 or higher) and resides in the center of the plot.\\n *\\n * @notice Land plot does not contain details on the structures, these details are stored off-chain.\\n *      The fundamental value of the Land is always drawn from the underlying Land NFT,\\n *      which produces Fuel in the form of an ERC20 tokens.\\n *\\n * @notice Land plot metadata is immutable and includes (see `LandView` structure):\\n *      - Region ID (1 - 7), determines which tileset to use in game,\\n *      - Coordinates (x, y) on the overall world map, indicating which grid position the land sits in,\\n *      - Tier ID (1 - 5), the rarity of the land, tier is used to create the list of sites,\\n *      - Plot Size, defines an internal coordinate system within a plot,\\n *      - Internal Land Structure\\n *        - enumeration of sites, each site metadata including:\\n *          - Type ID (1 - 6), defining the type of the site:\\n *            1) Carbon,\\n *            2) Silicon,\\n *            3) Hydrogen,\\n *            4) Crypton,\\n *            5) Hyperion,\\n *            6) Solon\\n *          - Coordinates (x, y) on the land plot\\n *        - Landmark Type ID:\\n *            0) no Landmark,\\n *            1) Carbon Landmark,\\n *            2) Silicon Landmark,\\n *            3) Hydrogen Landmark (Eternal Spring),\\n *            4) Crypton Landmark,\\n *            5) Hyperion Landmark,\\n *            6) Solon Landmark (Fallen Star),\\n *            7) Arena\\n *\\n * @notice Region ID, Coordinates (x, y), Tier ID, and Plot Size are stored as is, while Internal Land Structure\\n *      is derived from Tier ID, Plot Size, and a Seed (see `LandStore` structure)\\n *\\n * @notice A note on Region, Coordinates (x, y), Tier, Plot Size, and Internal Land Structure.\\n *      Land Plot smart contract stores Region, Coordinates (x, y), Tier, Plot Size, and Internal Land Structure\\n *      as part of the land metadata on-chain, however the use of these values within the smart contract is limited.\\n *      Effectively that means that helper smart contracts, backend, or frontend applications can, to some extent,\\n *      treat these values at their own decision, may redefine, enrich, or ignore their meaning.\\n *\\n * @notice Land NFTs are minted by the trusted helper smart contract(s) (see `LandSale`), which are responsible\\n *      for supplying the correct metadata.\\n *      Land NFT contract itself doesn't store the Merkle root of the valid land metadata, and\\n *      has a limited constraint validation for NFTs it mints/tracks, it guarantees:\\n *         - (regionId, x, y) uniqueness\\n *         - non-intersection of the sites coordinates within a plot\\n *         - correspondence of the number of resource sites and their types to the land tier\\n *         - correspondence of the landmark type to the land tier\\n *\\n * @dev Minting a token requires its metadata to be supplied before or during the minting process;\\n *      Burning the token destroys its metadata;\\n *      Metadata can be pre-allocated: it can be set/updated/removed for non-existing tokens, and\\n *      once the token is minted, its metadata becomes \\\"frozen\\\" - immutable, it cannot be changed or removed.\\n *\\n * @notice Refer to \\\"Illuvium: Zero\\\" design documents for additional information about the game.\\n *      Refer to \\\"Illuvium Land Sale On-chain Architecture\\\" for additional information about\\n *      the technical design of the Land ERC721 token and Land Sale smart contracts and their interaction.\\n *\\n * @author Basil Gorin\\n */\\ncontract LandERC721 is RoyalERC721, LandERC721Metadata {\\n\\t// Use Land Library to generate Internal Land Structure, extract plot coordinates, etc.\\n\\tusing Land for Land.PlotView;\\n\\tusing Land for Land.PlotStore;\\n\\n\\t/**\\n\\t * @inheritdoc IdentifiableToken\\n\\t */\\n\\tuint256 public constant override TOKEN_UID = 0x805d1eb685f9eaad4306ed05ef803361e9c0b3aef93774c4b118255ab3f9c7d1;\\n\\n\\t/**\\n\\t * @notice Metadata storage for tokens (land plots)\\n\\t * @notice Accessible via `getMetadata(uint256)`\\n\\t *\\n\\t * @dev Maps token ID => token Metadata (PlotData struct)\\n\\t */\\n\\tmapping(uint256 => Land.PlotStore) internal plots;\\n\\n\\t/**\\n\\t * @notice Auxiliary data structure tracking all the occupied land plot\\n\\t *      locations, and used to guarantee the (regionId, x, y) uniqueness\\n\\t *\\n\\t * @dev Maps packed plot location (regionId, x, y) => token ID\\n\\t */\\n\\tmapping(uint256 => uint256) public plotLocations;\\n\\n\\t/**\\n\\t * @notice Metadata provider is responsible for writing tokens' metadata\\n\\t *      (for an arbitrary token - be it an existing token or non-existing one)\\n\\t * @notice The limitation is that for an existing token its metadata can\\n\\t *      be written only once, it is impossible to modify existing\\n\\t *      token's metadata, its effectively immutable\\n\\t *\\n\\t * @dev Role ROLE_METADATA_PROVIDER allows writing tokens' metadata\\n\\t *      (calling `setMetadata` function)\\n\\t * @dev ROLE_TOKEN_CREATOR and ROLE_METADATA_PROVIDER roles are usually\\n\\t *      used together, since the token should always be created with the\\n\\t *      metadata supplied\\n\\t */\\n\\tuint32 public constant ROLE_METADATA_PROVIDER = 0x0040_0000;\\n\\n\\t/**\\n\\t * @dev Fired in `setMetadata()` when token metadata is set/updated\\n\\t *\\n\\t * @param _tokenId token ID which metadata was updated/set\\n\\t * @param _plot new token metadata\\n\\t */\\n\\tevent MetadataUpdated(uint256 indexed _tokenId, Land.PlotStore _plot);\\n\\n\\t/**\\n\\t * @dev Fired in `removeMetadata()` when token metadata is removed\\n\\t *\\n\\t * @param _tokenId token ID which metadata was removed\\n\\t * @param _plot old token metadata (which was removed)\\n\\t */\\n\\tevent MetadataRemoved(uint256 indexed _tokenId, Land.PlotStore _plot);\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * param _name token name (ERC721Metadata)\\n\\t * param _symbol token symbol (ERC721Metadata)\\n\\t * param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction postConstruct() public virtual initializer {\\n\\t\\t// execute all parent initializers in cascade\\n\\t\\tRoyalERC721._postConstruct(\\\"Land\\\", \\\"LND\\\", msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc IERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n\\t\\t// calculate based on own and inherited interfaces\\n\\t\\treturn super.supportsInterface(interfaceId)\\n\\t\\t\\t|| interfaceId == type(LandERC721Metadata).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Presents token metadata in a well readable form,\\n\\t *      with the Internal Land Structure included, as a `PlotView` struct\\n\\t *\\n\\t * @notice Reconstructs the internal land structure of the plot based on the stored\\n\\t *      Tier ID, Plot Size, Generator Version, and Seed\\n\\t *\\n\\t * @param _tokenId token ID to query metadata view for\\n\\t * @return token metadata as a `PlotView` struct\\n\\t */\\n\\tfunction viewMetadata(uint256 _tokenId) public view virtual override returns(Land.PlotView memory) {\\n\\t\\t// use Land Library to convert internal representation into the Plot view\\n\\t\\treturn plots[_tokenId].plotView();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Presents token metadata \\\"as is\\\", without the Internal Land Structure included,\\n\\t *      as a `PlotStore` struct;\\n\\t *\\n\\t * @notice Doesn't reconstruct the internal land structure of the plot, allowing to\\n\\t *      access Generator Version, and Seed fields \\\"as is\\\"\\n\\t *\\n\\t * @param _tokenId token ID to query on-chain metadata for\\n\\t * @return token metadata as a `PlotStore` struct\\n\\t */\\n\\tfunction getMetadata(uint256 _tokenId) public view override returns(Land.PlotStore memory) {\\n\\t\\t// simply return the plot metadata as it is stored\\n\\t\\treturn plots[_tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verifies if token has its metadata set on-chain; for the tokens\\n\\t *      in existence metadata is immutable, it can be set once, and not updated\\n\\t *\\n\\t * @dev If `exists(_tokenId) && hasMetadata(_tokenId)` is true, `setMetadata`\\n\\t *      for such a `_tokenId` will always throw\\n\\t *\\n\\t * @param _tokenId token ID to check metadata existence for\\n\\t * @return true if token ID specified has metadata associated with it\\n\\t */\\n\\tfunction hasMetadata(uint256 _tokenId) public view virtual override returns(bool) {\\n\\t\\t// determine plot existence based on its metadata stored\\n\\t\\treturn plots[_tokenId].seed != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets/updates token metadata on-chain; same metadata struct can be then\\n\\t *      read back using `getMetadata()` function, or it can be converted to\\n\\t *      `PlotView` using `viewMetadata()` function\\n\\t *\\n\\t * @dev The metadata supplied is validated to satisfy (regionId, x, y) uniqueness;\\n\\t *      non-intersection of the sites coordinates within a plot is guaranteed by the\\n\\t *      internal land structure generator algorithm embedded into the `viewMetadata()`\\n\\t *\\n\\t * @dev Metadata for non-existing tokens can be set and updated unlimited\\n\\t *      amount of times without any restrictions (except the constraints above)\\n\\t * @dev Metadata for an existing token can only be set, it cannot be updated\\n\\t *      (`setMetadata` will throw if metadata already exists)\\n\\t *\\n\\t * @dev Requires executor to have ROLE_METADATA_PROVIDER permission\\n\\t *\\n\\t * @param _tokenId token ID to set/updated the metadata for\\n\\t * @param _plot token metadata to be set for the token ID\\n\\t */\\n\\tfunction setMetadata(uint256 _tokenId, Land.PlotStore memory _plot) public virtual override {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_METADATA_PROVIDER), \\\"access denied\\\");\\n\\n\\t\\t// metadata cannot be updated for existing token\\n\\t\\trequire(!exists(_tokenId), \\\"token exists\\\");\\n\\n\\t\\t// ensure the location of the plot is not yet taken\\n\\t\\trequire(plotLocations[_plot.loc()] == 0, \\\"spot taken\\\");\\n\\n\\t\\t// register the plot location\\n\\t\\tplotLocations[_plot.loc()] = _tokenId;\\n\\n\\t\\t// write metadata into the storage\\n\\t\\tplots[_tokenId] = _plot;\\n\\n\\t\\t// emit an event\\n\\t\\temit MetadataUpdated(_tokenId, _plot);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to remove token metadata\\n\\t *\\n\\t * @dev Requires executor to have ROLE_METADATA_PROVIDER permission\\n\\t *\\n\\t * @param _tokenId token ID to remove metadata for\\n\\t */\\n\\tfunction removeMetadata(uint256 _tokenId) public virtual override {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_METADATA_PROVIDER), \\\"access denied\\\");\\n\\n\\t\\t// remove token metadata - delegate to `_removeMetadata`\\n\\t\\t_removeMetadata(_tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal helper function to remove token metadata\\n\\t *\\n\\t * @param _tokenId token ID to remove metadata for\\n\\t */\\n\\tfunction _removeMetadata(uint256 _tokenId) private {\\n\\t\\t// verify token doesn't exist\\n\\t\\trequire(!exists(_tokenId), \\\"token exists\\\");\\n\\n\\t\\t// read the plot - it will be logged into event anyway\\n\\t\\tLand.PlotStore memory _plot = plots[_tokenId];\\n\\n\\t\\t// erase token metadata\\n\\t\\tdelete plots[_tokenId];\\n\\n\\t\\t// unregister the plot location\\n\\t\\tdelete plotLocations[_plot.loc()];\\n\\n\\t\\t// emit an event first - to log the data which will be deleted\\n\\t\\temit MetadataRemoved(_tokenId, _plot);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to mint the token\\n\\t *      and assign the metadata supplied\\n\\t *\\n\\t * @dev Creates new token with the token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Consider minting with `safeMint` (and setting metadata before),\\n\\t *      for the \\\"safe mint\\\" like behavior\\n\\t *\\n\\t * @dev Requires executor to have ROLE_METADATA_PROVIDER\\n\\t *      and ROLE_TOKEN_CREATOR permissions\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId token ID to mint and set metadata for\\n\\t * @param _plot token metadata to be set for the token ID\\n\\t */\\n\\tfunction mintWithMetadata(address _to, uint256 _tokenId, Land.PlotStore memory _plot) public virtual override {\\n\\t\\t// simply create token metadata and mint it in the correct order:\\n\\n\\t\\t// 1. set the token metadata via `setMetadata`\\n\\t\\tsetMetadata(_tokenId, _plot);\\n\\n\\t\\t// 2. mint the token via `mint`\\n\\t\\tmint(_to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc UpgradeableERC721\\n\\t *\\n\\t * @dev Overridden function is required to ensure\\n\\t *      - zero token ID is not minted\\n\\t *      - token Metadata exists when minting\\n\\t */\\n\\tfunction _mint(address _to, uint256 _tokenId) internal virtual override {\\n\\t\\t// zero token ID is invalid (see `plotLocations` mapping)\\n\\t\\trequire(_tokenId != 0, \\\"zero ID\\\");\\n\\n\\t\\t// verify the metadata for the token already exists\\n\\t\\trequire(hasMetadata(_tokenId), \\\"no metadata\\\");\\n\\n\\t\\t// mint the token - delegate to `super._mint`\\n\\t\\tsuper._mint(_to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc UpgradeableERC721\\n\\t *\\n\\t * @dev Overridden function is required to erase token Metadata when burning\\n\\t */\\n\\tfunction _burn(uint256 _tokenId) internal virtual override {\\n\\t\\t// burn the token itself - delegate to `super._burn`\\n\\t\\tsuper._burn(_tokenId);\\n\\n\\t\\t// remove token metadata - delegate to `_removeMetadata`\\n\\t\\t_removeMetadata(_tokenId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2b6bb02a268ebf441d8ce37ae4cd193936be0dda9c3a4eb344c27c934a72e464\",\"license\":\"MIT\"},\"contracts/token/RoyalERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/EIP2981Spec.sol\\\";\\nimport \\\"./UpgradeableERC721.sol\\\";\\n\\n/**\\n * @title Royal ER721\\n *\\n * @dev Supports EIP-2981 royalties on NFT secondary sales\\n *      Supports OpenSea contract metadata royalties\\n *      Introduces fake \\\"owner\\\" to support OpenSea collections\\n *\\n * @author Basil Gorin\\n */\\nabstract contract RoyalERC721 is EIP2981, UpgradeableERC721 {\\n\\t/**\\n\\t * @dev OpenSea expects NFTs to be \\\"Ownable\\\", that is having an \\\"owner\\\",\\n\\t *      we introduce a fake \\\"owner\\\" here with no authority\\n\\t */\\n\\taddress public owner;\\n\\n\\t/**\\n\\t * @notice Address to receive EIP-2981 royalties from secondary sales\\n\\t *         see https://eips.ethereum.org/EIPS/eip-2981\\n\\t */\\n\\taddress public royaltyReceiver;\\n\\n\\t/**\\n\\t * @notice Percentage of token sale price to be used for EIP-2981 royalties from secondary sales\\n\\t *         see https://eips.ethereum.org/EIPS/eip-2981\\n\\t *\\n\\t * @dev Has 2 decimal precision. E.g. a value of 500 would result in a 5% royalty fee\\n\\t */\\n\\tuint16 public royaltyPercentage; // default OpenSea value is 750\\n\\n\\t/**\\n\\t * @notice Contract level metadata to define collection name, description, and royalty fees.\\n\\t *         see https://docs.opensea.io/docs/contract-level-metadata\\n\\t *\\n\\t * @dev Should be overwritten by inheriting contracts. By default only includes royalty information\\n\\t */\\n\\tstring public contractURI;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[47] private __gap;\\n\\n\\t/**\\n\\t * @notice Royalty manager is responsible for managing the EIP2981 royalty info\\n\\t *\\n\\t * @dev Role ROLE_ROYALTY_MANAGER allows updating the royalty information\\n\\t *      (executing `setRoyaltyInfo` function)\\n\\t */\\n\\tuint32 public constant ROLE_ROYALTY_MANAGER = 0x0010_0000;\\n\\n\\t/**\\n\\t * @notice Owner manager is responsible for setting/updating an \\\"owner\\\" field\\n\\t *\\n\\t * @dev Role ROLE_OWNER_MANAGER allows updating the \\\"owner\\\" field\\n\\t *      (executing `setOwner` function)\\n\\t */\\n\\tuint32 public constant ROLE_OWNER_MANAGER = 0x0020_0000;\\n\\n\\t/**\\n\\t * @dev Fired in setContractURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _value new contractURI value\\n\\t */\\n\\tevent ContractURIUpdated(address indexed _by, string _value);\\n\\n\\t/**\\n\\t * @dev Fired in setRoyaltyInfo()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _receiver new royaltyReceiver value\\n\\t * @param _percentage new royaltyPercentage value\\n\\t */\\n\\tevent RoyaltyInfoUpdated(\\n\\t\\taddress indexed _by,\\n\\t\\taddress indexed _receiver,\\n\\t\\tuint16 _percentage\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in setOwner()\\n\\t *\\n\\t * @param _by an address which set the new \\\"owner\\\"\\n\\t * @param _oldVal previous \\\"owner\\\" address\\n\\t * @param _newVal new \\\"owner\\\" address\\n\\t */\\n\\tevent OwnerUpdated(address indexed _by, address indexed _oldVal, address indexed _newVal);\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * @param _name token name (ERC721Metadata)\\n\\t * @param _symbol token symbol (ERC721Metadata)\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(string memory _name, string memory _symbol, address _owner) internal virtual override initializer {\\n\\t\\t// execute all parent initializers in cascade\\n\\t\\tUpgradeableERC721._postConstruct(_name, _symbol, _owner);\\n\\n\\t\\t// initialize the \\\"owner\\\" as a deployer account\\n\\t\\towner = msg.sender;\\n\\n\\t\\t// initialize contractURI as an empty string\\n\\t\\tcontractURI = \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates the contract URI\\n\\t *\\n\\t * @dev Requires executor to have ROLE_URI_MANAGER permission\\n\\t *\\n\\t * @param _contractURI new contract URI to set\\n\\t */\\n\\tfunction setContractURI(string memory _contractURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// update the contract URI\\n\\t\\tcontractURI = _contractURI;\\n\\n\\t\\t// emit an event first\\n\\t\\temit ContractURIUpdated(msg.sender, _contractURI);\\n\\t}\\n\\n\\t/**\\n\\t * @notice EIP-2981 function to calculate royalties for sales in secondary marketplaces.\\n\\t *         see https://eips.ethereum.org/EIPS/eip-2981\\n\\t *\\n\\t * @param _tokenId the token id to calculate royalty info for\\n\\t * @param _salePrice the price (in any unit, .e.g wei, ERC20 token, et.c.) of the token to be sold\\n\\t *\\n\\t * @return receiver the royalty receiver\\n\\t * @return royaltyAmount royalty amount in the same unit as _salePrice\\n\\t */\\n\\tfunction royaltyInfo(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _salePrice\\n\\t) external view virtual override returns (\\n\\t\\taddress receiver,\\n\\t\\tuint256 royaltyAmount\\n\\t) {\\n\\t\\t// simply calculate the values and return the result\\n\\t\\treturn (royaltyReceiver, _salePrice * royaltyPercentage / 100_00);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates the royalty info\\n\\t *\\n\\t * @dev Requires executor to have ROLE_ROYALTY_MANAGER permission\\n\\t *\\n\\t * @param _royaltyReceiver new royalty receiver to set\\n\\t * @param _royaltyPercentage new royalty percentage to set\\n\\t */\\n\\tfunction setRoyaltyInfo(address _royaltyReceiver, uint16 _royaltyPercentage) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_ROYALTY_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// verify royalty percentage is zero if receiver is also zero\\n\\t\\trequire(_royaltyReceiver != address(0) || _royaltyPercentage == 0, \\\"invalid receiver\\\");\\n\\n\\t\\t// update the values\\n\\t\\troyaltyReceiver = _royaltyReceiver;\\n\\t\\troyaltyPercentage = _royaltyPercentage;\\n\\n\\t\\t// emit an event first\\n\\t\\temit RoyaltyInfoUpdated(msg.sender, _royaltyReceiver, _royaltyPercentage);\\n\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if the address supplied is an \\\"owner\\\" of the smart contract\\n\\t *      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\\n\\t *\\n\\t * @return true if the caller is the current owner.\\n\\t */\\n\\tfunction isOwner(address _addr) public view virtual returns(bool) {\\n\\t\\t// just evaluate and return the result\\n\\t\\treturn _addr == owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to set smart contract \\\"owner\\\"\\n\\t *      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\\n\\t *\\n\\t * @dev Requires executor to have ROLE_OWNER_MANAGER permission\\n\\t *\\n\\t * @param _owner new \\\"owner\\\" of the smart contract\\n\\t */\\n\\tfunction transferOwnership(address _owner) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_OWNER_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit OwnerUpdated(msg.sender, owner, _owner);\\n\\n\\t\\t// update \\\"owner\\\"\\n\\t\\towner = _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc IERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, UpgradeableERC721) returns (bool) {\\n\\t\\t// construct the interface support from EIP-2981 and super interfaces\\n\\t\\treturn interfaceId == type(EIP2981).interfaceId || super.supportsInterface(interfaceId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x06f9b6dbcafe7e26c53c9ec26f4eda54d824fb6d7b1e0e71b49383e0b053d9e1\",\"license\":\"MIT\"},\"contracts/token/UpgradeableERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"../interfaces/ERC20Spec.sol\\\";\\nimport \\\"../interfaces/ERC721SpecExt.sol\\\";\\nimport \\\"../interfaces/IdentifiableSpec.sol\\\";\\nimport \\\"../utils/UpgradeableAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\n\\n/**\\n * @title Upgradeable ERC721 Implementation\\n *\\n * @notice Zeppelin based ERC721 implementation, supporting token enumeration\\n *      (ERC721EnumerableUpgradeable) and flexible token URI management (ERC721URIStorageUpgradeable)\\n *\\n * // TODO: consider allowing to override each individual token URI\\n *\\n * @dev Based on Zeppelin ERC721EnumerableUpgradeable and ERC721URIStorageUpgradeable with some modifications\\n *      to tokenURI function\\n *\\n * @author Basil Gorin\\n */\\nabstract contract UpgradeableERC721 is IdentifiableToken, MintableERC721, BurnableERC721, ERC721EnumerableUpgradeable, ERC721URIStorageUpgradeable, UpgradeableAccessControl {\\n\\t/**\\n\\t * @dev Base URI is used to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t *\\n\\t * @dev If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`\\n\\t */\\n\\tstring public baseURI;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n\\n\\t/**\\n\\t * @notice Enables ERC721 transfers of the tokens\\n\\t *      (transfer by the token owner himself)\\n\\t * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\n\\t *      `transferFrom()` function to succeed when executed by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Enables ERC721 transfers on behalf\\n\\t *      (transfer by someone else on behalf of token owner)\\n\\t * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\n\\t *      `transferFrom()` function to succeed whe executed by approved operator\\n\\t * @dev Token owner must call `approve()` or `setApprovalForAll()`\\n\\t *      first to authorize the transfer on behalf\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\n\\n\\t/**\\n\\t * @notice Enables token owners to burn their own tokens\\n\\t *\\n\\t * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n\\t *      `burn()` function to succeed when called by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\n\\n\\t/**\\n\\t * @notice Enables approved operators to burn tokens on behalf of their owners\\n\\t *\\n\\t * @dev Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for\\n\\t *      `burn()` function to succeed when called by approved operator\\n\\t */\\n\\tuint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\n\\n\\t/**\\n\\t * @notice Token creator is responsible for creating (minting)\\n\\t *      tokens to an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n\\t *      (calling `mint` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Token destroyer is responsible for destroying (burning)\\n\\t *      tokens owned by an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\n\\t *      (calling `burn` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice URI manager is responsible for managing base URI\\n\\t *      part of the token URI ERC721Metadata interface\\n\\t *\\n\\t * @dev Role ROLE_URI_MANAGER allows updating the base URI\\n\\t *      (executing `setBaseURI` function)\\n\\t */\\n\\tuint32 public constant ROLE_URI_MANAGER = 0x0004_0000;\\n\\n\\t/**\\n\\t * @notice People do mistakes and may send ERC20 tokens by mistake; since\\n\\t *      NFT smart contract is not designed to accept and hold any ERC20 tokens,\\n\\t *      it allows the rescue manager to \\\"rescue\\\" such lost tokens\\n\\t *\\n\\t * @notice Rescue manager is responsible for \\\"rescuing\\\" ERC20 tokens accidentally\\n\\t *      sent to the smart contract\\n\\t *\\n\\t * @dev Role ROLE_RESCUE_MANAGER allows withdrawing any ERC20 tokens stored\\n\\t *      on the smart contract balance\\n\\t */\\n\\tuint32 public constant ROLE_RESCUE_MANAGER = 0x0008_0000;\\n\\n\\t/**\\n\\t * @dev Fired in setBaseURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param oldVal old _baseURI value\\n\\t * @param newVal new _baseURI value\\n\\t */\\n\\tevent BaseURIUpdated(address indexed _by, string oldVal, string newVal);\\n\\n\\t/**\\n\\t * @dev Fired in setTokenURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param tokenId token ID which URI was updated\\n\\t * @param oldVal old _baseURI value\\n\\t * @param newVal new _baseURI value\\n\\t */\\n\\tevent TokenURIUpdated(address indexed _by, uint256 tokenId, string oldVal, string newVal);\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * @param _name token name (ERC721Metadata)\\n\\t * @param _symbol token symbol (ERC721Metadata)\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(string memory _name, string memory _symbol, address _owner) internal virtual initializer {\\n\\t\\t// execute all parent initializers in cascade\\n\\t\\t__ERC721_init(_name, _symbol);\\n\\t\\t__ERC721Enumerable_init_unchained();\\n\\t\\t__ERC721URIStorage_init_unchained();\\n\\t\\tUpgradeableAccessControl._postConstruct(_owner);\\n\\n\\t\\t// initialize self\\n\\t\\tbaseURI = \\\"\\\";\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc IERC165Upgradeable\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\n\\t\\t// calculate based on own and inherited interfaces\\n\\t\\treturn ERC721EnumerableUpgradeable.supportsInterface(interfaceId)\\n\\t\\t\\t|| interfaceId == type(MintableERC721).interfaceId\\n\\t\\t\\t|| interfaceId == type(BurnableERC721).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates base URI used to construct\\n\\t *      ERC721Metadata.tokenURI\\n\\t *\\n\\t * @dev Requires executor to have ROLE_URI_MANAGER permission\\n\\t *\\n\\t * @param __baseURI new base URI to set\\n\\t */\\n\\tfunction setBaseURI(string memory __baseURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit BaseURIUpdated(msg.sender, baseURI, __baseURI);\\n\\n\\t\\t// and update base URI\\n\\t\\tbaseURI = __baseURI;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Upgradeable\\n\\t */\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\n\\t\\t// just return stored public value to support Zeppelin impl\\n\\t\\treturn baseURI;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the token URI for the token defined by its ID\\n\\t *\\n\\t * @param _tokenId an ID of the token to set URI for\\n\\t * @param _tokenURI token URI to set\\n\\t */\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// we do not verify token existence: we want to be able to\\n\\t\\t// preallocate token URIs before tokens are actually minted\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit TokenURIUpdated(msg.sender, _tokenId, \\\"zeppelin\\\", _tokenURI);\\n\\n\\t\\t// and update token URI - delegate to ERC721URIStorage\\n\\t\\t_setTokenURI(_tokenId, _tokenURI);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721URIStorageUpgradeable\\n\\t */\\n\\tfunction _setTokenURI(uint256 _tokenId, string memory _tokenURI) internal virtual override {\\n\\t\\t// delegate to ERC721URIStorage impl\\n\\t\\treturn super._setTokenURI(_tokenId, _tokenURI);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Upgradeable\\n\\t */\\n\\tfunction tokenURI(uint256 _tokenId) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (string memory) {\\n\\t\\t// delegate to ERC721URIStorage impl\\n\\t\\treturn ERC721URIStorageUpgradeable.tokenURI(_tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) public view virtual override returns(bool) {\\n\\t\\t// delegate to super implementation\\n\\t\\treturn _exists(_tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) public virtual override {\\n\\t\\t// mint token - delegate to `_mint`\\n\\t\\t_mint(_to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) public virtual override {\\n\\t\\t// mint token safely - delegate to `_safeMint`\\n\\t\\t_safeMint(_to, _tokenId, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) public virtual override {\\n\\t\\t// mint token safely - delegate to `_safeMint`\\n\\t\\t_safeMint(_to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_DESTROYER` permission\\n\\t *      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabled\\n\\t *\\n\\t * @dev Can be disabled by the contract creator forever by disabling\\n\\t *      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking\\n\\t *      its own roles to burn tokens and to enable burning features\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) public virtual override {\\n\\t\\t// burn token - delegate to `_burn`\\n\\t\\t_burn(_tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Upgradeable\\n\\t */\\n\\tfunction _mint(address _to, uint256 _tokenId) internal virtual override {\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\n\\n\\t\\t// delegate to super implementation\\n\\t\\tsuper._mint(_to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Upgradeable\\n\\t */\\n\\tfunction _burn(uint256 _tokenId) internal virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) {\\n\\t\\t// read token owner data\\n\\t\\t// verifies token exists under the hood\\n\\t\\taddress _from = ownerOf(_tokenId);\\n\\n\\t\\t// check if caller has sufficient permissions to burn tokens\\n\\t\\t// and if not - check for possibility to burn own tokens or to burn on behalf\\n\\t\\tif(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\n\\t\\t\\t// if `_from` is equal to sender, require own burns feature to be enabled\\n\\t\\t\\t// otherwise require burns on behalf feature to be enabled\\n\\t\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\n\\t\\t\\t\\t   || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\n\\t\\t\\t\\t      _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\n\\n\\t\\t\\t// verify sender is either token owner, or approved by the token owner to burn tokens\\n\\t\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\n\\t\\t}\\n\\n\\t\\t// delegate to the super implementation with URI burning\\n\\t\\tERC721URIStorageUpgradeable._burn(_tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Upgradeable\\n\\t */\\n\\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n\\t\\t// for transfers only - verify if transfers are enabled\\n\\t\\trequire(_from == address(0) || _to == address(0) // won't affect minting/burning\\n\\t\\t\\t   || _from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\\n\\t\\t\\t   || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\n\\t\\t\\t      _from == msg.sender? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\n\\n\\t\\t// delegate to ERC721Enumerable impl\\n\\t\\tERC721EnumerableUpgradeable._beforeTokenTransfer(_from, _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to rescue accidentally sent ERC20 tokens,\\n\\t *      the tokens are rescued via `transfer` function call on the\\n\\t *      contract address specified and with the parameters specified:\\n\\t *      `_contract.transfer(_to, _value)`\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_RESCUE_MANAGER` permission\\n\\t *\\n\\t * @param _contract smart contract address to execute `transfer` function on\\n\\t * @param _to to address in `transfer(_to, _value)`\\n\\t * @param _value value to transfer in `transfer(_to, _value)`\\n\\t */\\n\\tfunction rescueErc20(address _contract, address _to, uint256 _value) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_RESCUE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// perform the transfer as requested, without any checks\\n\\t\\tERC20(_contract).transfer(_to, _value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x1666e5f9c1368952bcab1e8a3de8abc0e901dd6a110615b6fb59a82c65447b74\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @title Access Control List\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @author Basil Gorin\\n */\\nabstract contract AccessControl {\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @notice Privileged addresses with defined roles/permissions\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t */\\n\\tmapping(address => uint256) public userRoles;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param _by operator which called the function\\n\\t * @param _to address which was granted/revoked permissions\\n\\t * @param _requested permissions requested\\n\\t * @param _actual permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n\\t/**\\n\\t * @notice Creates an access control instance,  setting the contract owner to have full privileges\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tconstructor(address _owner) {\\n\\t\\t// contract creator has full privileges\\n\\t\\tuserRoles[_owner] = FULL_PRIVILEGES_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns(uint256) {\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\n\\t\\treturn userRoles[address(this)];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for or zero\\n\\t *      to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = userRoles[operator];\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(userRoles[operator], required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb2a061d41b7483bbc18604837211d66929f6206dba2f4750899c030a38ca45cb\",\"license\":\"MIT\"},\"contracts/utils/UpgradeableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title Upgradeable Access Control List // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an upgradeable version of the ACL, based on Zeppelin implementation for ERC1967,\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *\\n * @author Basil Gorin\\n */\\nabstract contract UpgradeableAccessControl is UUPSUpgradeable {\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @notice Upgrade manager is responsible for smart contract upgrades,\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n\\t *\\n\\t * @dev Role ROLE_UPGRADE_MANAGER allows passing the _authorizeUpgrade() check\\n\\t * @dev Role ROLE_UPGRADE_MANAGER has single bit at position 254 enabled\\n\\t */\\n\\tuint256 public constant ROLE_UPGRADE_MANAGER = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @notice Privileged addresses with defined roles/permissions\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t */\\n\\tmapping(address => uint256) public userRoles;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param _by operator which called the function\\n\\t * @param _to address which was granted/revoked permissions\\n\\t * @param _requested permissions requested\\n\\t * @param _actual permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n\\t/**\\n\\t * @dev UUPS initializer, sets the contract owner to have full privileges\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(address _owner) internal virtual initializer {\\n\\t\\t// grant owner full privileges\\n\\t\\tuserRoles[_owner] = FULL_PRIVILEGES_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns(uint256) {\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\n\\t\\treturn userRoles[address(this)];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for or zero\\n\\t *      to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = userRoles[operator];\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(userRoles[operator], required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc UUPSUpgradeable\\n\\t */\\n\\tfunction _authorizeUpgrade(address newImplementation) internal virtual override {\\n\\t\\t// caller must have a permission to upgrade the contract\\n\\t\\trequire(isSenderInRole(ROLE_UPGRADE_MANAGER), \\\"access denied\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xd9f4078c0ed9a72222b6bc21047f6106dd20b1e1b9ddb685fca20085e5013c31\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162002dd638038062002dd6833981016040819052620000349162000532565b33600090815260208190526040902060001990556001600160a01b038316620000a45760405162461bcd60e51b815260206004820152601a60248201527f74617267657420636f6e7472616374206973206e6f742073657400000000000060448201526064015b60405180910390fd5b6001600160a01b038216620000fc5760405162461bcd60e51b815260206004820152601860248201527f73494c5620636f6e7472616374206973206e6f7420736574000000000000000060448201526064016200009b565b6001600160a01b038116620001545760405162461bcd60e51b815260206004820152601960248201527f6f7261636c652061646472657373206973206e6f74207365740000000000000060448201526064016200009b565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b1580156200019b57600080fd5b505afa158015620001b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d691906200057c565b80156200026057506040516301ffc9a760e01b81526326e2e61760e01b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b1580156200022557600080fd5b505afa1580156200023a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200026091906200057c565b8015620002ea57506040516301ffc9a760e01b81526315bca86160e21b60048201526001600160a01b038416906301ffc9a79060240160206040518083038186803b158015620002af57600080fd5b505afa158015620002c4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ea91906200057c565b620003385760405162461bcd60e51b815260206004820152601660248201527f756e65787065637465642074617267657420747970650000000000000000000060448201526064016200009b565b816001600160a01b0316638a114e136040518163ffffffff1660e01b815260040160206040518083038186803b1580156200037257600080fd5b505afa15801562000387573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ad9190620005a7565b7fac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62146200041d5760405162461bcd60e51b815260206004820152601360248201527f756e65787065637465642073494c56205549440000000000000000000000000060448201526064016200009b565b6040516301ffc9a760e01b8152634da8552760e11b60048201526001600160a01b038216906301ffc9a79060240160206040518083038186803b1580156200046457600080fd5b505afa15801562000479573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049f91906200057c565b620004ed5760405162461bcd60e51b815260206004820152601660248201527f756e6578706563746564206f7261636c6520747970650000000000000000000060448201526064016200009b565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620005c1565b80516001600160a01b03811681146200052d57600080fd5b919050565b6000806000606084860312156200054857600080fd5b620005538462000515565b9250620005636020850162000515565b9150620005736040850162000515565b90509250925092565b6000602082840312156200058f57600080fd5b81518015158114620005a057600080fd5b9392505050565b600060208284031215620005ba57600080fd5b5051919050565b60805160601c60a05160601c60c05160601c61279d620006396000396000818161034b01526119bc01526000818161043801528181610afa0152818161168d015281816117cd01528181611a6201528181611b020152611bd30152600081816104f9015281816114a50152611549015261279d6000f3fe60806040526004361061023b5760003560e01c80639e1672c11161012e578063d5bb7f67116100ab578063ebf0c7171161006f578063ebf0c7171461071e578063f822d5aa14610734578063f8ca5bfe14610754578063fad70eed14610767578063fcc2c0781461078757600080fd5b8063d5bb7f671461069f578063dd3f8774146106bf578063e60999ab146106d4578063e6a7ad63146106e7578063e88988931461070757600080fd5b8063ae682e2e116100f2578063ae682e2e1461060b578063b56e035114610623578063c10b935814610643578063c241de2814610668578063c688d6931461067f57600080fd5b80639e1672c11461056a578063a810a54c1461058e578063ab0bcc41146105ae578063abd87bf3146105cb578063ae5b102e146105eb57600080fd5b80635228f141116101bc578063725f362611610180578063725f36261461049a57806374d5e100146104ba5780637f953252146104e757806388a5dbd91461051b57806396ebd9261461055357600080fd5b80635228f141146103de578063544b42aa14610402578063559b0e2d1461042657806355bc14121461045a5780636f8a75131461047a57600080fd5b8063243feb9911610203578063243feb99146103195780632630c12f146103395780632b521416146103855780632d17f8bc146103a757806338af3eed146103be57600080fd5b80630eb633f6146102405780631c31f7101461026b5780632071a9f41461028d57806322eb9363146102bb57806322f3e2d4146102f4575b600080fd5b34801561024c57600080fd5b506102556107a7565b6040516102629190612328565b60405180910390f35b34801561027757600080fd5b5061028b610286366004611ee5565b610831565b005b34801561029957600080fd5b506102ad6102a8366004612118565b6108ae565b604051908152602001610262565b3480156102c757600080fd5b506002546102df90600160401b900463ffffffff1681565b60405163ffffffff9091168152602001610262565b34801561030057600080fd5b50610309610a3d565b6040519015158152602001610262565b34801561032557600080fd5b5061028b610334366004611f3b565b610ad0565b34801561034557600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610262565b34801561039157600080fd5b50306000908152602081905260409020546102ad565b3480156103b357600080fd5b506102df6208000081565b3480156103ca57600080fd5b5060045461036d906001600160a01b031681565b3480156103ea57600080fd5b506002546102df90600160801b900463ffffffff1681565b34801561040e57600080fd5b506002546102df90600160601b900463ffffffff1681565b34801561043257600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561046657600080fd5b506102ad610475366004612144565b610bf7565b34801561048657600080fd5b5061028b610495366004612017565b610c04565b3480156104a657600080fd5b506103096104b5366004612017565b610c69565b3480156104c657600080fd5b506102ad6104d5366004611ee5565b60006020819052908152604090205481565b3480156104f357600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561052757600080fd5b5061053b610536366004612017565b610c84565b6040516001600160601b039091168152602001610262565b34801561055f57600080fd5b506102df6204000081565b34801561057657600080fd5b506002546102df90600160a01b900463ffffffff1681565b34801561059a57600080fd5b5061028b6105a9366004611fdd565b610cc1565b3480156105ba57600080fd5b506002546102df9063ffffffff1681565b3480156105d757600080fd5b506102ad6105e6366004612177565b610cce565b3480156105f757600080fd5b5061028b610606366004611f7c565b610ef7565b34801561061757600080fd5b506102ad600160ff1b81565b34801561062f57600080fd5b5061028b61063e3660046121ba565b610fa1565b34801561064f57600080fd5b506002546102df90640100000000900463ffffffff1681565b34801561067457600080fd5b506102df6202000081565b34801561068b57600080fd5b5061030961069a366004611f7c565b6111aa565b3480156106ab57600080fd5b5061028b6106ba366004612017565b6111cc565b3480156106cb57600080fd5b506102df600181565b3480156106e057600080fd5b50426102df565b3480156106f357600080fd5b50610309610702366004612030565b6111d6565b34801561071357600080fd5b506102df6201000081565b34801561072a57600080fd5b506102ad60015481565b34801561074057600080fd5b506102ad61074f366004611fa8565b611288565b61028b610762366004612030565b6112b3565b34801561077357600080fd5b5061028b610782366004611f02565b6115fe565b34801561079357600080fd5b506103096107a2366004612017565b611897565b6060600380548060200260200160405190810160405280929190818152602001828054801561082757602002820191906000526020600020906000905b82829054906101000a90046001600160601b03166001600160601b0316815260200190600c0190602082600b010492830192600103820291508084116107e45790505b5050505050905090565b61083d62040000611897565b6108625760405162461bcd60e51b815260040161085990612375565b60405180910390fd5b600480546001600160a01b0319166001600160a01b03831690811790915560405133907fe72eaf6addaa195f3c83095031dd08f3a96808dcf047babed1fe4e4f69d6c62290600090a350565b6000806108bb84846125df565b604080516101008101825266050638410593e7815266043993dba7736160208201526603dfcf9e07c3a9918101919091526603b5c2efd98f1560608201526603a168f88ae22460808201526603976600cd677460a08201526603926ee41a35e260c082015266038ff5e95c94da60e08201529086901c915066038d7ea4c6800060005b60088160ff161080156109515750600086115b801561095d5750600187115b15610a2f5761096c87876126d8565b95506109796002886125df565b96508686106109c757828160ff166008811061099757610997612718565b602002015166ffffffffffffff168266ffffffffffffff16856109ba9190612616565b6109c491906125df565b93505b6109d2876002612616565b8610610a1d57828160ff16600881106109ed576109ed612718565b602002015166ffffffffffffff168266ffffffffffffff1685610a109190612616565b610a1a91906125df565b93505b80610a27816126b8565b91505061093e565b5091925050505b9392505050565b60004260025463ffffffff918216911611801590610a705750600254640100000000900463ffffffff164263ffffffff16105b8015610a8a5750600254600160401b900463ffffffff1615155b8015610aa45750600254600160601b900463ffffffff1615155b8015610abe5750600254600160801b900463ffffffff1615155b8015610acb575060035415155b905090565b610adc62080000611897565b610af85760405162461bcd60e51b815260040161085990612375565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610b6f5760405162461bcd60e51b81526020600482015260126024820152711cd25315881858d8d95cdcc819195b9a595960721b6044820152606401610859565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611ffa565b50505050565b6000610a36838342610cce565b610c1062010000611897565b610c2c5760405162461bcd60e51b815260040161085990612375565b600181905560405181815233907f714dceb37ab5c7fb26ab805d3dc0423f5d90c3dac9f6702a2ea1402ea847851c9060200160405180910390a250565b30600090815260208190526040812054821682145b92915050565b60038181548110610c9457600080fd5b9060005260206000209060029182820401919006600c02915054906101000a90046001600160601b031681565b610ccb33826115fe565b50565b6002546000908190610ced90600160a01b900463ffffffff1686612635565b600254610d00919063ffffffff166125b7565b600254909150600090610d2090600160801b900463ffffffff16836125b7565b60025490915063ffffffff808616911611801590610d51575060025463ffffffff6401000000009091048116908516105b610d8c5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642074696d6560a01b6044820152606401610859565b8363ffffffff168263ffffffff1611158015610db357508063ffffffff168463ffffffff16105b610df25760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642073657175656e636560801b6044820152606401610859565b60035461ffff861610610e365760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103a34b2b960a11b6044820152606401610859565b610e408285612678565b600254909450610e5d90600160601b900463ffffffff16856125f3565b600254909450610e7a90600160601b900463ffffffff1685612635565b9350610eed60038661ffff1681548110610e9657610e96612718565b9060005260206000209060029182820401919006600c029054906101000a90046001600160601b03166001600160601b0316600260089054906101000a900463ffffffff1663ffffffff168663ffffffff166108ae565b9695505050505050565b610f04600160ff1b611897565b610f205760405162461bcd60e51b815260040161085990612375565b6001600160a01b038216600090815260208190526040902054610f4590339083611288565b6001600160a01b03831660008181526020818152604091829020849055815185815290810193909352909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a35050565b610fad62020000611897565b610fc95760405162461bcd60e51b815260040161085990612375565b63ffffffff87811614610fec576002805463ffffffff191663ffffffff89161790555b63ffffffff8681161461101a576002805467ffffffff00000000191664010000000063ffffffff8916021790555b63ffffffff8581161461104b57600280546bffffffff00000000000000001916600160401b63ffffffff8816021790555b63ffffffff84811614611077576002805463ffffffff60601b1916600160601b63ffffffff8716021790555b63ffffffff838116146110a3576002805463ffffffff60801b1916600160801b63ffffffff8616021790555b63ffffffff828116146110cf576002805463ffffffff60a01b1916600160a01b63ffffffff8516021790555b8051600114158061110c57506001600160601b038016816000815181106110f8576110f8612718565b60200260200101516001600160601b031614155b15611126578051611124906003906020840190611d7b565b505b60025460405133917fe03b2dd0888aa70a6f097b0598735e4b7e537c89a2a702e9d3c45d6bb158e9ea916111999163ffffffff808216926401000000008304821692600160401b8104831692600160601b8204811692600160801b8304821692600160a01b90049091169060039061244f565b60405180910390a250505050505050565b6001600160a01b03821660009081526020819052604081205482168214610a36565b610ccb3082610ef7565b81516020808401516040808601516060870151608088015160a089015160c08a015185516001600160e01b031960e09a8b1b8116828b01529790991b90961660248901526001600160f01b031960f094851b811660288a015292841b8316602a89015290831b8216602c880152821b8116602e87015292901b90911660308401528051808403601201815260329093019052815191012060015460009190611280908490836118a3565b949350505050565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b6112bd6001610c69565b6112f95760405162461bcd60e51b815260206004820152600d60248201526c1cd85b1948191a5cd8589b1959609a1b6044820152606401610859565b611301610a3d565b61133d5760405162461bcd60e51b815260206004820152600d60248201526c696e6163746976652073616c6560981b6044820152606401610859565b6001546113795760405162461bcd60e51b815260206004820152600a602482015269656d7074792073616c6560b01b6044820152606401610859565b61138382826111d6565b6113be5760405162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a59081c1b1bdd60a21b6044820152606401610859565b6000806113d384602001518560a00151611952565b85519193509150600090426040516001600160e01b031960e093841b811660208301529190921b1660248201526bffffffffffffffffffffffff193360601b166028820152603c016040516020818303038152906040528051906020012060001c905060006040518060e00160405280876040015161ffff168152602001876060015161ffff168152602001876080015161ffff1681526020018760a0015161ffff1681526020018760c0015161ffff168152602001600161ffff168152602001836001600160a01b031681525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b526ad898760000151836040518363ffffffff1660e01b81526004016114f5929190612434565b600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505087516040516340c10f1960e01b815233600482015263ffffffff90911660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506340c10f199150604401600060405180830381600087803b15801561159757600080fd5b505af11580156115ab573d6000803e3d6000fd5b50505050336001600160a01b03167f2b363457abcc76b0700848eaac17a08f1529dac32c4c6dc3438c606097a027d2878387876040516115ee949392919061239c565b60405180910390a2505050505050565b61160a62040000611897565b6116265760405162461bcd60e51b815260040161085990612375565b6001600160a01b0382166116705760405162461bcd60e51b81526020600482015260116024820152701c9958da5c1a595b9d081b9bdd081cd95d607a1b6044820152606401610859565b47600082611714576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f91906120ff565b611717565b60005b905060008211806117285750600081115b6117635760405162461bcd60e51b815260206004820152600c60248201526b7a65726f2062616c616e636560a01b6044820152606401610859565b81156117a1576040516001600160a01b0385169083156108fc029084906000818181858888f1935050505015801561179f573d6000803e3d6000fd5b505b801561184b5760405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561181157600080fd5b505af1158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190611ffa565b505b60408051838152602081018390526001600160a01b0386169133917f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2910160405180910390a350505050565b6000610c7e33836111aa565b600081815b85518110156119475760008682815181106118c5576118c5612718565b60200260200101519050808311611907576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611934565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061193f8161269d565b9150506118a8565b509092149392505050565b60008061195f8484610bf7565b9150816119a15760405162461bcd60e51b815260206004820152601060248201526f3ab739bab83837b93a32b2103a34b2b960811b6044820152606401610859565b34611ca257604051634da8552760e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b50aa4e90602401602060405180830381600087803b158015611a0857600080fd5b505af1158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4091906120ff565b6040516370a0823160e01b815233600482015290915081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc91906120ff565b10158015611b875750604051636eb1769f60e11b815233600482015230602482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8491906120ff565b10155b611bc65760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f7567682066756e647360801b6044820152606401610859565b6004546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916323b872dd91339116611c085730611c15565b6004546001600160a01b03165b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401602060405180830381600087803b158015611c6457600080fd5b505af1158015611c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9c9190611ffa565b50611d74565b81341015611ce35760405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced0408aa8960931b6044820152606401610859565b6004546001600160a01b031615611d30576004546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015611d2e573d6000803e3d6000fd5b505b81341115611d7057336108fc611d468434612661565b6040518115909202916000818181858888f19350505050158015611d6e573d6000803e3d6000fd5b505b5060005b9250929050565b82805482825590600052602060002090600101600290048101928215611e235791602002820160005b83821115611dee57835183826101000a8154816001600160601b0302191690836001600160601b031602179055509260200192600c01602081600b01049283019260010302611da4565b8015611e215782816101000a8154906001600160601b030219169055600c01602081600b01049283019260010302611dee565b505b50611e2f929150611e33565b5090565b5b80821115611e2f5760008155600101611e34565b600082601f830112611e5957600080fd5b81356020611e6e611e6983612593565b612562565b80838252828201915082860187848660051b8901011115611e8e57600080fd5b60005b85811015611ead57813584529284019290840190600101611e91565b5090979650505050505050565b803561ffff81168114611ecc57600080fd5b919050565b803563ffffffff81168114611ecc57600080fd5b600060208284031215611ef757600080fd5b8135610a3681612744565b60008060408385031215611f1557600080fd5b8235611f2081612744565b91506020830135611f3081612759565b809150509250929050565b600080600060608486031215611f5057600080fd5b8335611f5b81612744565b92506020840135611f6b81612744565b929592945050506040919091013590565b60008060408385031215611f8f57600080fd5b8235611f9a81612744565b946020939093013593505050565b600080600060608486031215611fbd57600080fd5b8335611fc881612744565b95602085013595506040909401359392505050565b600060208284031215611fef57600080fd5b8135610a3681612759565b60006020828403121561200c57600080fd5b8151610a3681612759565b60006020828403121561202957600080fd5b5035919050565b60008082840361010081121561204557600080fd5b60e081121561205357600080fd5b5061205c612539565b61206584611ed1565b815261207360208501611ed1565b602082015261208460408501611eba565b604082015261209560608501611eba565b60608201526120a660808501611eba565b60808201526120b760a08501611eba565b60a08201526120c860c08501611eba565b60c0820152915060e083013567ffffffffffffffff8111156120e957600080fd5b6120f585828601611e48565b9150509250929050565b60006020828403121561211157600080fd5b5051919050565b60008060006060848603121561212d57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561215757600080fd5b61216083611ed1565b915061216e60208401611eba565b90509250929050565b60008060006060848603121561218c57600080fd5b61219584611ed1565b92506121a360208501611eba565b91506121b160408501611ed1565b90509250925092565b600080600080600080600060e0888a0312156121d557600080fd5b6121de88611ed1565b965060206121ed818a01611ed1565b96506121fb60408a01611ed1565b955061220960608a01611ed1565b945061221760808a01611ed1565b935061222560a08a01611ed1565b925060c089013567ffffffffffffffff81111561224157600080fd5b8901601f81018b1361225257600080fd5b8035612260611e6982612593565b8082825284820191508484018e868560051b870101111561228057600080fd5b60009450845b848110156122b65781356001600160601b03811681146122a4578687fd5b84529286019290860190600101612286565b5050809550505050505092959891949750929550565b61ffff8082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a08401525060018060a01b0360c08201511660c08301525050565b6020808252825182820181905260009190848201906040850190845b818110156123695783516001600160601b031683529284019291840191600101612344565b50909695505050505050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b60006102008201905063ffffffff80875116835280602088015116602084015250604086015161ffff8082166040850152806060890151166060850152806080890151166080850152505060a08601516123fc60a084018261ffff169052565b5060c086015161241260c084018261ffff169052565b5061242060e08301866122cc565b6101c08201939093526101e0015292915050565b63ffffffff831681526101008101610a3660208301846122cc565b600060e0820163ffffffff808b1684526020818b16818601526040828b16818701526060838b1681880152838a16608088015283891660a088015260e060c088015284935087546124a4818790815260200190565b60008a81526020812097509095505b600182818301106124c457506124eb565b87546001600160601b03808216895290851c168688015290960195948301946002016124b3565b9554958181101561250a576001600160601b0387168652948401946001015b818110156125255786831c6001600160601b03168652948401945b50939e9d5050505050505050505050505050565b60405160e0810167ffffffffffffffff8111828210171561255c5761255c61272e565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561258b5761258b61272e565b604052919050565b600067ffffffffffffffff8211156125ad576125ad61272e565b5060051b60200190565b600063ffffffff8083168185168083038211156125d6576125d66126ec565b01949350505050565b6000826125ee576125ee612702565b500490565b600063ffffffff8084168061260a5761260a612702565b92169190910492915050565b6000816000190483118215151615612630576126306126ec565b500290565b600063ffffffff80831681851681830481118215151615612658576126586126ec565b02949350505050565b600082821015612673576126736126ec565b500390565b600063ffffffff83811690831681811015612695576126956126ec565b039392505050565b60006000198214156126b1576126b16126ec565b5060010190565b600060ff821660ff8114156126cf576126cf6126ec565b60010192915050565b6000826126e7576126e7612702565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ccb57600080fd5b8015158114610ccb57600080fdfea26469706673582212200c490e3b2cf693a9c26b48cf3b2c8e3b20bb423d63a0f91682fa04cd5f8a486f64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80639e1672c11161012e578063d5bb7f67116100ab578063ebf0c7171161006f578063ebf0c7171461071e578063f822d5aa14610734578063f8ca5bfe14610754578063fad70eed14610767578063fcc2c0781461078757600080fd5b8063d5bb7f671461069f578063dd3f8774146106bf578063e60999ab146106d4578063e6a7ad63146106e7578063e88988931461070757600080fd5b8063ae682e2e116100f2578063ae682e2e1461060b578063b56e035114610623578063c10b935814610643578063c241de2814610668578063c688d6931461067f57600080fd5b80639e1672c11461056a578063a810a54c1461058e578063ab0bcc41146105ae578063abd87bf3146105cb578063ae5b102e146105eb57600080fd5b80635228f141116101bc578063725f362611610180578063725f36261461049a57806374d5e100146104ba5780637f953252146104e757806388a5dbd91461051b57806396ebd9261461055357600080fd5b80635228f141146103de578063544b42aa14610402578063559b0e2d1461042657806355bc14121461045a5780636f8a75131461047a57600080fd5b8063243feb9911610203578063243feb99146103195780632630c12f146103395780632b521416146103855780632d17f8bc146103a757806338af3eed146103be57600080fd5b80630eb633f6146102405780631c31f7101461026b5780632071a9f41461028d57806322eb9363146102bb57806322f3e2d4146102f4575b600080fd5b34801561024c57600080fd5b506102556107a7565b6040516102629190612328565b60405180910390f35b34801561027757600080fd5b5061028b610286366004611ee5565b610831565b005b34801561029957600080fd5b506102ad6102a8366004612118565b6108ae565b604051908152602001610262565b3480156102c757600080fd5b506002546102df90600160401b900463ffffffff1681565b60405163ffffffff9091168152602001610262565b34801561030057600080fd5b50610309610a3d565b6040519015158152602001610262565b34801561032557600080fd5b5061028b610334366004611f3b565b610ad0565b34801561034557600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610262565b34801561039157600080fd5b50306000908152602081905260409020546102ad565b3480156103b357600080fd5b506102df6208000081565b3480156103ca57600080fd5b5060045461036d906001600160a01b031681565b3480156103ea57600080fd5b506002546102df90600160801b900463ffffffff1681565b34801561040e57600080fd5b506002546102df90600160601b900463ffffffff1681565b34801561043257600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561046657600080fd5b506102ad610475366004612144565b610bf7565b34801561048657600080fd5b5061028b610495366004612017565b610c04565b3480156104a657600080fd5b506103096104b5366004612017565b610c69565b3480156104c657600080fd5b506102ad6104d5366004611ee5565b60006020819052908152604090205481565b3480156104f357600080fd5b5061036d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561052757600080fd5b5061053b610536366004612017565b610c84565b6040516001600160601b039091168152602001610262565b34801561055f57600080fd5b506102df6204000081565b34801561057657600080fd5b506002546102df90600160a01b900463ffffffff1681565b34801561059a57600080fd5b5061028b6105a9366004611fdd565b610cc1565b3480156105ba57600080fd5b506002546102df9063ffffffff1681565b3480156105d757600080fd5b506102ad6105e6366004612177565b610cce565b3480156105f757600080fd5b5061028b610606366004611f7c565b610ef7565b34801561061757600080fd5b506102ad600160ff1b81565b34801561062f57600080fd5b5061028b61063e3660046121ba565b610fa1565b34801561064f57600080fd5b506002546102df90640100000000900463ffffffff1681565b34801561067457600080fd5b506102df6202000081565b34801561068b57600080fd5b5061030961069a366004611f7c565b6111aa565b3480156106ab57600080fd5b5061028b6106ba366004612017565b6111cc565b3480156106cb57600080fd5b506102df600181565b3480156106e057600080fd5b50426102df565b3480156106f357600080fd5b50610309610702366004612030565b6111d6565b34801561071357600080fd5b506102df6201000081565b34801561072a57600080fd5b506102ad60015481565b34801561074057600080fd5b506102ad61074f366004611fa8565b611288565b61028b610762366004612030565b6112b3565b34801561077357600080fd5b5061028b610782366004611f02565b6115fe565b34801561079357600080fd5b506103096107a2366004612017565b611897565b6060600380548060200260200160405190810160405280929190818152602001828054801561082757602002820191906000526020600020906000905b82829054906101000a90046001600160601b03166001600160601b0316815260200190600c0190602082600b010492830192600103820291508084116107e45790505b5050505050905090565b61083d62040000611897565b6108625760405162461bcd60e51b815260040161085990612375565b60405180910390fd5b600480546001600160a01b0319166001600160a01b03831690811790915560405133907fe72eaf6addaa195f3c83095031dd08f3a96808dcf047babed1fe4e4f69d6c62290600090a350565b6000806108bb84846125df565b604080516101008101825266050638410593e7815266043993dba7736160208201526603dfcf9e07c3a9918101919091526603b5c2efd98f1560608201526603a168f88ae22460808201526603976600cd677460a08201526603926ee41a35e260c082015266038ff5e95c94da60e08201529086901c915066038d7ea4c6800060005b60088160ff161080156109515750600086115b801561095d5750600187115b15610a2f5761096c87876126d8565b95506109796002886125df565b96508686106109c757828160ff166008811061099757610997612718565b602002015166ffffffffffffff168266ffffffffffffff16856109ba9190612616565b6109c491906125df565b93505b6109d2876002612616565b8610610a1d57828160ff16600881106109ed576109ed612718565b602002015166ffffffffffffff168266ffffffffffffff1685610a109190612616565b610a1a91906125df565b93505b80610a27816126b8565b91505061093e565b5091925050505b9392505050565b60004260025463ffffffff918216911611801590610a705750600254640100000000900463ffffffff164263ffffffff16105b8015610a8a5750600254600160401b900463ffffffff1615155b8015610aa45750600254600160601b900463ffffffff1615155b8015610abe5750600254600160801b900463ffffffff1615155b8015610acb575060035415155b905090565b610adc62080000611897565b610af85760405162461bcd60e51b815260040161085990612375565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610b6f5760405162461bcd60e51b81526020600482015260126024820152711cd25315881858d8d95cdcc819195b9a595960721b6044820152606401610859565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015610bb957600080fd5b505af1158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf19190611ffa565b50505050565b6000610a36838342610cce565b610c1062010000611897565b610c2c5760405162461bcd60e51b815260040161085990612375565b600181905560405181815233907f714dceb37ab5c7fb26ab805d3dc0423f5d90c3dac9f6702a2ea1402ea847851c9060200160405180910390a250565b30600090815260208190526040812054821682145b92915050565b60038181548110610c9457600080fd5b9060005260206000209060029182820401919006600c02915054906101000a90046001600160601b031681565b610ccb33826115fe565b50565b6002546000908190610ced90600160a01b900463ffffffff1686612635565b600254610d00919063ffffffff166125b7565b600254909150600090610d2090600160801b900463ffffffff16836125b7565b60025490915063ffffffff808616911611801590610d51575060025463ffffffff6401000000009091048116908516105b610d8c5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642074696d6560a01b6044820152606401610859565b8363ffffffff168263ffffffff1611158015610db357508063ffffffff168463ffffffff16105b610df25760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642073657175656e636560801b6044820152606401610859565b60035461ffff861610610e365760405162461bcd60e51b815260206004820152600c60248201526b34b73b30b634b2103a34b2b960a11b6044820152606401610859565b610e408285612678565b600254909450610e5d90600160601b900463ffffffff16856125f3565b600254909450610e7a90600160601b900463ffffffff1685612635565b9350610eed60038661ffff1681548110610e9657610e96612718565b9060005260206000209060029182820401919006600c029054906101000a90046001600160601b03166001600160601b0316600260089054906101000a900463ffffffff1663ffffffff168663ffffffff166108ae565b9695505050505050565b610f04600160ff1b611897565b610f205760405162461bcd60e51b815260040161085990612375565b6001600160a01b038216600090815260208190526040902054610f4590339083611288565b6001600160a01b03831660008181526020818152604091829020849055815185815290810193909352909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a35050565b610fad62020000611897565b610fc95760405162461bcd60e51b815260040161085990612375565b63ffffffff87811614610fec576002805463ffffffff191663ffffffff89161790555b63ffffffff8681161461101a576002805467ffffffff00000000191664010000000063ffffffff8916021790555b63ffffffff8581161461104b57600280546bffffffff00000000000000001916600160401b63ffffffff8816021790555b63ffffffff84811614611077576002805463ffffffff60601b1916600160601b63ffffffff8716021790555b63ffffffff838116146110a3576002805463ffffffff60801b1916600160801b63ffffffff8616021790555b63ffffffff828116146110cf576002805463ffffffff60a01b1916600160a01b63ffffffff8516021790555b8051600114158061110c57506001600160601b038016816000815181106110f8576110f8612718565b60200260200101516001600160601b031614155b15611126578051611124906003906020840190611d7b565b505b60025460405133917fe03b2dd0888aa70a6f097b0598735e4b7e537c89a2a702e9d3c45d6bb158e9ea916111999163ffffffff808216926401000000008304821692600160401b8104831692600160601b8204811692600160801b8304821692600160a01b90049091169060039061244f565b60405180910390a250505050505050565b6001600160a01b03821660009081526020819052604081205482168214610a36565b610ccb3082610ef7565b81516020808401516040808601516060870151608088015160a089015160c08a015185516001600160e01b031960e09a8b1b8116828b01529790991b90961660248901526001600160f01b031960f094851b811660288a015292841b8316602a89015290831b8216602c880152821b8116602e87015292901b90911660308401528051808403601201815260329093019052815191012060015460009190611280908490836118a3565b949350505050565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b6112bd6001610c69565b6112f95760405162461bcd60e51b815260206004820152600d60248201526c1cd85b1948191a5cd8589b1959609a1b6044820152606401610859565b611301610a3d565b61133d5760405162461bcd60e51b815260206004820152600d60248201526c696e6163746976652073616c6560981b6044820152606401610859565b6001546113795760405162461bcd60e51b815260206004820152600a602482015269656d7074792073616c6560b01b6044820152606401610859565b61138382826111d6565b6113be5760405162461bcd60e51b815260206004820152600c60248201526b1a5b9d985b1a59081c1b1bdd60a21b6044820152606401610859565b6000806113d384602001518560a00151611952565b85519193509150600090426040516001600160e01b031960e093841b811660208301529190921b1660248201526bffffffffffffffffffffffff193360601b166028820152603c016040516020818303038152906040528051906020012060001c905060006040518060e00160405280876040015161ffff168152602001876060015161ffff168152602001876080015161ffff1681526020018760a0015161ffff1681526020018760c0015161ffff168152602001600161ffff168152602001836001600160a01b031681525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b526ad898760000151836040518363ffffffff1660e01b81526004016114f5929190612434565b600060405180830381600087803b15801561150f57600080fd5b505af1158015611523573d6000803e3d6000fd5b505087516040516340c10f1960e01b815233600482015263ffffffff90911660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506340c10f199150604401600060405180830381600087803b15801561159757600080fd5b505af11580156115ab573d6000803e3d6000fd5b50505050336001600160a01b03167f2b363457abcc76b0700848eaac17a08f1529dac32c4c6dc3438c606097a027d2878387876040516115ee949392919061239c565b60405180910390a2505050505050565b61160a62040000611897565b6116265760405162461bcd60e51b815260040161085990612375565b6001600160a01b0382166116705760405162461bcd60e51b81526020600482015260116024820152701c9958da5c1a595b9d081b9bdd081cd95d607a1b6044820152606401610859565b47600082611714576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156116d757600080fd5b505afa1580156116eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170f91906120ff565b611717565b60005b905060008211806117285750600081115b6117635760405162461bcd60e51b815260206004820152600c60248201526b7a65726f2062616c616e636560a01b6044820152606401610859565b81156117a1576040516001600160a01b0385169083156108fc029084906000818181858888f1935050505015801561179f573d6000803e3d6000fd5b505b801561184b5760405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561181157600080fd5b505af1158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190611ffa565b505b60408051838152602081018390526001600160a01b0386169133917f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe2910160405180910390a350505050565b6000610c7e33836111aa565b600081815b85518110156119475760008682815181106118c5576118c5612718565b60200260200101519050808311611907576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611934565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061193f8161269d565b9150506118a8565b509092149392505050565b60008061195f8484610bf7565b9150816119a15760405162461bcd60e51b815260206004820152601060248201526f3ab739bab83837b93a32b2103a34b2b960811b6044820152606401610859565b34611ca257604051634da8552760e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639b50aa4e90602401602060405180830381600087803b158015611a0857600080fd5b505af1158015611a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4091906120ff565b6040516370a0823160e01b815233600482015290915081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015611aa457600080fd5b505afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc91906120ff565b10158015611b875750604051636eb1769f60e11b815233600482015230602482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8491906120ff565b10155b611bc65760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f7567682066756e647360801b6044820152606401610859565b6004546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916323b872dd91339116611c085730611c15565b6004546001600160a01b03165b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401602060405180830381600087803b158015611c6457600080fd5b505af1158015611c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9c9190611ffa565b50611d74565b81341015611ce35760405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced0408aa8960931b6044820152606401610859565b6004546001600160a01b031615611d30576004546040516001600160a01b039091169083156108fc029084906000818181858888f19350505050158015611d2e573d6000803e3d6000fd5b505b81341115611d7057336108fc611d468434612661565b6040518115909202916000818181858888f19350505050158015611d6e573d6000803e3d6000fd5b505b5060005b9250929050565b82805482825590600052602060002090600101600290048101928215611e235791602002820160005b83821115611dee57835183826101000a8154816001600160601b0302191690836001600160601b031602179055509260200192600c01602081600b01049283019260010302611da4565b8015611e215782816101000a8154906001600160601b030219169055600c01602081600b01049283019260010302611dee565b505b50611e2f929150611e33565b5090565b5b80821115611e2f5760008155600101611e34565b600082601f830112611e5957600080fd5b81356020611e6e611e6983612593565b612562565b80838252828201915082860187848660051b8901011115611e8e57600080fd5b60005b85811015611ead57813584529284019290840190600101611e91565b5090979650505050505050565b803561ffff81168114611ecc57600080fd5b919050565b803563ffffffff81168114611ecc57600080fd5b600060208284031215611ef757600080fd5b8135610a3681612744565b60008060408385031215611f1557600080fd5b8235611f2081612744565b91506020830135611f3081612759565b809150509250929050565b600080600060608486031215611f5057600080fd5b8335611f5b81612744565b92506020840135611f6b81612744565b929592945050506040919091013590565b60008060408385031215611f8f57600080fd5b8235611f9a81612744565b946020939093013593505050565b600080600060608486031215611fbd57600080fd5b8335611fc881612744565b95602085013595506040909401359392505050565b600060208284031215611fef57600080fd5b8135610a3681612759565b60006020828403121561200c57600080fd5b8151610a3681612759565b60006020828403121561202957600080fd5b5035919050565b60008082840361010081121561204557600080fd5b60e081121561205357600080fd5b5061205c612539565b61206584611ed1565b815261207360208501611ed1565b602082015261208460408501611eba565b604082015261209560608501611eba565b60608201526120a660808501611eba565b60808201526120b760a08501611eba565b60a08201526120c860c08501611eba565b60c0820152915060e083013567ffffffffffffffff8111156120e957600080fd5b6120f585828601611e48565b9150509250929050565b60006020828403121561211157600080fd5b5051919050565b60008060006060848603121561212d57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561215757600080fd5b61216083611ed1565b915061216e60208401611eba565b90509250929050565b60008060006060848603121561218c57600080fd5b61219584611ed1565b92506121a360208501611eba565b91506121b160408501611ed1565b90509250925092565b600080600080600080600060e0888a0312156121d557600080fd5b6121de88611ed1565b965060206121ed818a01611ed1565b96506121fb60408a01611ed1565b955061220960608a01611ed1565b945061221760808a01611ed1565b935061222560a08a01611ed1565b925060c089013567ffffffffffffffff81111561224157600080fd5b8901601f81018b1361225257600080fd5b8035612260611e6982612593565b8082825284820191508484018e868560051b870101111561228057600080fd5b60009450845b848110156122b65781356001600160601b03811681146122a4578687fd5b84529286019290860190600101612286565b5050809550505050505092959891949750929550565b61ffff8082511683528060208301511660208401528060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a08401525060018060a01b0360c08201511660c08301525050565b6020808252825182820181905260009190848201906040850190845b818110156123695783516001600160601b031683529284019291840191600101612344565b50909695505050505050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b60006102008201905063ffffffff80875116835280602088015116602084015250604086015161ffff8082166040850152806060890151166060850152806080890151166080850152505060a08601516123fc60a084018261ffff169052565b5060c086015161241260c084018261ffff169052565b5061242060e08301866122cc565b6101c08201939093526101e0015292915050565b63ffffffff831681526101008101610a3660208301846122cc565b600060e0820163ffffffff808b1684526020818b16818601526040828b16818701526060838b1681880152838a16608088015283891660a088015260e060c088015284935087546124a4818790815260200190565b60008a81526020812097509095505b600182818301106124c457506124eb565b87546001600160601b03808216895290851c168688015290960195948301946002016124b3565b9554958181101561250a576001600160601b0387168652948401946001015b818110156125255786831c6001600160601b03168652948401945b50939e9d5050505050505050505050505050565b60405160e0810167ffffffffffffffff8111828210171561255c5761255c61272e565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561258b5761258b61272e565b604052919050565b600067ffffffffffffffff8211156125ad576125ad61272e565b5060051b60200190565b600063ffffffff8083168185168083038211156125d6576125d66126ec565b01949350505050565b6000826125ee576125ee612702565b500490565b600063ffffffff8084168061260a5761260a612702565b92169190910492915050565b6000816000190483118215151615612630576126306126ec565b500290565b600063ffffffff80831681851681830481118215151615612658576126586126ec565b02949350505050565b600082821015612673576126736126ec565b500390565b600063ffffffff83811690831681811015612695576126956126ec565b039392505050565b60006000198214156126b1576126b16126ec565b5060010190565b600060ff821660ff8114156126cf576126cf6126ec565b60010192915050565b6000826126e7576126e7612702565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610ccb57600080fd5b8015158114610ccb57600080fdfea26469706673582212200c490e3b2cf693a9c26b48cf3b2c8e3b20bb423d63a0f91682fa04cd5f8a486f64736f6c63430008070033",
  "devdoc": {
    "author": "Basil Gorin",
    "details": "Merkle proof verification is based on OpenZeppelin implementation, see      https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof",
    "events": {
      "BeneficiaryUpdated(address,address)": {
        "details": "Fired in setBeneficiary",
        "params": {
          "_beneficiary": "new beneficiary address or zero-address",
          "_by": "an address which executed the operation"
        }
      },
      "Initialized(address,uint32,uint32,uint32,uint32,uint32,uint32,uint96[])": {
        "details": "Fired in initialize()",
        "params": {
          "_by": "an address which executed the operation",
          "_halvingTime": "price halving time, the time required for a token price      to reduce to the half of its initial value",
          "_saleEnd": "sale end time, should match with the last sequence end time",
          "_saleStart": "sale start time, and first sequence start time",
          "_seqDuration": "sequence duration, time limit of how long a token / sequence      can be available for sale",
          "_seqOffset": "sequence start offset, each sequence starts `_seqOffset`      later after the previous one",
          "_startPrices": "tier start prices, starting token price for each (zero based) Tier ID",
          "_timeFlowQuantum": "time flow quantum, price update interval, used by      the price calculation algorithm to update prices"
        }
      },
      "PlotBought(address,(uint32,uint32,uint16,uint16,uint16,uint16,uint16),(uint16,uint16,uint16,uint16,uint16,uint16,uint160),uint256,uint256)": {
        "details": "Fired in buy()",
        "params": {
          "_by": "an address which had bought the plot",
          "_eth": "ETH price of the lot",
          "_plot": "on-chain plot metadata minted token (contains seed)",
          "_plotData": "off-chain plot metadata supplied externally",
          "_sIlv": "sILV price of the lot (zero if paid in ETH)"
        }
      },
      "RootChanged(address,bytes32)": {
        "details": "Fired in setInputDataRoot()",
        "params": {
          "_by": "an address which executed the operation",
          "_root": "new Merkle root value"
        }
      },
      "Withdrawn(address,address,uint256,uint256)": {
        "details": "Fired in withdraw() and withdrawTo()",
        "params": {
          "_by": "an address which executed the operation",
          "_eth": "amount of ETH withdrawn",
          "_sIlv": "amount of sILV withdrawn",
          "_to": "an address which received the funds withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "buy((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])": {
        "details": "Merkle tree and proof can be constructed using the `web3-utils`, `merkletreejs`,      and `keccak256` npm packages:      1. Hash the plot data collection elements via `web3.utils.soliditySha3`, making sure         the packing order and types are exactly as defined in `PlotData` struct      2. Create a sorted MerkleTree (`merkletreejs`) from the hashed collection, use `keccak256`         from the `keccak256` npm package as a hashing function, do not hash leaves         (already hashed in step 1); Ex. MerkleTree options: {hashLeaves: false, sortPairs: true}      3. For any given plot data element the proof is constructed by hashing it (as in step 1),         and querying the MerkleTree for a proof, providing the hashed plot data element as a leafRequires FEATURE_SALE_ACTIVE feature to be enabledThrows if current time is outside the [saleStart, saleEnd) bounds,      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),      or if the tier specified is invalid (no starting price is defined for it)See also: https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof",
        "params": {
          "plotData": "plot data to buy",
          "proof": "Merkle proof for the plot data supplied"
        }
      },
      "constructor": {
        "details": "Creates/deploys sale smart contract instance and binds it to      1) the target NFT smart contract address to be used to mint tokens (Land ERC721),      2) sILV (Escrowed Illuvium) contract address to be used as one of the payment options      3) Price Oracle contract address to be used to determine ETH/sILV price",
        "params": {
          "_nft": "target NFT smart contract address",
          "_oracle": "price oracle contract address",
          "_sIlv": "sILV (Escrowed Illuvium) contract address"
        }
      },
      "evaluateBy(address,uint256,uint256)": {
        "details": "Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011",
        "params": {
          "desired": "desired set of permissions operator would like to set",
          "operator": "address of the contract operator which is about to set the permissions",
          "target": "input set of permissions to operator is going to modify"
        },
        "returns": {
          "_0": "resulting set of permissions given operator will set"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "getStartPrices()": {
        "details": "`startPrices` getter; the getters solidity creates for arrays      may be inconvenient to use if we need an entire array to be read",
        "returns": {
          "_0": "`startPrices` as is - as an array of uint96"
        }
      },
      "initialize(uint32,uint32,uint32,uint32,uint32,uint32,uint96[])": {
        "details": "Restricted access function to set up sale parameters, all at once,      or any subset of themTo skip parameter initialization, set it to `-1`,      that is a maximum value for unsigned integer of the corresponding type;      for `_startPrices` use a single array element with the `-1` value to skipExample: following initialization will update only `_seqDuration` and `_seqOffset`,      leaving the rest of the fields unchanged      initialize(          0xFFFFFFFF, // `_saleStart` unchanged          0xFFFFFFFF, // `_saleEnd` unchanged          0xFFFFFFFF, // `_halvingTime` unchanged          21600,      // `_seqDuration` updated to 6 hours          3600,       // `_seqOffset` updated to 1 hour          [0xFFFFFFFFFFFFFFFFFFFFFFFF] // `_startPrices` unchanged      )Sale start and end times should match with the number of sequences,      sequence duration and offset, if `n` is number of sequences, then      the following equation must hold:         `saleStart + (n - 1) * seqOffset + seqDuration = saleEnd`      Note: `n` is unknown to the sale contract and there is no way for it      to accurately validate other parameters of the equation aboveInput params are not validated; to get an idea if these params look valid,      refer to `isActive() `function, and it's logicRequires transaction sender to have `ROLE_SALE_MANAGER` role",
        "params": {
          "_halvingTime": "price halving time, the time required for a token price      to reduce to the half of its initial value",
          "_saleEnd": "sale end time, should match with the last sequence end time",
          "_saleStart": "sale start time, and first sequence start time",
          "_seqDuration": "sequence duration, time limit of how long a token / sequence      can be available for sale",
          "_seqOffset": "sequence start offset, each sequence starts `_seqOffset`      later after the previous one",
          "_startPrices": "tier start prices, starting token price for each (zero based) Tier ID",
          "_timeFlowQuantum": "time flow quantum, price update interval, used by      the price calculation algorithm to update prices"
        }
      },
      "isActive()": {
        "details": "The sale is defined as active if all of the below conditions hold:      - sale start is now or in the past      - sale end is in the future      - halving time is not zero      - sequence duration is not zero      - there is at least one starting price set (zero price is valid)",
        "returns": {
          "_0": "true if sale is active, false otherwise"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isPlotValid((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])": {
        "details": "Merkle tree and proof can be constructed using the `web3-utils`, `merkletreejs`,      and `keccak256` npm packages:      1. Hash the plot data collection elements via `web3.utils.soliditySha3`, making sure         the packing order and types are exactly as defined in `PlotData` struct      2. Create a sorted MerkleTree (`merkletreejs`) from the hashed collection, use `keccak256`         from the `keccak256` npm package as a hashing function, do not hash leaves         (already hashed in step 1); Ex. MerkleTree options: {hashLeaves: false, sortPairs: true}      3. For any given plot data element the proof is constructed by hashing it (as in step 1),         and querying the MerkleTree for a proof, providing the hashed plot data element as a leafSee also: https://docs.openzeppelin.com/contracts/4.x/api/utils#MerkleProof",
        "params": {
          "plotData": "plot data to verify",
          "proof": "Merkle proof for the plot data supplied"
        },
        "returns": {
          "_0": "true if plot is valid (belongs to registered collection), false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "now32()": {
        "details": "Testing time-dependent functionality may be difficult;      we override time in the helper test smart contract (mock)",
        "returns": {
          "_0": "`block.timestamp` in mainnet, custom values in testnets (if overridden)"
        }
      },
      "price(uint256,uint256,uint256)": {
        "details": "Calculates dutch auction price after the time of interest has passed since      the auction has startedThe price is assumed to drop exponentially, according to formula:      p(t) = p0 * 2^(-t/t0)      The price halves every t0 seconds passed from the start of the auctionCalculates with the precision p0 * 2^(-1/256), meaning the price updates      every t0 / 256 seconds      For example, if halving time is one hour, the price updates every 14 seconds",
        "params": {
          "p0": "initial price",
          "t": "elapsed time",
          "t0": "price halving time"
        },
        "returns": {
          "_0": "price after `t` seconds passed, `p = p0 * 2^(-t/t0)`"
        }
      },
      "rescueErc20(address,address,uint256)": {
        "details": "Restricted access function to rescue accidentally sent ERC20 tokens,      the tokens are rescued via `transfer` function call on the      contract address specified and with the parameters specified:      `_contract.transfer(_to, _value)`Doesn't allow to rescue sILV tokens, use withdraw/withdrawTo insteadRequires executor to have `ROLE_RESCUE_MANAGER` permission",
        "params": {
          "_contract": "smart contract address to execute `transfer` function on",
          "_to": "to address in `transfer(_to, _value)`",
          "_value": "value to transfer in `transfer(_to, _value)`"
        }
      },
      "setBeneficiary(address)": {
        "details": "Restricted access function to update the sale beneficiary address, the address      can be set, updated, or \"unset\" (deleted, set to zero)Setting the address to non-zero value effectively activates funds withdrawal      mechanism via the push patternSetting the address to zero value effectively deactivates funds withdrawal      mechanism via the push pattern (pull mechanism can be used instead)"
      },
      "setInputDataRoot(bytes32)": {
        "details": "Requires executor to have `ROLE_DATA_MANAGER` permission",
        "params": {
          "_root": "Merkle tree root for the input plot data collection"
        }
      },
      "tokenPriceAt(uint32,uint16,uint32)": {
        "details": "Throws if `t` is outside the [saleStart, saleEnd) bounds,      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),      or if the tier specified is invalid (no starting price is defined for it)",
        "params": {
          "sequenceId": "ID of the sequence token is sold in",
          "t": "the time of interest, time to evaluate the price at",
          "tierId": "ID of the tier token belongs to (defines token rarity)"
        }
      },
      "tokenPriceNow(uint32,uint16)": {
        "details": "Throws if `now` is outside the [saleStart, saleEnd) bounds,      or if it is outside the sequence bounds (sequence lasts for `seqDuration`),      or if the tier specified is invalid (no starting price is defined for it)",
        "params": {
          "sequenceId": "ID of the sequence token is sold in",
          "tierId": "ID of the tier token belongs to (defines token rarity)"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for or zero      to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      },
      "withdraw(bool)": {
        "details": "Restricted access function to withdraw funds on the contract balance,      sends funds back to transaction senderWithdraws both ETH and sILV balances if `_ethOnly` is set to false,      withdraws only ETH is `_ethOnly` is set to true",
        "params": {
          "_ethOnly": "a flag indicating whether to withdraw sILV or not"
        }
      },
      "withdrawTo(address,bool)": {
        "details": "Restricted access function to withdraw funds on the contract balance,      sends funds to the address specifiedWithdraws both ETH and sILV balances if `_ethOnly` is set to false,      withdraws only ETH is `_ethOnly` is set to true",
        "params": {
          "_ethOnly": "a flag indicating whether to withdraw sILV or not",
          "_to": "an address to send funds to"
        }
      }
    },
    "stateVariables": {
      "FEATURE_SALE_ACTIVE": {
        "details": "Feature FEATURE_SALE_ACTIVE must be enabled in order for      `buy()` function to be able to succeed"
      },
      "ROLE_DATA_MANAGER": {
        "details": "Role ROLE_DATA_MANAGER allows setting the Merkle tree root via setInputDataRoot()"
      },
      "ROLE_RESCUE_MANAGER": {
        "details": "Role ROLE_RESCUE_MANAGER allows withdrawing any ERC20 tokens stored      on the smart contract balance"
      },
      "ROLE_SALE_MANAGER": {
        "details": "Role ROLE_SALE_MANAGER allows sale initialization via initialize()"
      },
      "ROLE_WITHDRAWAL_MANAGER": {
        "details": "Role ROLE_WITHDRAWAL_MANAGER allows to set the `beneficiary` address via      - setBeneficiary()Role ROLE_WITHDRAWAL_MANAGER allows pull withdrawals of funds:      - withdraw()      - withdrawTo()"
      },
      "beneficiary": {
        "details": "Sale beneficiary address, if set - used to send funds obtained from the sale;      If not set - contract accumulates the funds on its own deployed address"
      },
      "halvingTime": {
        "details": "Price halving time, the time required for a token price to reduce to the      half of its initial valueDefined in seconds"
      },
      "sIlvContract": {
        "details": "Note: sILV ERC20 implementation never returns \"false\" on transfers,      it throws instead; we don't use any additional libraries like SafeERC20      to transfer sILV therefore"
      },
      "saleEnd": {
        "details": "Sale end unix timestamp, this is the time when sale deactivates,      and tokens of the last sequence become unavailableThe sale is active before the end (exclusive)"
      },
      "saleStart": {
        "details": "Sale start unix timestamp, this is the time when sale activates,      the time when the first sequence sale starts, that is      when tokens of the first sequence become available on saleThe sale is active after the start (inclusive)"
      },
      "seqDuration": {
        "details": "Sequence duration, time limit of how long a token / sequence can be available      for sale, first sequence stops selling at `saleStart + seqDuration`, second      sequence stops selling at `saleStart + seqOffset + seqDuration`, and so onDefined in seconds"
      },
      "seqOffset": {
        "details": "Sequence start offset, first sequence starts selling at `saleStart`,      second sequence starts at `saleStart + seqOffset`, third at      `saleStart + 2 * seqOffset` and so on at `saleStart + n * seqOffset`,      where `n` is zero-based sequence IDDefined in seconds"
      },
      "startPrices": {
        "details": "Tier start prices, starting token price for each (zero based) Tier ID,      defined in ETH, can be converted into sILV via Uniswap/Sushiswap price oracle,      sILV price is defined to be equal to ILV price"
      },
      "timeFlowQuantum": {
        "details": "Time flow quantum, price update interval, used by the price calculation algorithm,      the time is rounded down to be multiple of quantum when performing price calculations;      setting this value to one effectively disables its effect;Defined in seconds"
      }
    },
    "title": "Land Sale",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FEATURE_SALE_ACTIVE()": {
        "notice": "Enables the sale, buying tokens public function"
      },
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_DATA_MANAGER()": {
        "notice": "Data manager is responsible for supplying the valid input plot data collection      Merkle root which then can be used to mint tokens, meaning effectively,      that data manager may act as a minter on the target NFT contract"
      },
      "ROLE_RESCUE_MANAGER()": {
        "notice": "People do mistake and may send ERC20 tokens by mistake; since      NFT smart contract is not designed to accept and hold any ERC20 tokens,      it allows the rescue manager to \"rescue\" such lost tokensRescue manager is responsible for \"rescuing\" ERC20 tokens accidentally      sent to the smart contract, except the sILV which is a payment token      and can be withdrawn by the withdrawal manager only"
      },
      "ROLE_SALE_MANAGER()": {
        "notice": "Sale manager is responsible for sale initialization:      setting up sale start/end, halving time, sequence params, and starting prices"
      },
      "ROLE_WITHDRAWAL_MANAGER()": {
        "notice": "Withdrawal manager is responsible for withdrawing funds obtained in sale      from the sale smart contract via pull/push mechanisms:      1) Pull: no pre-setup is required, withdrawal manager executes the         withdraw function periodically to withdraw funds      2) Push: withdrawal manager sets the `beneficiary` address which is used         by the smart contract to send funds to when users purchase land NFTs"
      },
      "buy((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])": {
        "notice": "Sells a plot of land (Land ERC721 token) from the sale to executor.      Executor must supply the metadata for the land plot and a Merkle tree proof      for the metadata supplied.Metadata for all the plots is stored off-chain and is publicly available      to buy plots and to generate Merkle proofs"
      },
      "evaluateBy(address,uint256,uint256)": {
        "notice": "Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "isActive()": {
        "notice": "Verifies if sale is in the active state, meaning that it is properly      initialized with the sale start/end times, sequence params, etc., and      that the current time is within the sale start/end boundsDoesn't check if the plot data Merkle root `root` is set or not;      active sale state doesn't guarantee that an item can be actually bought"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isPlotValid((uint32,uint32,uint16,uint16,uint16,uint16,uint16),bytes32[])": {
        "notice": "Verifies the validity of a plot supplied (namely, if it's registered for the sale)      based on the Merkle root of the plot data collection (already defined on the contract),      and the Merkle proof supplied to validate the particular plot data"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "priceOracle()": {
        "notice": "Land Sale Price Oracle is used to convert the token prices from USD      to ETH or sILV (ILV)"
      },
      "root()": {
        "notice": "Input data root, Merkle tree root for the collection of plot data elements,      available on saleMerkle root effectively \"compresses\" the (potentially) huge collection of elements      and allows to store it in a single 256-bits storage slot on-chain"
      },
      "sIlvContract()": {
        "notice": "Deployed sILV (Escrowed Illuvium) ERC20 token address,      accepted as a payment option alongside ETH"
      },
      "setInputDataRoot(bytes32)": {
        "notice": "Restricted access function to update input data root (Merkle tree root),       and to define, effectively, the tokens to be created by this smart contract"
      },
      "targetNftContract()": {
        "notice": "Deployed LandERC721 token address to mint tokens of      (when they are bought via the sale)"
      },
      "tokenPriceAt(uint32,uint16,uint32)": {
        "notice": "Determines the dutch auction price value for a token in a given      sequence `sequenceId`, given tier `tierId`, at a given time `t`"
      },
      "tokenPriceNow(uint32,uint16)": {
        "notice": "Determines the dutch auction price value for a token in a given      sequence `sequenceId`, given tier `tierId`, now (block.timestamp)"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "userRoles(address)": {
        "notice": "Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      }
    },
    "notice": "Enables the Land NFT sale via dutch auction mechanismThe proposed volume of land is approximately 100,000 plots, split amongst the 7 regions.      The volume is released over a series of staggered sales with the first sale featuring      about 20,000 land plots (tokens).Land plots are sold in sequences, each sequence groups tokens which are sold in parallel.      Sequences start selling one by one with the configurable time interval between their start.      A sequence is available for a sale for a fixed (configurable) amount of time, meaning they      can overlap (tokens from several sequences are available on sale simultaneously) if this      amount of time is bigger than interval between sequences start.The sale operates in a configurable time interval which should be aligned with the      total number of sequences, their duration, and start interval.      Sale smart contract has no idea of the total number of sequences and doesn't validate      if these timings are correctly aligned.Starting prices of the plots are defined by the plot tier in ETH, and are configurable      within the sale contract per tier ID.      Token price declines over time exponentially, price halving time is configurable.      The exponential price decline simulates the price drop requirement which may be formulates      something like \"the price drops by 'x' % every 'y' minutes\".      For example, if x = 2, and y = 1, \"the price drops by 2% every minute\", the halving      time is around 34 minutes.Sale accepts ETH and sILV as a payment currency, sILV price is supplied by on-chain      price oracle (sILV price is assumed to be equal to ILV price)The data required to mint a plot includes (see `PlotData` struct):      - token ID, defines a unique ID for the land plot used as ERC721 token ID      - sequence ID, defines the time frame when the plot is available for sale      - region ID (1 - 7), determines which tileset to use in game,      - coordinates (x, y) on the overall world map, indicating which grid position the land sits in,      - tier ID (1 - 5), the rarity of the land, tier is used to create the list of sites,      - size (w, h), defines an internal coordinate system within a plot,Since minting a plot requires at least 32 bytes of data and due to a significant      amount of plots to be minted (about 100,000), pre-storing this data on-chain      is not a viable option (2,000,000,000 of gas only to pay for the storage).      Instead, we represent the whole land plot data collection on sale as a Merkle tree      structure and store the root of the Merkle tree on-chain.      To buy a particular plot, the buyer must know the entire collection and be able to      generate and present the Merkle proof for this particular plot.The input data is a collection of `PlotData` structures; the Merkle tree is built out      from this collection, and the tree root is stored on the contract by the data manager.      When buying a plot, the buyer also specifies the Merkle proof for a plot data to mint.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10687,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "userRoles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7737,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "root",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 7740,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "saleStart",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7743,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "saleEnd",
        "offset": 4,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7746,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "halvingTime",
        "offset": 8,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7749,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "timeFlowQuantum",
        "offset": 12,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7752,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "seqDuration",
        "offset": 16,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7755,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "seqOffset",
        "offset": 20,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 7759,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "startPrices",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint96)dyn_storage"
      },
      {
        "astId": 7762,
        "contract": "contracts/protocol/LandSale.sol:LandSale",
        "label": "beneficiary",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint96)dyn_storage": {
        "base": "t_uint96",
        "encoding": "dynamic_array",
        "label": "uint96[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}